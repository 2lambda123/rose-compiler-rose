
#ifndef __TILEK_RTL_KERNEL_H__
#define __TILEK_RTL_KERNEL_H__

#include "KLT/RTL/loop.h"
#include "KLT/RTL/data.h"

struct klt_loop_context_t;

#if defined(TILEK_THREADS)
typedef void (*kernel_func_ptr)(int, void **, void **, void **, void **, struct klt_loop_context_t *);
#else
typedef void (*kernel_func_ptr)(void **, void **, void **, void **, struct klt_loop_context_t *);
#endif

struct kernel_desc_t {
  struct klt_data_container_t data;
  struct klt_loop_container_t loop;
#if !defined(TILEK_ACCELERATOR) || !defined(TILEK_TARGET_OPENCL)
  kernel_func_ptr kernel_ptr;
#else
  char * kernel_name;
#endif
};

#if defined(TILEK_ACCELERATOR) && defined(TILEK_TARGET_OPENCL)
extern char * opencl_kernel_file;
#endif

extern struct kernel_desc_t kernel_desc[]; // Generated by compiler

struct kernel_t {
  struct kernel_desc_t * desc;

  void ** param;
  void ** scalar;
  struct klt_data_t * data;
  struct klt_data_t * priv;

  struct klt_loop_t * loops;

#if defined(TILEK_THREADS)
  int num_threads;
#elif defined(TILEK_ACCELERATOR)
  int num_gangs[3];
  int num_workers[3];
#endif
};

struct kernel_t * build_kernel(int idx);

void execute_kernel(struct kernel_t * kernel);

#if defined(TILEK_ACCELERATOR) && defined(TILEK_TARGET_OPENCL)
kernel_func_ptr need_to_instantiate_type; 
#endif

#endif /* __TILEK_RTL_KERNEL_H__ */

