#!/bin/bash 
#!/bin/bash -v
#
# This script locates a distribution package in a ROSE test directory.
#  examines the package and imports it as a vendor drop into an external repository.
# It assumes a layout of test dir as following:
#   x. sourcetree: a checkout copy of ROSE
#   x. build: a build dir for ROSE
# It conducts sanity check for the package, especially
#   x. Remove .svn directories
#   x. Make sure no EDG copyrighted files exist
#   x. Make sure the EDG binaries for all supported platforms do exist
# It imports the package which passes the check to 
#  the head of an external repository using svn_load_dirs.1.4.5.pl
# Use
#  thisScript ROSE_TOP_TEST_DIR
#
# by Liao, 7/31/2008
# Last Modified 8/27/2008
#------------------------------------------------------

# the backup one is for testing only
#REMOTE_SVN_REPOS=file:////home/liao6/backup/SCIDAC.MIRROR
REMOTE_SVN_REPOS=https://outreach.scidac.gov/svn/rose

if [ $# -lt 1 ]
then
  echo This script needs one argument to run.
  echo Example: $0 ROSE_TOP_TEST_DIR 
  exit 1
fi

# cleanup, svn_load_dirs.pl has some trouble to clean up itself. We help it here as well
# remove previous left over temporary dir generated by svn_load_dirs.??.pl
rm -rf /tmp/svn_load_dirs*

ROSE_TOP_TEST_DIR=$1
cd ${ROSE_TOP_TEST_DIR}

# find the distribution package from top/build
ROSE_DISTRIBUTION=$(find build -name  \*source-with-EDG-binary\*.tar.gz)
if [ $? -ne 0 ]; then
   echo "Fatal error: cannot find the distribution package!"
   exit 1
fi
echo Found the ROSE distribution package: $ROSE_DISTRIBUTION

ROSE_SRC=${ROSE_TOP_TEST_DIR}/sourcetree

UPLOAD_DIR=${ROSE_TOP_TEST_DIR}/upload
rm -rf ${UPLOAD_DIR}
mkdir -p ${UPLOAD_DIR}

# unpack the package to the work dir and get the root dir of the distribution
#----------------------------------------------------
tar xzvf ${ROSE_DISTRIBUTION} -C ${UPLOAD_DIR}

cd ${UPLOAD_DIR}
ROSE_DIST_DIR=$(ls ${UPLOAD_DIR})
echo "Unpacked ROSE distribution directory is: ${ROSE_DIST_DIR}"

# Find all unwanted directories and remove them
#----------------------------------------------------
find . -name .svn | xargs rm -rf
find . -name Makefile.in~ | xargs rm -rf
find . -name autom4te.cache | xargs rm -rf

# remove configure and Makefile.in
rm -rf ${ROSE_DIST_DIR}/configure
rm -rf ${ROSE_DIST_DIR}/aclocal.m4
rm -rf ${ROSE_DIST_DIR}/rose_config.h.in
rm -rf ${ROSE_DIST_DIR}/src/3rdPartyLibraries/libltdl/configure
rm -rf ${ROSE_DIST_DIR}/src/3rdPartyLibraries/libltdl/aclocal.m4
find . -name Makefile.in | xargs rm -rf
rm -rf ${ROSE_DIST_DIR}/projects/OpenMP_Parser/ompparser.cc
rm -rf ${ROSE_DIST_DIR}/projects/OpenMP_Parser/ompparser.h
rm -rf ${ROSE_DIST_DIR}/projects/OpenMP_Parser/omplexer.cc

# restore a few third party Makefile.in which cannot yet been automatically built
#cp ${ROSE_SRC}/src/3rdPartyLibraries/libharu-2.1.0/script/Makefile.in ${ROSE_DIST_DIR}/src/3rdPartyLibraries/libharu-2.1.0/script/Makefile.in
cp ${ROSE_SRC}/src/3rdPartyLibraries/libharu-2.1.0/Makefile.in ${ROSE_DIST_DIR}/src/3rdPartyLibraries/libharu-2.1.0/Makefile.in 
cp ${ROSE_SRC}/src/3rdPartyLibraries/libharu-2.1.0/src/Makefile.in ${ROSE_DIST_DIR}/src/3rdPartyLibraries/libharu-2.1.0/src/Makefile.in
cp ${ROSE_SRC}/src/3rdPartyLibraries/libharu-2.1.0/include/Makefile.in ${ROSE_DIST_DIR}/src/3rdPartyLibraries/libharu-2.1.0/include/Makefile.in

# Make sure no EDG copyrighted files exist
#----------------------------------------------------

# We search for some representative source files of EDG
EDG_FILES=($(find . -name il_def.h -or -name cp_gen_be.c -or -name lower_il.h))
#EDG_FILES=($(find . -name Makefile.am))
if [ ${EDG_FILES[0]} ]; then
  echo Fatal Error: Found copyrighted EDG source files:${EDG_FILES[@]}
  exit 1
fi

# and the copyright string of EDG: "Proprietary information of Edison Design Group Inc."
EDG_COPYRIGHT_STRINGS=($(find . -name \*.C -or -name \*.h -or -name \*.c -or -name \*.cpp| xargs grep 'Proprietary information of Edison Design Group Inc.'))

if [ ${EDG_COPYRIGHT_STRINGS[0]} ]; then
  echo Fatal Error: Found copyrighted EDG text in source files:${EDG_COPYRIGHT_STRINGS[@]}
  exit 2
fi

# Make sure all binary EDG versions for three platforms exist:i686-apple, i686-redhat, 
# and x86_64-redhat, using a bash array (index starting from 0) to test it.
EDG_BINARIES1=($(ls ${ROSE_DIST_DIR}/src/frontend/CxxFrontend/roseBinaryEDG-i686-pc-linux-gnu*.tar.gz))
if [ ${EDG_BINARIES1[0]} ]; then
   echo Found the EDG binaries for i686-pc-linux as expected. It is ${EDG_BINARIES1[@]}. 
else 
  echo Fatal Error: No EDG binaries for i686-pc-linux are available. 
  exit 3
fi

EDG_BINARIES2=($(ls ${ROSE_DIST_DIR}/src/frontend/CxxFrontend/roseBinaryEDG-x86_64-pc-linux-gnu*.tar.gz))
if [ ${EDG_BINARIES2[0]} ]; then
   echo Found the EDG binaries for x86_64-pc-linux-gnu as expected. It is ${EDG_BINARIES2[@]}. 
else 
  echo Fatal Error: No EDG binaries for x86_64-pc-linux-gnu are available. 
  exit 3
fi
# TODO add OS-x binary check 

# Now we can upload the package
#--------------------------------------------------------
${ROSE_SRC}/scripts/svn_load_dirs.1.4.5.pl -no_user_input ${REMOTE_SVN_REPOS} trunk ${ROSE_DIST_DIR}

if [ $? -ne 0 ]; then
   echo "Error: svn_load_dirs finishes abnormally!"
   exit 3
else
  echo "svn_load_dirs.pl finishes normally."
fi
#rm -rf ${UPLOAD_DIR}
