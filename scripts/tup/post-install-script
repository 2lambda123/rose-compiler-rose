#!/bin/bash
set -e
arg0="${0##*/}"

warning() {
    echo "$arg0: warning:" "$@" >&2
}

die() {
    echo "$arg0: error:" "$@" >&2
    exit 1
}

# We can get the deployed installation directory from the command-line.
prefix=
while [ "$#" -gt 0 ]; do
    case "$1" in
	--prefix-bin=*)
	    prefix="${1#--prefix-bin=}"
	    shift
	    ;;
	*)
	    shift
	    ;;
    esac
done
if [ -z "$prefix" ]; then
    warning "no installation prefix; nothing for the post installation script to do"
    exit 0
fi
[ -d "$prefix/bin" ] || warning "missing installation directory: $prefix/bin"
[ -d "$prefix/lib" ] || warning "missing installation directory: $prefix/lib"

# The program we can use to change the rpath that's embedded in a dynamically linked ELF executable. The patchelf tool is a bit
# slower than chrpath but can handle more cases, so we prefer it.  We don't report any errors here yet, but rather wait to see
# if we're actually installing any dynamically linked executables.
rpath_changer=
if patchelf --version >/dev/null 2>&1; then
    rpath_changer=patchelf
elif chrpath --version >/dev/null 2>&1; then
    rpath_changer=chrpath
elif rpath --version >/dev/null 2>&1; then
    rpath_changer=rpath
else
    die "error: no way to change rpaths; please install patchelf, chrpath, or rpath."
fi

# Patch all the libraries and executables so they have the correct rpath.
for f in "$prefix"/bin/* "$prefix"/lib/lib*.so; do
    if [ -r "$f" ]; then
	echo -n "adjusting rpath for $f... " >&2
	case "$rpath_changer" in
	    patchelf)
		echo $(patchelf --set-rpath "$prefix/lib" "$f" || true)
		;;
	    chrpath)
		# chrpath is excessively noisy
		chrpath --replace "$prefix/lib" "$f" >/dev/null || \
		    chrpath --replace "$prefix/lib" "$f" || \
		    true
		;;
	    rpath)
		rpath "$prefix/lib" "$f"
		;;
	    *)
		die "error: unknown rpath changer: $rpath_changer"
		;;
	esac
    fi
done

# Patch the rose-*.cfg files by replacing the directories from the build system with those
# on the deployed system.
for f in $(find "$prefix" -type f -name 'rose-*.cfg'); do
    # ROSE installation prefix as deployed, not built
    sed -i~ -e 's%^ROSE_PREFIX[ \t]*=.*%ROSE_PREFIX = '"$prefix"'%' "$f"

    # These make no sense on the deployed system since there is no source code or build directory.
    sed -i~ -e '/^ROSE_SOURCE[ \t]*=/ d' "$f"
    sed -i~ -e '/^ROSE_BUILD[ \t]*=/ d' "$f"

    # Compilers used on the build system are not the same as compilers on the deployed system. The
    # build system often uses locally installed compilers.
    sed -i~ -e 's%^ROSE_\(CC\|CXX\)[ \t]*=.*/\([^/]*\)[ \t]*$%ROSE_\1 = \2%' "$f"

    # Replace all the -I switches with just a few
    sed -i~ -e '/^ROSE_CPPFLAGS[ \t]*=/ s/ -I[^ \t]*//g' "$f"
    sed -i~ -e '/^ROSE_CPPFLAGS[ \t]*=/ s%[ \t]*$% -I'"$prefix"'/include%' "$f"

    # Replace all the -L and -Wl,-rpath, switches with just a few
    sed -i~ -e '/^ROSE_LDFLAGS\(\|_STATIC\|_SHARED\)[ \t]*=/ s/ \(-L\|-Wl,-rpath,\)[^ \t]*//g' "$f"
    sed -i~ -e 's%^\(ROSE_LDFLAGS\(\|_STATIC\|_SHARED\)[ \t]*=\)%\1 -L'"$prefix"'/lib -Wl,-rpath,'"$prefix"'/lib%' "$f"

    # Replace all the library directories with just one
    sed -i~ -e 's%^ROSE_RPATHS[ \t]*=.*%ROSE_RPATHS = '"$prefix"'/lib%' "$f"
done

# If the libtool shell script is installed, then fix the compiler names by removing the directory components and relying
# on the compiler being found in the $PATH search paths.
if [ -e "$prefix/bin/libtool" ]; then
    sed -i~ -e '/\.spock/ s%\([^=]*\)=".*/\([^/]*\)"%\1="\2"%' "$prefix/bin/libtool"
fi

exit 0
