#!/bin/bash

# This script is intended to take the place of ROSE's "cmake" command. It takes all the same command-line arguments, but produces a
# build tree configured for tup instead of cmake.
#
# This script does not require RMC to be used to configure ROSE, although that's how it's usually tested. If you don't use RMC, some
# features might be missing due to not being supported by ROSE's cmake command.  E.g., ROSE's cmake has no way to specify the
# location of the libgpg-error package which is needed by libgcrypt, therefore if you don't use RMC then the tup files will be
# configured to find "-lgpg-error" without any particular search directory.

set -e

arg0="${0##*/}"
dir0="${0%/*}"
dry_run=
config_timestamp=.config-timestamp
: VERBOSE # if non-empty, be verbose. Also set by the --verbose switch.

: ${TUP_SCRIPTS_URL=https://github.com/matzke1/tup-scripts}

# Print arguments and exit failure
die() {
    echo "$arg0:" "$@" >&2
    exit 1
}

# Given a name and a bunch of arguments of the form "name1=value1", "name2=value2", etc. return the value for the specified name, or
# nothing. The names don't have to be just letters.
value_of() {
    local name="$1"; shift
    local arg
    for arg in "$@"; do
	local val="${arg#$name=}"
	if [ "$val" != "$arg" ]; then
	    echo "$val"
	    return 0
	fi
    done
}

# Given a word and a list of words, return 0 if the word is present in the list and 1 otherwise.
is_present() {
    local name="$1"; shift
    local arg
    for arg in "$@"; do
	[ "$name" = "$arg" ] && return 0
    done
    return 1
}

# Convert a string to lower case
to_lower() {
    echo "$@" |tr A-Z z-z
}

# Given ROSE cmake command-line arguments, return the value of the specified switch.
#   If the command-line contains "NAME=VALUE" then return VALUE
#   else if the switch matches "-DNAME=VALUE" then return VALUE
#   else return nothing
#
# The comparison is case insensitive
config_switch() {
    local name="$(to_lower "$1")"; shift
    local switch
    for switch in "$@"; do
	switch="$(to_lower "$switch")"

	# Look for "NAME=VAL"
	local val="${switch#$name=}"
	if [ "$val" != "$switch" ]; then
	    echo "$val"
	    return 0
	fi

	# Look for "-DNAME=VAL"
	val="${switch#-D$name=}"
	if [ "$val" != "$switch" ]; then
	    echo "$val"
	    return 0
	fi
    done
}

# Given ROSE cmake command-line arguments return success or failure depending on whether the command-line switch has a true or false
# value. If the switch is absent then consider it to be false. Also echos "yes" when returning true.
config_boolean() {
    local value="$(to_lower "$(config_switch "$@")")"
    case "$value" in
	no|off|"")
	    return 1
	    ;;
	*)
	    echo "yes"
	    return 0
	    ;;
    esac
}

# Same as config_boolean except doesn't return any string -- just success or failure
config_boolean_silent() {
    config_boolean "$@" >/dev/null 2>&1
}

## Given the NAME of a variable, return the value as set in a makefile. The makefile must have a line
## of the form "NAME = VALUE" where VALUE does not contain the string "$(" or "${"
#makefile_value() {
#    local variable="$1" makefile="$2"
#    sed -n "/^${variable}[ \t]*=/ { s/^${variable}[ \t]*=[ \t]*//p; q }" <"$makefile"
#}
#
## Given the NAME of a variable, return the value from the specified file (or rose_config.h). Returns nothing if the value is
## not defined.
#cpp_defined() {
#    local variable="$1" file="$2"
#    [ -n "$file" ] || file="rose_config.h"
#    sed -n "/^#define[ \t][ \t]*${variable}[ \t]/ { s/^#define[ \t]*${variable}[ \t]*//p; q }" <"$file"
#}
#
## Given a C preprocessor include search path argument of the form "-Ifoo/include" return "foo".
#prefix_from_include() {
#    echo "$1" |\
#	sed -n 's/^[ \t]*-I[ \t]*\(.*\)\/include/\1/p'
#}

# Given VALUE, YES, and NO
#   if VALUE is empty, "no", "none", or "ambivalent" return NO otherwise return YES
value_ite() {
    local value="$1" yes="$2" no="$3"
    case "$value" in
	no|none|""|ambivalent)
	    echo "$no"
	    ;;
	*)
	    echo "$yes"
	    ;;
    esac
}

# Given a VALUE and DEFAULT, return one or the other
value_or_else() {
    local value="$1" dflt="$2"
    value_ite "$value" "$value" "$dflt"
}

# Given a VALUE return "no" or VALUE.  A second argument of "no" forces the return of "no"
value_or_no() {
    if [ "$2" = "no" ]; then
	echo no
    else
	value_or_else "$1" no
    fi
}

# Given ROSE cmake arguments, echo the list of tup variables for enabling and disabling ROSE language features in the tup.config
# file.
language_vars() {
    # Get list of enabled languages
    local languages=()

    config_boolean_silent -DENABLE-BINARY-ANALYSIS "$@" &&
	languages=("${languages[@]}" "binary")

    config_boolean_silent -DENABLE-C "$@" &&
	languages=("${languages[@]}" "cxx")

    config_boolean_silent -DENABLE-CUDA "$@" &&
	languages=("${languages[@]}" "cuda")

    config_boolean_silent -DENABLE-JAVA "$@" &&
	languages=("${languages[@]}" "java")

    config_boolean_silent -DENABLE-OPENCL "$@" &&
	languages=("${languages[@]}" "opencl")

    config_boolean_silent -DENABLE-FORTRAN "$@" &&
	languages=("${languages[@]}" "fortran")

    config_boolean_silent -DENABLE-PHP "$@" &&
	languages=("${languages[@]}" "php")

    config_boolean_silent -DENABLE-PYTHON "$@" &&
	languages=("${languages[@]}" "python")

    config_boolean_silent -DENABLE-ADA "$@" &&
	languages=("${languages[@]}" "ada")

    config_boolean_silent -DENABLE-JOVIAL "$@" &&
	languages=("${languages[@]}" "jovial")

    for lang in "${languages[@]}"; do
	echo -n "ENABLE_${lang}_ANALYSIS" |tr a-z A-Z
	echo "=yes"
    done
}

# Information about the hosting compiler
host_compiler_vars() {
    if [ -n "$CXX_VENDOR" ]; then
	echo "CXX_VENDOR=\"$CXX_VENDOR\""
	echo "CXX_VERSION=\"$CXX_VERSION\""
	echo "CXX_LANGUAGE=\"$CXX_LANGUAGE\""
    fi

    if [ -n "$C_VENDOR" ]; then
	echo "C_VENDOR=\"$C_VENDOR\""
	echo "C_VERSION=\"$C_VERSION\""
	echo "C_LANGUAGE=\"$C_LANGUAGE\""
    fi
}

# Information about the target (backend) compiler. For GNU Autotools, these came from variables defined in the Makefile, but we
# no longer have that information with CMake. If we're using RMC/Spock, we can get this information from the compiler itself, or
# from the environment.
target_compiler_vars() {
    if [ -n "$CXX_VENDOR" ]; then
	echo "CXX_TARGET_VENDOR=\"$CXX_VENDOR\""
    else
	echo "CXX_TARGET_VENDOR=\"$(c++ --spock-triplet |cut -d: -f1)\""
    fi

    if [ -n "$CXX_VERSION" ]; then
	echo "CXX_TARGET_VERSION=\"$CXX_VERSION\""
    else
	echo "CXX_TARGET_VERSION=\"$(c++ --spock-triplet |cut -d: -f3)\""
    fi
}

# Given a compiler command-line switch, returns the class of the switch.
compiler_switch_class() {
    case "$1" in
	-g|-DNDEBUG|-D_FORTIFY_SOURCE*|-Wp,-D_GLIBCX_ASSERTIONS|-Wl,-z,*)
	    echo debug
	    ;;
	-W*|-fdiagnostics-color*|-ftemplate-backtrace-limit*)
	    echo warn
	    ;;
	-O*)
	    echo optim
	    ;;
	*)
	    echo misc
	    ;;
    esac
}

# Given a class name and a list of compiler command-line switches, return those switches that belong to the class.
compiler_switches() {
    local class="$1"; shift
    local arg
    local result=()
    for arg in "$@"; do
	if [ "$(compiler_switch_class "$arg")" = "$class" ]; then
	    result=("${result[@]}" "$arg")
	fi
    done

    echo "${result[@]}"
}

# Given the names of the variables that hold C and C++ switches, move the switches that are common to both to the variable specified
# as the third argument.
divy_compiler_switches() {
    local c_var="$1" cxx_var="$2" combined_var="$3"
    local c_out=() cxx_out=() combined_out=()
    
    for c_switch in ${!c_var}; do
	local found=
	for cxx_switch in ${!cxx_var}; do
	    if [ "$c_switch" = "$cxx_switch" ]; then
		found=yes
		break
	    fi
	done
	if [ -n "$found" ]; then
	    combined_out=("${combined_out[@]}" "$c_switch")
	else
	    c_out=("${c_out[@]}" "$c_switch")
	fi
    done

    for cxx_switch in ${!cxx_var}; do
	local found=
	for combined_switch in "${combined_out[@]}"; do
	    if [ "$cxx_switch" = "$combined_switch" ]; then
		found=yes
		break
	    fi
	done
	if [ "$found" = "" ]; then
	    cxx_out=("${cxx_out[@]}" "$cxx_switch")
	fi
    done

    eval "$c_var='${c_out[*]}'"
    eval "$cxx_var='${cxx_out[*]}'"
    eval "$combined_var='${combined_out[@]}'"
}

# The default handler for failed logic assertions.
assertion_behavior() {
    local behavior="$(value_or_else "$(config_switch -DASSERTION_BEHAVIOR "@$")" abort)"
    case "$behavior" in
	abort)
	    echo "ROSE_ASSERTION_ABORT"
	    ;;
	exit)
	    echo "ROSE_ASSERTION_EXIT"
	    ;;
	throw)
	    echo "ROSE_ASSERTION_THROW"
	    ;;
	*)
	    die "invalid assertion behavior \"$behavior\""
	    ;;
    esac
}

# Given the name of a "lib", "include", or "bin" directory, return the part before.
# The given path can have one additional component after the "lib", "include", or "bin"
prefix() {
    local path="$1"

    if [ "${path%/bin}" != "$path" ]; then
	echo "${path%/bin}"
    elif [ "${path%/bin/*}" != "$path" ]; then
	echo "${path%/bin/*}"
    elif [ "${path%/include}" != "$path" ]; then
	echo "${path%/include}"
    elif [ "${path%/include/*}" != "$path" ]; then
	echo "${path%/include/*}"
    elif [ "${path%/lib}" != "$path" ]; then
	echo "${path%/lib}"
    elif [ "${path%/lib/*}" != "$path" ]; then
	echo "${path%/lib/*}"
    fi
}

# Remove zero or one set of single or double that enclose the entire value
remove_outer_quotes() {
    local value="$1"
    echo "$value" |sed 's/\(["'"'"']\)\(.*\)\1/\2/'
}

# # Grab the EDG major and minor version number from the top-level Makefile
# edg_version() {
#     edg_major="$(makefile_value ROSE_EDG_MAJOR_VERSION_NUMBER Makefile)"
#     edg_minor="$(makefile_value ROSE_EDG_MINOR_VERSION_NUMBER Makefile)"
#     [ -n "$edg_major" -a -n "$edg_minor" ] && echo "${edg_major}.${edg_minor}"
# }

# Execute the arguments as a command, or just show them
dry_run() {
    local comment_out=""
    if [ -n "$dry_run" ]; then
	echo "+" "$@"
    else
	"$@"
    fi
}

# Remove files in the build tree that we don't need and which jus pollute
clean_generated_files() {
    # GNU Autotools
    dry_run find . -name Makefile -print0 |xargs -0 --no-run-if-empty rm ${VERBOSE:+--verbose}

    # CMake
    dry_run find . -name '*.cmake' -print0 |xargs -0 --no-run-if-empty rm ${VERBOSE:+--verbose}
    dry_run find . -type d -name CMakeFiles -print0 |xargs -0 --no-run-if-empty rm -rf ${VERBOSE:+--verbose}
    dry_run rm -rf ${VERBOSE:+--verbose} ./CMakeCache.txt CMakeDoxyfile.in DartConfiguration.tcl
    dry_run rm -rf ${VERBOSE:+--verbose} compile_commands.json

    # Recursively remove empty directories
    find . -depth -type d -empty -execdir rmdir ${VERBOSE:+--verbose} '{}' ';'
}

########################################################################################################################
########################################################################################################################

if is_present --dry-run "$@" || is_present -n "$@"; then
    dry_run=yes
fi

RG_SRC="$(cd .. && pwd)"
[ -r "$RG_SRC/ROSE_VERSION" ] || die "parent directory ($RG_SRC) is not the top of the ROSE source tree"
[ -r "$RG_SRC/CMakeLists.txt" ] || die "$RG_SRC/CMakeLists.txt not found"
[ -r "$RG_SRC/Tuprules.tup" ] || die "ROSE does not support Tup builds (did you apply the patch?)"
if [ ! -d "$RG_SRC/scripts/tup" ]; then
    echo "$arg0: Robb's Tup scripts are not installed. Doing that now..." >&2
    dry_run git clone "$TUP_SCRIPTS_URL" "$RG_SRC/scripts/tup"
fi

# Run ROSE's cmake command
dry_run touch "$config_timestamp"
dry_run sleep 1 # in case of low-resolution file mtimes
dry_run cmake "$@" ..
echo "$arg0: generating tup configuration..."

# Figure out C and C++ compiler switches. Put them in categories and simplify them so the Tup config file is easy for humans to
# modify later.
c_switches="$(value_or_else "$(value_of -DCMAKE_C_FLAGS "$@")" "-g -O3 -DNDEBUG $CFLAGS") -pthread"
c_debug="$(compiler_switches debug $c_switches)"
c_optim="$(compiler_switches optim $c_switches)"
c_warn="$(compiler_switches warn $c_switches)"
c_misc="$(compiler_switches misc $c_switches)"

cxx_switches="$(value_or_else "$(value_of -DCMAKE_CXX_FLAGS "$@")" "-g -O3 -DNDEBUG $CFLAGS") -pthread"
cxx_debug="$(compiler_switches debug $cxx_switches)"
cxx_optim="$(compiler_switches optim $cxx_switches)"
cxx_warn="$(compiler_switches warn $cxx_switches)"
cxx_misc="$(compiler_switches misc $cxx_switches)"

divy_compiler_switches c_debug cxx_debug c_cxx_debug
divy_compiler_switches c_optim cxx_optim c_cxx_optim
divy_compiler_switches c_warn cxx_warn c_cxx_warn
divy_compiler_switches c_misc cxx_misc c_cxx_misc

# Generate the tup.config file in the CWD by merging the source tup.config with information that was passed to the configure script
# and the results of the configure script. If the information isn't available as a configure argument or a configure result, then
# try to get it from RMC/Spock. If RMC/Spock isn't being used then assume "no" in most cases.
dry_run $RG_SRC/scripts/tup/merge-configs \
	CC="$(value_or_else "$(value_or_else "$(value_of -DCMAKE_C_COMPILER "$@")" "$C_COMPILER")" cc)" \
	CXX="$(value_or_else "$(value_or_else "$(value_of -DCMAKE_CXX_COMPILER "$@")" "$CXX_COMPILER")" c++)" \
	C_DEBUG="$c_debug" \
	C_OPTIM="$c_optim" \
	C_WARN="$c_warn" \
	C_MISC="$c_misc" \
	CXX_DEBUG="$cxx_debug" \
	CXX_OPTIM="$cxx_optim" \
	CXX_WARN="$cxx_warn" \
	CXX_MISC="$cxx_misc" \
	C_CXX_DEBUG="$c_cxx_debug" \
	C_CXX_OPTIM="$c_cxx_optim" \
	C_CXX_WARN="$c_cxx_warn" \
	C_CXX_MISC="$c_cxx_misc" \
	LD_MISC="-fuse-ld=gold -pthread" \
	INSTALLATION_PREFIX="$(value_of -DCMAKE_INSTALL_PREFIX "$@")" \
	$(language_vars "$@") \
	WITH_BOOST="$(value_or_no "$(config_switch -DBOOST_ROOT "$@")")" \
	WITH_CAPSTONE="$(value_or_no "$(config_switch -DCAPSTONE_ROOT "$@")")" \
	WITH_CEREAL="$(value_or_no "$(config_switch -DCEREAL_ROOT "$@")")" \
	WITH_DLIB="$(value_or_no "$(config_switch -DDLIB_ROOT "$@")")" \
	WITH_DWARF="$(value_or_no "$(config_switch -DDWARF_ROOT "$@")")" \
	WITH_ELF="$(value_or_no "$(config_switch -DELF_ROOT "$@")")" \
	WITH_GCRYPT="$(value_or_no "$(config_switch -DGCRYPT_ROOT "$@")")" \
	WITH_GPG_ERROR="$(value_or_no "$(config_switch -DGPGERROR_ROOT "$@")")" \
	WITH_MAGIC="$(value_or_no "$(config_switch -DMAGIC_ROOT "$@")")" \
	WITH_PQXX="$(value_or_no "$(config_switch -DPQXX_ROOT "$@")")" \
	WITH_QT="$(value_or_no "$(config_switch -DQT_ROOT "$@")")" \
	WITH_READLINE="$(value_or_no "$(config_switch -DREADLINE_ROOT "$@")")" \
	WITH_SQLITE="$(value_or_no "$(config_switch -DSQLITE3_ROOT "$@")")" \
	WITH_WT="$(value_or_no "$(config_switch -DWT_ROOT "$@")")" \
	WITH_YAMLCPP="$(value_or_no "$(config_switch -DYAMLCPP_ROOT "$@")")" \
	WITH_Z3="$(value_or_no "$(config_switch -DZ3_ROOT "$@")")" \
	WITH_ZLIB="$(value_or_no "$(config_switch -DZLIB_ROOT "$@")")" \
	AUTOTOOLS_STASH="$(pwd)/.stash" \
	$(host_compiler_vars) \
	$(target_compiler_vars) \
	ROSE_SOURCE="$RG_SRC" \
	ROSE_VERSION="$(cat "$RG_SRC/ROSE_VERSION")" \
	ASSERTION_BEHAVIOR="$(assertion_behavior "$@")" \
	TUP_ACKNOWLEDGMENT="$(value_or_no "$TUP_ACKNOWLEDGMENT")" \
	< "${RG_SRC}/tup.config" > ./tup.config

clean_generated_files

# The ROSE_CONFIGURE_DATE is usually the time at which "configure" was run. However, that causes the contents of the
# src/util/rose_paths.C file to change every time configure runs, which means that rose_paths.C needs to be recompiled, which means
# that CxxGrammarMetaProgram needs to be recompiled, which means all the huge ROSETTA generated source files might need to be
# recompiled. Also, since the src/util/librose_partial.a archive gets updated, librose.so and librose.a need to be rebuilt, which
# means all the ROSE tests need to be recompiled and relinked, which means all the test results are out-of-date and need to be
# re-run. Whew!!!! Therefore, we'll replace the configuration date with something that's close but changes less frequently: namely,
# the last commit date.
commit_date="$(git log -1 --pretty=format:"%cd")"
sed -i "s/^const std::string ROSE_CONFIGURE_DATE .*/const std::string ROSE_CONFIGURE_DATE = \"$commit_date\";/" src/util/rose_paths.C

# Initialize or update the tup database
if [ ! -r tup.debug ]; then
    # The initial tup build in this variant directory needs to start with an empty directory except for the tup.config file and dot
    # files. Therefore, temporarily stash away everything, run some trivial tup command, and then unstash.  We leave a copy in the
    # stash so that Tupfiles can have rules to reach into the stash to update the working copy.
    dry_run rm -rf .stash
    dry_run mkdir .stash
    dry_run mv * .stash
    dry_run mv .stash/tup.config .
    dry_run tup tup.debug
    dry_run rsync -a .stash/ .
    dry_run tup tup.debug
else
    # Any files that were just created or modified by ROSE's cmake command should be copied into the stash so that Tupfile rules
    # that copy them back out into the build tree will get the latest version rather than overwriting the working copy with an old
    # version. However, if the only change is the file's mtime, reset the mtime to be the same as in the stash.
    if [ -n "$dry_run" ]; then
	echo "+ : update_stash" >&2
    else
	for file in $(find . -type f -newer $config_timestamp); do
	    dir="${file%/*}"
	    [ -n "$dir" ] || dir="."
	    save=
	    if [ ! -e ".stash/$file" ]; then
		save=yes # not existing in the stash
	    elif ! cmp --quiet "$file" ".stash/$file"; then
		save=yes # files differ
	    fi
	    if [ -n "$save" ]; then
		# Save the new file
		dry_run mkdir -p ".stash/$dir"
		dry_run cp -p "$file" ".stash/$file"
	    else
		# Restore the old (identical) file including its mtime
		dry_run mkdir -p "$dir"
		dry_run cp -p ".stash/$file" "$file"
	    fi
	done
    fi
    dry_run tup tup.debug
fi

# Speed up the first build by parsing Tup files now
#dry_run tup parse

# Generate a stub makefile at the top level for users that can't remember how to spell "tup"
(
    echo "# This makefile is just a stub because you've chosen to build ROSE using tup."
    echo
    echo ".PHONY: all check install"
    echo
    echo "all:; tup"
    echo "check:; tup"
    echo "install:; tup && ../scripts/tup/install-staged --next"
) >Makefile
