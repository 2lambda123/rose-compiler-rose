#!/usr/bin/perl
use Cwd;
use strict;

# Split command into shell words
sub split_into_words {
    my($s) = @_;
    my(@words); # return value
    my($in_quote, $word);

    for my $char (split //, $s) {
	if ($char eq '\'') {
	    $in_quote = !$in_quote;
	} elsif ($in_quote) {
	    $word .= $char;
	} elsif ($char =~ /\s/) {
	    push @words, $word if $word ne "";
	    $word = "";
	} else {
	    $word .= $char;
	}
    }
    push @words, $word if $word ne "";
    return @words;
}

# For each word of the compile command, make some replacements.
sub replace {
    my($top, @words) = @_;
    my(@new_words);
    for my $word (@words) {
	if ($word =~ /^(.*\.o)\.json$/) {
	    # The -o switch argument for compiler commands gets messed up because it's generated from Tup's "%f" switch,
	    # which is the JSON file name for the *.o file when generating the compilation database.
	    push @new_words, $1;
	} elsif (my($dir) = $word =~ /^-I(.+)$/ and $top ne "") {
	    push @new_words, $word;
	    if (substr($dir,0,length($top)) eq $top) {
		my($srcdir) = "../$dir";
		push @new_words, "-I$srcdir";
	    }
	} else {
	    push @new_words, $word;
	}
    }
    return @new_words;
}

# Escape a value as if it were already inside a JSON double quoted string.
sub json_escape {
    $_[0] =~ s/(["\\])/\\$1/g;
    return $_[0];
}

my @debug;

# Assuming the CWD is somwhere in the build tree under the source tree, compute the name of the corresponding source
# tree. If $top is empty then it returns the CWD unmolested.
sub srcdir {
    my($top) = @_; # relative name to top of build tree
    return Cwd::cwd() if $top eq "";
    my($depth) = scalar(split('/', $top)) + 1;
    my($cwd) = Cwd::cwd();
    my(@cwd_parts) = split('/', $cwd);
    die "top=$top, cwd=$cwd" unless $depth <= @cwd_parts;
    splice(@cwd_parts,-$depth,1);
    push @debug, $top, $depth, $cwd;
    return join('/', @cwd_parts);
}

# Parse command-line
my($command, $file, $top);
for my $arg (@ARGV) {
    if ($arg =~ /^command=(.*)/) {
        # Compiler command as a string shell single-quoted string
        $command = $1;
    } elsif ($arg =~ /^file=(.*)/) {
        # Source file name
        $file = $1;
    } elsif ($arg =~ /^top=(.*)/) {
        # Relative path to top of source tree. If not specified then we assume that it's not needed.
	$top = $1;
    } else {
        die "incorrect usage";
    }
}
die "no compile command" if $command eq "";
die "no input file" if $file eq "";
my(@command) = replace($top, split_into_words($command));


print "{",
    "\"directory\":\"", json_escape(Cwd::cwd()), "\",",
    "\"arguments\":[", join(",", map {"\"".json_escape($_)."\""} @command), "],",
    "\"file\":\"", json_escape(srcdir($top) ."/". $file), "\"";
print ",\"debug\":[", join(",", map {"\"".json_escape($_)."\""} @debug), "]" if @debug;
print "}";
