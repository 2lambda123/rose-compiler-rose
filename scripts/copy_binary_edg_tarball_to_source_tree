#!/bin/sh -xv
set -e
if test "x$SVN" = "x"; then SVN=svn; fi
if test $# -ne 2; then
  echo "Usage: $0 rose-repository-url-or-top_srcdir build-triplet" >&2
  exit 1
fi
if test -f rose_binary_compatibility_signature; then
  :
else
  echo "Error: this code should be run in the directory with rose_binary_compatibility_signature" >&2
  exit 1
fi
roseRepositoryUrl="$1"
buildTriplet="$2"
signature=`cat rose_binary_compatibility_signature`
binaryEdgTarball="roseBinaryEDG-${buildTriplet}-${signature}.tar.gz"
if test -f ${binaryEdgTarball}; then
  :
else
  echo "Error: this code should be run in the directory with the EDG tarball ${binaryEdgTarball}" >&2
  exit 1
fi
checkoutDir=tempCheckout_CxxFrontend_`hostname`_$$
${SVN} checkout -N ${roseRepositoryUrl}/src/frontend/CxxFrontend ${checkoutDir} # FIXME Not secure
${SVN} ls ${checkoutDir} | grep -x 'roseBinaryEDG-.*-.*\.tar\.gz' | grep -vx 'roseBinaryEDG-.*-'${signature}'\.tar\.gz' | while read oldBinary; do ${SVN} rm ${checkoutDir}/${oldBinary}; done
cp ${binaryEdgTarball} ${checkoutDir}/${binaryEdgTarball}
${SVN} add ${checkoutDir}/${binaryEdgTarball}
${SVN} status ${checkoutDir}
${SVN} commit -m"Automatic updates of binary EDG tarballs (adding or updating ${binaryEdgTarball}, and removing obsolete versions) for platform ${buildTriplet} and signature ${signature}" ${checkoutDir}
rm -rf ${checkoutDir}
