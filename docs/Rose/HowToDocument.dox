// -*- c++ -*-

/** @page how_to_document Documenting the ROSE source code
 *
 *  How to document ROSE library source code.
 *
 *  This chapter is mainly for developers working on the ROSE library as opposed to users developing software that uses the
 *  library. It specifies how we would like to have the ROSE library source code documented. The style enumerated here does not
 *  necessarily need to be used for projects, tests, the tutorial, user-code, etc.  Each item is also presented along with our
 *  motivation for doing it this way.
 *
 *  @todo The doxygen style guide has not been reviewed by rose-core yet. [Robb P. Matzke 2015-05-15]
 *
 *  @section doxygen Doxygen
 *
 *  ROSE uses Doxygen for two broad categories of documentation:
 *
 *  + For documenting the ROSE API. Doxygen is able to generate the structure of the documentation, and authors fill in the
 *    descriptions.
 *
 *  + For documenting non-API things that are nonetheless tied to a particular version of ROSE.  An example is this page
 *    itself, which might change over time as ROSE evolves and which must go through ROSE's continuous integration testing
 *    and/or release testing.
 *
 *  @subsection doxy_general General doxygen style
 *
 *  Both categories of documentation are written as comments in C source code and follow the same style conventions.
 *
 *  + <b>Comment style:</b> Whether to use block- or line-style comments is up to the author. However, authors are encouraged
 *    to use block style comments for doxygen documentation and line-style comments for non-doxygen documentation so that IDEs
 *    can easily highlight them differently. Furthermore, a vertical line of "*" down the left side of block comments has two
 *    useful benefits: it helps those developers that don't use syntax-highlighting IDEs to realize that lines are part of a
 *    comment, and it provides a hint that lines matched by @p grep style searching are comments rather than code. Both become
 *    more important as the size of the block comment grows, especially if it contains lines that might look like code.
 *
 *  + <b>Use javadoc style:</b> Javadoc style uses the at-sign ("@") rather than the backslash ("\") to introduce doxygen
 *    key words. The backslash style comes from the much less common Qt documentation system. IDEs tend to have fewer problems
 *    recognizing the javadoc style due to its popularity and the fact that "@" is relatively uncommon in C++ code.  Similarly,
 *    the presence of "!" to mark the start of a doxygen comment is a Qt-ism, so avoid it for similar reasons.
 *
 *  + <b>Explicit references:</b> Although doxygen will automatically create cross references to any word that has strange
 *    capitalization or underscores, using an explicit @c @@ref will cause doxygen to emit an error if the referent's
 *    name changes and breaks the link.  Our goal is to eventually fix all doxygen warnings so that new warnings are easy to
 *    spot.
 *
 *  + <b>Capitalization:</b> Use the Wikipedia style of capitalization for pages, sections, and subsections. Namely, the first
 *    word is capitalized and all other words except proper names and abbreviations are lower-case.
 *
 *  + <b>"ROSE":</b> The name of this project is "ROSE", not "Rose" and not "rose".  However, within the documentation
 *    itself it's seldom necessary to mention ROSE by name.
 *
 *  @subsection doxy_nonapi Doxygen documentation for non-API entities
 *
 *  As mentioned, one of ROSE's uses of doxygen is for documentation not related to any specific API element (such as this page
 *  itself).  Such documentation is generally organized into doxygen "pages" and "modules". The main differences are that pages
 *  will show up in a non-hierarchical "Related pages" list in the browser, while modules can be nested and show up under a
 *  "Modules" tab.  Each Doxygen "page" should be treated like a chapter in a book with sections and subsections and each
 *  Doxygen "page" will show up as a single HTML document with internal sections and subsections.  Modules, on the other hand,
 *  can be small and hierarchical and each module will become a single HTML document with a graph showing the relationships
 *  between modules.  Pages are good for documenting large, important things; modules are good for documenting small,
 *  interrelated things.
 *
 *  Regardless of whether one chooses to write a page or a module, the documentation needs to be placed in a C++ source
 *  file. These files should have the extension ".dox" (".docs" is acceptible too, but avoid ".doc" and ".docx") and the
 *  documentation should be written as a block comment.  IDEs can be told that these files are actually C++ code, so you'll get
 *  whatever fancy comment-handling features your IDE normally provides. For example, Emacs excels at formatting C++ block
 *  comments and can reflow paragraphs, add the vertical line of stars, spell check, highlight Doxygen tags, etc.
 *
 *  These ".dox" files can live anywhere in the ROSE source tree, but we prefer that they're somewhere under the top-level
 *  "docs" directory along with all the non-doxygen documentation.  Once you've added the new file, you should edit
 *  "docs/Rose/rose.cfg.in", find the @c INPUT variable, and add your new file to the list.  For Doxygen "pages", the position
 *  in the list determines the order of that page relative to other pages. Doxygen might still find your file if you fail to
 *  list it in the @c INPUT variable, but it will be sorted more or less alphabetically.
 *
 *  All Doxygen page source begins with the @c @@page directive whose first argument is a unique symbol by which the page can
 *  be referenced from elsewhere.  The remainder of the line is the page title capitalized as described above.  On the other
 *  hand, each Doxygen module source begins with the @c @@defgroup directive which also has a unique identifier argument
 *  followed by a title.  In order to nest one module in another, use the @c @@ingroup directive followed by the identifier for
 *  the containing group.  Both pages and modules should have a single-line brief statement which terminates at the first
 *  punctuation. There is no need to use the @c @@brief directive because ROSE configures doxygen to do auto-briefing.
 *
 *  @subsection doxy_api Doxygen documentation for API entities
 *
 *  The original purpose of doxygen is to document the files, name spaces, classes, functions, and other types that compose an
 *  API. Doxygen automatically generates the structure and the API author fills in those things that cannot be done
 *  automatically, which is the majority of the text.
 *
 *  + <b>Co-location:</b> The doxygen comment should be near the thing it documents.  Some people claim this unnecessarily
 *    clutters the header file and that the comment should be in a separate file, but the counter argument is that by having
 *    documentation near the declaration it is more likely to be updated if the declaration changes.  Also, the cluttering-up
 *    claim is made moot by any reasonably capable IDE, especially if we use block comments for doxygen and line comments for
 *    non-doxygen.
 *
 *  + <b>Auto brief:</b> The doxygen configuration is set up so that the first sentence of documentation gets used as the @c
 *    @@brief value without having to specify @c @@brief. Therefore the first line should be a very short summary that will
 *    appear, among other places, in the right-hand column of an index, such as the index of class members. It can help to
 *    insert a blank line between the brief and the rest of the description to help remind authors of this feature, but that's
 *    entirely optional. The brief line is the absolute minimum documentation; most entities should also have a description.
 *
 *  + <b>Public API:</b> All public and protected parts of the API must be documented. Documentation is as important as
 *    implementation; even so-called "self documenting" practices need additional human-written descriptions to make them
 *    useful to users that might not be familiar with a certain technique or algorithm.  If some entity is not documented then
 *    it is not worthy of being a member of the API!  Eventually we will disable the switches that allow doxygen to generate
 *    stub documentation for non-documented parts of the API.
 *
 *  + <b>Private interfaces:</b> Using doxygen to document private parts of the library is optional, but that documentation
 *    will not appear in our published documents by default (it isn't useful to users that are using the API). There is a
 *    configuration switch that enables generation of the private documentation in the HTML output to make the output more
 *    complete for ROSE developers that install local copies.
 *
 *  + <b>Description:</b> All API entities should have a clear description, including an example if the entity is
 *    sufficiently complex or could be tricky to use.  It is not necessary to start the documentation with "This function",
 *    "This class", etc. since that information is provided by doxygen. Type information is also not necessary except when it
 *    makes the description clearer.  For instance, for the auto-brief statement, instead of writing "This function returns a
 *    list of strings by splitting the input string at semicolons", write "Returns substrings by splitting the input string at
 *    semicolons."  If necessary, the main body of the documentation can be more verbose.
 *
 *  + <b>%Function parameters:</b> %Function parameters need to be documented when their type and/or name is not
 *    sufficient. They can be documented in list format or as part of the function's description.  Use the @c @@p formatting
 *    tag when referring to a parameter.  It may work best to document related parameters in a descriptive paragraph than
 *    listing each one separately.
 *
 *  + <b>To-do lists:</b> If you need to mark documentation that should be fixed, use the @c @@todo tag and include a
 *    description of what needs to be fixed. Also include @em your name (i.e., the person who thinks there's a
 *    problem) and the date.
 *
 *  + <b>Proofread:</b> Proofread your documentation in a web browser after doxygen runs.  One common error is for doxygen to
 *    make a link to a capitalized word (like Function, at least as this is being written) that happens to also be an entity in
 *    the API. Prefix such words with a percent sign when the link is unintended.  Likewise, authors should try to avoid class
 *    and namespace names that are also common words in order to prevent Doxygen from suddenly making those words links
 *    throughout all documentation.
 *
 *  @subsection doxy_directives Doxygen directives
 *
 *  <!-- Note to developers: This section is easier to read in the HTML output because the source version contains
 *       extra escapes in order to quote the Doxygen, HTML, and Markdown directives. BTW, this note itself is an example of
 *       writing a comment inside a doxygen comment using the HTML syntax. -->
 *
 *  Doxygen understands a subset of [HTML](http://www.stack.nl/~dimitri/doxygen/manual/htmlcmds.html), its own
 *  [Javadoc-like directives](http://www.stack.nl/~dimitri/doxygen/manual/commands.html), and
 *  [Markdown](http://www.stack.nl/~dimitri/doxygen/manual/markdown.html).  The most useful are:
 *
 *  + Sections and subsections are introduced by @c @@section or @c @@subsection followed by a unique identifier followed by
 *    the name of the section using Title capitalization described above.
 *
 *  + Function parameter names are indicated with @c @@p followed by the parameter name. This typesets them in a consistent
 *    style.
 *
 *  + References to other symbols, pages, and modules  are indicated with @c @@ref followed by the name or ID.  The lookup
 *    for symbols is similar to how the C++ compiler would look up the name, so you might need to qualify it with some
 *    namespace or even place the comment inside a namespace. If you don't want the qualified name cluttering the final HTML,
 *    follow the qualified name with a shorter name in double quotes (e.g., <code>@@ref
 *    InstructionSemantics2::BaseSemantics::RiscOperators "RiscOperators"</code>).
 *
 *  + Code snippets are indicated by preceding the word with @c @@c. If more than one word or if it contains special
 *    characters, use HTML @c \<code> and @c \<endcode> tags instead.
 *  
 *  + To include an entire example source file into the documentation, use the @c @@includelineno directive, which takes the
 *    name of the file to include. No path is necessary, but the file must live in a directory known to Doxygen, such as the
 *    "tutorial" directory. (see ROSE's doxygen configuration file).
 *
 *  + To include a few lines from an example source file, use the @c @@snippet mechanism.  This mechanism is easier to use than
 *    the older method of trying to match certain patterns of code.  The @c @@snippet directive takes two arguments: the name
 *    of an example source file, and the name of a snippet. The beginning and end of the snippet is marked in the source file
 *    using doxygen comments of the form <code>//! [snippet name goes in here]</code>.  Snippet names can include space
 *    characters.
 *
 *  * To document a namespace, class, function, variable, etc., place the documentation immediately prior to the declaration
 *    and use a block style comment that starts with two asterisks: <code>/\*\*</code>.  Alternatively, for variables and
 *    enum constants it's sometimes more convenient to put the documenting comment *after* the declaration, in which case the
 *    comment should start with <code>/\*\*\<</code>.
 *
 *  @subsection doxy_next Next steps
 *
 *  Doxygen, as one would expect from a documentation generator, is well documented at its
 *  [website](https://doxygen.org). There are also a
 *  [number](http://www.digilife.be/quickreferences/QRC/Doxygen%20Quick%20Reference.pdf)
 *  [of](http://www.sztaki.hu/%7Eszcsaba/software/DoxygenQuickReference-2.pdf)
 *  [quick](http://www.cs.uwm.edu/~cs536/cs536-2/library/Doxygen%20Quick%20Reference.htm)
 *  [references](http://www.yolinux.com/TUTORIALS/LinuxTutorialC++CodingStyle.html#DOXYGEN)
 *  available.
 */
