\chapter{Getting Started}

\label{gettingStarted:gettingStarted}

% \section{Building ROSE}

%  Purpose:
% \begin{itemize}
%    \item A. What you need to get started
%    \item B. Preparing the working copy
% \end{itemize}
% \begin{center}
% *********************  \newline
% \end{center}
% \vspace{0.25in}

   This chapter details how to build ROSE and how to begin to use ROSE to build a 
source-to-source translator.
ROSE uses EDG and SAGE III internally. EDG is a commercial (and proprietary) C++
frontend that we are permitted to use to support our research work. SAGE III is
loosely derived from SAGE II, which is derived from SAGE++.  SAGE III is a rewrite of 
SAGE II and uses a similar object-oriented design and a similar interface (API).
% We have made substantial changes in the development of Sage III, 
The developers of SAGE II suggested that we call our work on the C++
intermediate representation Sage III. We are thankful to the developers
of SAGE II for their work.
% It contains the software and hardware requirements of ROSE.
% Additionally, it details the installation of the software.

\section{ROSE Documentation and Where to Find It}

To simplify user access to the ROSE documentation, the pre-built postscript files are 
included in the {\tt ROSE/docs/Rose} directory of each ROSE distribution. These versions
are always kept up-to-date by the automated build system that generates
ROSE distributions:
% Documentation there is:
\begin{itemize}
   \item ROSE/docs/Rose/ROSE-\VersionNumber-UserManual.ps.gz \\
       This is the ROSE User Manual which explains basic concepts about ROSE.
   \item ROSE/docs/Rose/Tutorial/ROSE-\VersionNumber-Tutorial.tar.gz \\
       This is the ROSE Tutorial with numerous examples of how to use ROSE.
   \item ROSE/docs/Rose/ROSE-\VersionNumber-HTML-Docs.ps.gz \\
       These are the ROSE Web pages They contain links to all ROSE documentation,
       plus ROSE related research papers, and related Web sites, etc.
   \item ROSE Web Page \\
       The ROSE Web pages are at
           \htmladdnormallink{www.rosecompiler.org}{www.rosecompiler.org}.
   \item ROSE/ROSE\_RESEARCH\_PAPERS.tar.gz \\
       These are the current ROSE related research papers.
\end{itemize}

   There are three forms of ROSE documentation, and a ROSE Web site and email list:
\begin{enumerate}
     \item ROSE User Manual \\
           The User Manual presents how to get started with ROSE and documents 
           features of the ROSE infrastructure.  The User Manual is found in 
           {\tt ROSE/docs/Rose} directory, or at the following web pages: \\
           \htmladdnormallink{ROSE User Manual (postscript version, relative link)}{http://www.rosecompiler.org/ROSE_UserManual/ROSE-@VERSION@-UserManual.ps}
           or \\
           \htmladdnormallink{ROSE User Manual (HTML version, relative link)}{http://www.rosecompiler.org/ROSE_UserManual/manual.html}
     \item ROSE Tutorial \\
           The ROSE Tutorial presents examples of how to use ROSE (found
           in the {\tt ROSE/tutorial} directory).  The ROSE Tutorial documentation is found in 
           {\tt ROSE/docs/Rose/Tutorial} directory and the tutorial documentation is
           constructed using the following steps:
           \begin{enumerate}
              \item Actual source code for each example translator in the ROSE/tutorial
                    directory is included. % into the tutorial documentation
              \item Each example is compiled.
              \item Inputs to the examples are taken from the ROSE/tutorial directory.
              \item Output generated from running each example is placed into the tutorial
                    documentation.
           \end{enumerate}
           Thus, the {\tt ROSE/tutorial} contains exact examples, and each
           example may be manipulated (changing either the example translators or the
           inputs to the examples).  The ROSE Tutorial can also be found at (link back 
           to LaTeX document): \\
           \htmladdnormallink{ROSE Tutorial (postscript version, relative link)}{http://www.rosecompiler.org/ROSE_Tutorial/ROSE-@VERSION@-Tutorial.ps}
           or \\
           \htmladdnormallink{ROSE Tutorial (html version, relative link)}{http://www.rosecompiler.org/ROSE_Tutorial/tutorial.html}
     \item ROSE HTML Reference: Intermediate Representation (IR) documentation \\
           This Web documentation gives the detail interfaces for each IR nodes
           (documentation generated by Doxygen).
           The HTML IR documentation is found in ROSE/docs/Rose directory 
           (available as HTML only): \\
           \htmladdnormallink{ROSE HTML Reference (relative
               link)}{http://www.rosecompiler.org/ROSE_HTML_Reference/index.html}
     \item ROSE Web Site \\
           The ROSE project maintains a Web site where this documentation and some
           additional information (including the ROSE software distribution:
           {\em starting late Summer 2006}) is available at
           \htmladdnormallink{ROSE Web Site
             (www.rosecompiler.org)}{http://www.rosecompiler.org}
     \item ROSE Email List \\
           The ROSE project maintains a mailing list (casc-rose *at* llnl *dot* gov).
           The email list is only used to request help and announce internal and external releases.
           Anyone who would like to be on the email list can send an email to {\em dquinlan *at* llnl *dot* gov}.
           Those with LLNL internal access may check who is on the email list at:
           \htmladdnormallink{ROSE Email List (current subscribers, LLNL internal URL link:
                cmg-r.llnl.gov/casc/computing/mailing\_lists/casc-rose.html)}
                {http://cmg-r.llnl.gov/casc/computing/mailing_lists/casc-rose.html}.
           At some point the email list will be made more generally open to automated substription.
\end{enumerate}


\section{Requirements and Options}
\label{Requirements_Installation_Testing}
   ROSE is general software and we ultimately hope to remove any specific software
and hardware requirements.  However, our goal is to be specific about where and 
how ROSE is developed and where it is regularly tested.
% ROSE has been developed initially on the Sun workstations and later on Linux.
% Since ROSE is written in C++, it requires a C++ compiler. Some optional features
% within ROSE have some additional software requirements.

\subsection{Required Hardware/Operating System}
   ROSE has been developed on Linux/Intel platforms. We have not yet 
addressed significant portability issues for ROSE. But EDG has addressed
portability issues for their C++ frontend and it is available on nearly all
platforms (see {\tt www.EDG.com} for details).  ROSE is currently developed on
Linux/Intel platforms and works with all modern versions of the GNU compilers 
(3.3.x, and later). ROSE will also works on both 32-bit and 64-bit architectures.
ROSE also works with the Intel C and C++ compiler.
Future work will focus on portability to other platforms important to users.
% At a later point we will address portability of ROSE onto other platforms:
% mostly likely IBM AIX will be next (at some point).

\subsection{Software Requirements}
   You will require {\bf ONLY} a C++ compiler to compile ROSE; ROSE is written in C++.
% We use the GNU g++ compiler most often, but the Intel compiler (version 9.1) will also work.
Present development work is done on Intel/Linux platforms
using the GNU g++ 3.3.x, 3.4.x, and 4.x; and the Intel compilers.  GNU compilers older
than 3.3.x are not supported within the ROSE project, but in some cases they might work 
(g++ 3.2.x is likely to work, but g++ 2.96 will not work).

   We suggest that ROSE users obtain a free research license from EDG until we 
regularly distribute binary versions of the libedg.so library (their software).
Email us for details on our distributions of ROSE that contain a binary version
of the EDG work (and that completely hide the EDG interface). These are limited
to specific platforms and versions of compilers. See EDG (www.edg.com) for details 
and limitations on how their software may be used.

{\bf Use of Optional Software:} \\
   ROSE does not presently require any special software, but more
functionality is possible if you have additional (freely available) software:
\begin{itemize}
   \item Doxygen \\
          Most ROSE documentation is generated using LaTex and Doxygen, thus
          Doxygen is required for ROSE developers that want to regenerate the ROSE
          documentation. This is not required for ROSE users, since all documentation is 
          included in the ROSE distribution. Visit {\it www.doxygen.org} for details and to
          download software.  There are no ROSE-specific configure options to use Doxygen;
          it must only be available within your path.
   \item LaTeX \\
          LaTeX is used for a significant portion of the ROSE documentation. LaTex is 
          included on most Unix systems. There are no ROSE specific configure options 
          to use LaTeX; it must only be available within your path.
   \item DOT (GraphViz) \\
          ROSE uses DOT for generating graphs of ASTs, Control Flow, etc.
          DOT is also used internally by Doxygen.
          Visit {\it www.graphviz.org} for details and to download software.
          An example showing the use of the DOT to build graphs is in the ROSE Tutorial.
          There are no ROSE-specific configure options to use dot; it must only be 
          available within your path.
   \item SQLite \\
          ROSE users can store persistent data across separate compilation of files by
          storing information in an SQLite database.  This is used by several features
          in ROSE (call-graph generation, for example) and may be used directly by the
          user for storage of user-defined analysis data.  Such database support is
          one way to handle global analysis (the other way is to build the whole
          application AST). Visit {\it www.sqlite.com} for details and to download
          software. Details are in section \ref{gettingStarted:Database}.
          An example showing the use of the ROSE database mechanism is in the ROSE
          Tutorial. Use of SQLite requires special ROSE configuration options (so that
          the SQLite library can be added to the link line at compile time).  See ROSE
          configuration options for more details ({\tt configure --help}).
\end{itemize}

% \subsection{Installation and Testing }

\section{How to Build ROSE}

   This section addresses the building and installation of ROSE.  
% We provide a summary \ref{gettingStarted:SummaryInstructions} so that you can get an
% immediate idea as to how to build ROSE.
There are two versions of ROSE supported: the 
{\it Distribution Version} for users (typical) and the {\it Development Version}
(intended only for ROSE development team), which is what is found in the ROSE software
repository and has additional software requirements (autoconf, automake, Doxygen, LaTeX,
etc.).  The exact requirements are listed in the {\tt ROSE/ChangeLog} (including version 
numbers for each release of ROSE).
\begin{itemize}
   \item {\bf Distribution Version} \\
         Provided as a tared and compressed file in the form,
         ROSE-\VersionNumber.tar.gz.  This is the most typical way that users will
         see and work with ROSE.  Instructions are also located in the ROSE/README file.

   \item {\bf Development Version} \\
         Only available directly from the CVS repository. The details of building this
         version are located in the Appendix \ref{appendix:InstructionsToRoseDevelopers}.
\end{itemize}
To simplify the descriptions of the build process, we define:
\begin{itemize} 
   \item {\bf Source Tree} \\
         Location of source code directory (there is only one source tree).
   \item {\bf Compile Tree} \\
         Location of compiled object code and executables. There can be many compile trees
         representing either different: configure options, compilers used to build ROSE
         and ROSE translators, compilers specified as backends for ROSE (to compile ROSE
         generated code), or architectures.
\end{itemize}
We {\em strongly} recommend that the {\bf Source Tree} and the {\bf Compile Tree} be
different. This avoids many potential problems with the {\em make clean} rules.
Note that the {\bf Compile Tree} will be the same as the {\bf Source Tree}
if the user has {\em not} explicitly generated a separate directory in which to
run {\em configure} and compile ROSE. If the {\bf Source Tree} and {\bf Compile Tree} 
are the same, then there is only one combined {\bf Source/Compile Tree}.
Alternatively, numerous different {\bf Compile Trees} can be used from 
a single {\bf Source Tree}.  More than one {\bf Compile Tree} allows
ROSE to be generated on different platforms from a single source 
(either a generated distribution or checked out from CVS).  ROSE is developed 
and tested internally using separate {\bf Compile Trees}.

\commentout{
\subsection{Summary of Build Process}
\label{gettingStarted:SummaryInstructions}
   More specific information is available in the subsections below 
(subsection \ref{gettingStarted:UserInstructions} and 
subsection \ref{gettingStarted:DeveloperInstructions}), but in summary the steps are:
% The general steps are (but use the more details instructions below, depending 
% on the version of ROSE that you have):
\begin{itemize}
   \item Type {\tt \<Source Tree\>/configure;} \\
         This can be done in a separate directory or in the source directory.
         We suggest using a separate directory, but either will work. The 
         {\bf Source Tree} may be specified with either an absolute or relative 
         path.
   \item type {\tt make} \\ to build the source code (you may also use the parallel make
         option (e.g. {\tt make -j4} to run make using 4 processes).
   \item Type {\tt make check} \\ to run internal tests to test your build.
   \item Type {\tt make install} \\ to install the build library for more convenient use.
         (default is {\tt /usr/local}, use {\tt --prefix=`pwd'} to specify the current directory).
   \item Type {\tt make documentation} \\ to build both html and LaTeX documentation.
\end{itemize}
}

\subsection{Building ROSE From a Distribution (ROSE-\VersionNumber.tar.gz)}
\label{gettingStarted:UserInstructions}
   The process for building ROSE from a ROSE {\em Distribution Version} the same as for
    most standard software distributions (e.g those using autoconf toos):
\begin{enumerate}
     \item Untar ROSE. \\
           Type {\tt tar -zxf ROSE-\VersionNumber.tar.gz} to untar the ROSE distribution.
     \item Build a separate compile tree. \\
           Type {\tt mkdir compileTree} to build a location for the object files and
           documentation (use any name you like for this directory).
     \item Change directory to the new compile tree directory. \\
           Type {\tt cd compileTree; }. This changes the current directory to the newly
           created directory.
     \item Run the {\tt configure} script. \\
           Type {\tt \{AbsoluteOrRelativePath\}/configure --prefix=`pwd`} 
           to run the ROSE {\tt configure} script.  The path to the configure script 
           may be either relative or absolute. The prefix option on the configure 
           command line is only required if you run {\tt make install} (suggested), because 
           the default location for installation is {\tt \/usr\/local} and most users don't
           have permission to write to that directory. This is common to all projects that
           use autoconf.  ROSE follows the GNU Makefile Standards as a result of using
           autoconf and automake tools for its build system. As of ROSE-0.8.9a, the
           default setting for the install directory (prefix) is the build tree.
           For more on ROSE configure options, see section \ref{gettingStarted:configureOptions}.
     \item Run {\tt make}. \\
           Type {\tt make} to build all the source files. See details of running 
           {\tt make} in parallel in section \ref{gettingStarted:parallelMake}.
     \item To test ROSE (optional). \\
           Type {\tt make check} to test the ROSE library against a collection of test codes.
           See details of running make in parallel \ref{gettingStarted:parallelMake}.
     \item To install ROSE, type {\tt make install}. \\
           Installation is optional, but suggested. Users can simplify their use of ROSE 
           by using it from an installed version of ROSE.  This permits compilation 
           using a single include directory and the specification of only two libraries.
           See details of installing ROSE in section \ref{gettingStarted:installation}.
     \item Testing the installation of ROSE (optional). \\
           To test the installation and the location where ROSE is installed, against a
           collection of test codes (the application examples in {\tt ROSE/tutorial}), 
           type {\tt make installcheck}.
         % To optionally test the installation of ROSE \\
         % Type {\tt make installcheck} to test the location where ROSE is installed
         % against a simple test code. 
           A sample {\tt makefile} is generated; see section \ref{gettingStarted:compilingTranslator}.
\end{enumerate}

\subsection{ROSE Configure Options}
\label{gettingStarted:configureOptions}
     A few example configure options are:
\begin{itemize}
   \item {\tt ../ROSE/configure } \\
         This will configure ROSE to be compiled in the current directory (separate from
         the {\bf Source Tree}).  The installation (from {\tt make install}) will be placed in
         {\tt /usr/local}.  Most users don't have permission to write to this directory,
         so we suggest always including the {\em prefix option} (e.g. {\tt --prefix=`pwd`}).
   \item {\tt ../ROSE/configure --prefix=`pwd` } \\
         Configure in the current directory so that installation will also happen in the
         current  directory (a {\tt install} subdirectory will be built).
   \item {\tt ../ROSE/configure --with-CXX\_DEBUG=-g --with-C\_DEBUG=-g 
              --with-CXX\_WARNINGS=-Wall --prefix=`pwd`} \\
         Configure as above, but with debugging and warnings turned on ({\tt -Wall} is
         specific to the gnu compilers).
   \item {\tt ../ROSE/configure --with-SQLite=/home/dquinlan/SQLite/sqliteCompileTree --prefix=`pwd`} \\
         Configure as above, but permit use of SQLite database for storage of analysis
         results between compilation of separate files (one type of support in ROSE for
         global analysis).
   \item Additional Examples \\ 
         More detailed documentation on configure options can be found by typing 
         {\tt configure --help}, or see figure
         \ref{gettingStarted:configureHelpOptionOutputPart1} for complete
         listing.
\end{itemize}

\fixme{It is suggested by TID that we move the figures to this location.
       Checkout if this is possible.}

Output of {\tt configure --help} is detailed in figures 
\ref{gettingStarted:configureHelpOptionOutputPart1} (Part 1) and
\ref{gettingStarted:configureHelpOptionOutputPart2} (Part 2):
{\indent
{\mySmallestFontSize
% Do this when processing latex to generate non-html (not using latex2html)
\begin{latexonly}
\begin{figure}[tb]
\begin{center}
\begin{tabular}{|c|} \hline
     {\tt configure --help} Option Output (Part 1)
\\\hline\hline
   \lstinputlisting{roseConfigureOptions.aa}
\\\hline
\end{tabular}
\end{center}
\caption{ Example output from configure --help in {\tt ROSE} directory (Part 1). }
\end{figure}
\end{latexonly}

% Do this when processing latex to build html (using latex2html)
\begin{htmlonly}
   \verbatiminput{roseConfigureOptions.aa}
   \vspace{0.5in}
   Example output from configure --help in {\tt ROSE} directory (Part 1).
\end{htmlonly}
\label{gettingStarted:configureHelpOptionOutputPart1}
%end of scope in font size
}
% End of scope in indentation
}

% Output of {\tt configure --help} (Part 2):
{\indent
{\mySmallestFontSize
% Do this when processing latex to generate non-html (not using latex2html)
\begin{latexonly}
\begin{figure}[tb]
\begin{center}
\begin{tabular}{|c|} \hline
     {\tt configure --help} Option Output (Part 2)
\\\hline\hline
   \lstinputlisting{roseConfigureOptions.ab}
\\\hline
\end{tabular}
\end{center}
\caption{ Example output from configure --help in {\tt ROSE} directory (Part 2). }
\end{figure}
\end{latexonly}

% Do this when processing latex to build html (using latex2html)
\begin{htmlonly}
   \verbatiminput{roseConfigureOptions.ab}
   \vspace{0.5in}
   Example output from configure --help in {\tt ROSE} directory (Part 2).
\end{htmlonly}
\label{gettingStarted:configureHelpOptionOutputPart2}
%end of scope in font size
}
% End of scope in indentation
}


\subsection{Running {\em GNU Make} in Parallel}
\label{gettingStarted:parallelMake}
     ROSE uses general {\tt Makefiles} and is not dependent on {\em GNU Make}.
     However, {\em GNU Make} has an option to permit compilation in parallel and 
     we support this. Thus you may use {\tt make} with the {\tt -j<n>} option if 
     you want to run {\tt make} in parallel (a good value for {\tt n} is typically 
     twice the number of processors in your computer).  We have paid special 
     attention to the design of the ROSE {\em makefiles} to permit parallel 
     {\tt make} to work; we also use it regularly within development work.

\subsection{Installing ROSE}
\label{gettingStarted:installation}
     Installation (using {\tt make install}) is optional, but suggested. Users can
simplify their use of ROSE by using it from an installed version of ROSE.  This permits
compilation using a single include directory and the specification of only two libraries, 
as in:
% {\footnotesize
\begin{verbatim}
     g++ -I{\em\<install dir\>/include} -o executable executable.C -L{\em\<install dir\>/lib} -lrose -ledg -lm -lfl -lrt
\end{verbatim}
% }
See the example makefile in \\
{\tt ROSE/exampleTranslators/documentedExamples/simpleTranslatorExamples/exampleMakefile} \\
in section \ref{gettingStarted:compilingTranslator}
for exact details of building a translator on your machine (setup by configure and tested
by {\tt make installcheck}).  Note that the tutorial example codes are also tested
by {\tt make installcheck} and the {\tt example\_makefile} there can also serve as
an example.

     {\bf autoconf} uses {\tt /usr/local} as the default location for all 
installations. Only {\em root} has write privileges to that directory, so you
will likely get an error if you have not overridden the default value with a new
location.  To change the location, you need to have used the 
{\tt --prefix=\{install\_dir\}} to run the {\tt configure} script.  You can 
rerun the {\tt configure} script without rebuilding ROSE.

\fixme{ROSE-0.8.9a now sets the default install path (prefix) to the build tree. The
    documentation does not yet really reflect this detail.  Also since the build process
    writes to the install directory we have to explain this in the documentation.}

\subsection{Testing ROSE}
     A set of test programs is available.  More details are in section \ref{testing}.
% written about this in later versions of the manual.  
Type {\tt make check} to run your build version of ROSE using these test codes.  
Several years of contributed bug reports and internal test codes have been accumulated 
in the {\tt ROSE/tests} directory.

\subsection{Getting Help}
     You may use the following mailing list to ask for help from the ROSE development 
team: {\it casc-rose *dot* llnl *dot* gov}.

\section{Building Translators Using ROSE}

   At this point you should have installed ROSE. For examples of ROSE translators
see the ROSE-\VersionNumber-Tutorial.tar.gz and the examples in the {\tt ROSE/tutorial} 
directory.

\section{Robustness of ROSE}
    A significant focus of the ROSE project is on the robustness of
the software supporting our project.  We have based the C and C++ support
upon the use of the EDG frontend (the same commercial quality frontend used by most
commercial C++ compilers). ROSE is a research project at a Department or Energy (DOE)
national laboratory.  As such, it must handle DOE laboratory applications that
scale to a million lines of code or more.  ROSE is not an academic research
project, nor is it a commercial product.  This section will layout what we do to test 
ROSE, what parts we consider to be {\em robust}, and exactly what we mean by 
{\em robust}.

\subsection{How We Test ROSE}

\subsubsection{ROSE Regression Tests}
   Our regression test of collected bugs reported over several years
helps prevent the reintroduction of old bugs during the development process.
Additional test codes and applications codes help provide more complete
testing of ROSE.

\subsubsection{Elsa Regression Tests}
   Recent work has included the a separate regression test suit from the Elsa
project (an open source C++ parser project).  This is tested infrequently at
this point, but will be folded into standard ROSE regression tests in the future.
We wish to thanks Scott McPeak for the use of his rather large collection of
tests that he uses within Elsa (about 1000 test codes that test many corners of
the C, C99, and C++ language).

\subsubsection{Application Codes}
   ROSE will be released after tests are complete on approximately 10 separate 
one-million-line application codes:
\begin{enumerate}
   \item KULL \\
          This is an important application at LLNL.
   \item ALE3D \\
          This is an important application at LLNL.
   \item ARES \\
          This is an important application at LLNL.
   \item CHOMBO \\
          This is an Adaptive Mesh Refinement (AMR) library at Lawrence Berkeley National Laboratory.
   \item DiffPack \\
          This is a numerical library originally developed at University of Oslo, Norway.
          The developers have been substantial collaborators to the ROSE project.
   \item ROSE \\
          The compilation of compiler project (ROSE) with itself is a milestone 
          for any compiler project.  ROSE can be used to compile the ROSE source
          code and has provided a good test of the internal compiler robustness.
   \item Overture \\
          This is an internal DOE library that supports Overset Grid applications.
          It is well in excess of one million lines of code. It includes 
          the A++/P++ library and other libraries upon which it depends.
   \item CHROMA \\
          This is an Molecular Dynamics application developed at University of Illinois at
    Urbana-Champaign (UIUC). This is not really a one million line code, I think, but 
    Overture more than makes up the difference.
\end{enumerate}

The first six are mostly done, in the sense that there are about 10 bugs
that have been isolated which appear to be the only remaining
problems.  I am working on these bugs, but some are non-trivial (read {\em hard}).

\subsubsection{Plum Hall C and C++ Compiler Test Suite}
   This is a commercial C and C++ compiler test suit that was purchased
for us by the DOE Advanced Simulation and Computing (ASC) program.  We appreciate their 
substantial support of ROSE. They also fund part of the ROSE project, but these
test codes are REALLY hard.

\fixme{What does the TID reference to "em-dash" mean.}

\subsection{What Parts of ROSE Are Robust}
    We consider the compiler construction issues -- IR, code generation, AST 
traversal support, and low level AST transformation mechanisms -- to be robust.  
These are the mechanisms that are dominantly tested by the regression suits 
and application codes.  Specifically, a ROSE translator is built that does no
transformation (e.g. {\em IdentityTransformation.C} in the ROSE Tutorial).
Input files are processed with this translator, and the following steps
are tested for each source file:
\begin{itemize}
   \item EDG's AST is built internally.
   \item ROSE's AST (the SAGE III AST) is built from the EDG AST.
   \item EDG's AST is deleted.
   \item ROSE's AST traversals are tested.
   \item ROSE's AST Attribute Mechanism is tested in each IR node.
   \item ROSE's AST internal tests are done (all tests must pass).
   \item ROSE's Code Generator is used to regenerate the source code.
   \item Vendor compiler compiles the ROSE-generated source code.
\end{itemize}

Note that separate tests to run the executables generated form the vendor compiler's
compilation of the ROSE generated sources are not automated.  This is not yet a
standard test in ROSE, just verified infrequently.

\subsection{What Parts of ROSE Are {\em Not} Robust}
    Basically, the program analysis lags in robustness. The robustness of the program analysis and 
optimization in ROSE has only recently become a focus.
This work is not yet as durable as the compiler construction aspects of ROSE.
The development of the ROSE infrastructure requires that we can first compile
and transform large scale applications before we address complex program analysis
and its robustness.

\section{Submitting a Bug Report}
     The rule is simple: the better quality the bug report, the higher priority it
gets.  All good bug reports include a very simple example that demonstrates
the bug, and only that bug, so that it is clearly reproducible.  We welcome your submission
of good quality bug reports.  You may also send email directly to 
{\it dquinlan *at* llnl *dot* gov}.  Any bug report you submit will be added as a test 
code and used to test future versions of ROSE (please add {\bf ROSE bug report} to the 
subject line).  At a later point we will use a more formal bug tracking mechanism.


\section{Getting a Version of the EDG License for Research Use}

ROSE uses the EDG (www.edg.com) C++ front-end to parse C++ code internally.
No part of the EDG source code is visible to the user or ROSE, but since
ROSE does not yet routinely package a separate binary, we provide the EDG
source code as part of the distribution of ROSE.  So at present we only
give out ROSE to people who also get a free research license for the EDG
source code (available from EDG).  

   We are particularly thankful to the EDG people for providing such a
good quality C++ front-end and for allowing it to be used for research work 
in C++.  They have permitted research work specific to the C++ language
to address the complexity of real application written in C++, which would not 
otherwise be practical or within the scope of a research project.

   To get a version of ROSE, we encourage you to contact EDG to obtain their research
license.  Instructions for getting an EDG license:

\begin{itemize}
     \item Send email to these three fellows at EDG:
     \begin{itemize}
          \item Steve Adamczyk       jsa@edg.com
          \item John Spicer          jhs@edg.com
          \item Daveed Vandevoorde   daveed@edg.com
     \end{itemize}
\end{itemize}

I suggest sending the email to all of them at the same time so that they can see that you have
sent email to the other two, since I really don't know which one is the correct person
to contact.  At some point we might get more information about a better approach.

The content of the email can be something like: \\
\begin{itemize}
   \item We would like to work with the ROSE project at Lawrence Livermore 
         National Laboratory (LLNL) which is using the EDG front-end for 
         research on C++ optimization. They have asked that we obtain a 
         research license in order to use ROSE for our research work with them.
\end{itemize}

They will then contact you (by email) and give you the location of the license form
to fill out and get signed.  They will either let you know where to
get the EDG software or suggest that you get our version of their code
directly from us.  We will then give you all of ROSE, which includes (at present)
the source code to the EDG front-end.  You will not need a version of EDG 
directly from them.













