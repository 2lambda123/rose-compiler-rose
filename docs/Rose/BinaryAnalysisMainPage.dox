// -*- c++ -*-

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The documentation in this file will appear on the main page generated by Doxygen (i.e., index.html). As such, it should describe
// the ROSE project in general, and contain things that are applicable across all parts of the ROSE project (the library, tools,
// examples, tests, etc.).  Documentation that's specific to the ROSE library should be attached to the ::Rose namespace.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @mainpage notitle
 *
 *  @note This documentation is intentionally incomplete. It will be extended and improved as we review and fix existing
 *  documentation.  Therefore, it is best to use this documentation in conjunction with the API documentation hosted at [Rose
 *  Compiler](http://rosecompiler.org).
 *
 *  @section mainpage_intro The ROSE library
 * 
 *  Developed at [Lawrence Livermore National Laboratory](https://llnl.gov) (LLNL), ROSE is an open source compiler infrastructure
 *  to build source-to-source program transformation and analysis tools for large-scale C (C89 and C98), C++ (C++98 and C++11), UPC,
 *  Fortran (77, 95, 2003), OpenMP, Java, Python, PHP, and Binary applications.  ROSE users range from experienced compiler
 *  researchers to library and tool developers who may have minimal compiler experience. ROSE is particularly well suited for
 *  building custom tools for static analysis, program optimization, arbitrary program transformation, domain-specific
 *  optimizations, complex loop optimizations, performance analysis, and cyber-security.
 *
 *  The ROSE system as a whole is spelled in all capital letters although it is not an acronym; the main @ref Rose "namespace" in
 *  the ROSE library is spelled "Rose" because ROSE naming conventions use PascalCase for namespaces; and command-line tools spell
 *  it as "rose" because ROSE uses kabob-case for command-lines.
 *
 *  @section mainpage_audience Audience
 *
 *  This documentation is intended for users who are writing ROSE-based tools with an emphasis on binary analysis. In particular
 *  this is not geared toward ROSE core developers who need to see more internal details.
 *
 *  Some goals of this documentation are:
 *
 *  @li To document all library entities that are used by users in a way that is useful to users. In other words, we strive to
 *  provide complete and correct documentation.
 *
 *  @li To exclude entities that are only used internally. Although such entities are useful to ROSE core developers, they are not
 *  useful to end users writing tools based on a pre-built, installed copy of the ROSE library and its tools.
 *
 *  @li To exclude entities that are not documented. All entities have names and we strive for names that clearly convey the
 *  entity's purpose. However, a name by itself, no matter how well chosen, does not provide complete documentation and can
 *  therefore be even less useful (as in easy to misuse or misconvey its meaning) than not being present at all. Also, not including
 *  undocumented entities encourages their authors to provide the user with more adequate documentation.
 *
 *  @li To exclude entities that do not yet follow ROSE's naming conventions. Such violations are confusing to users, they promote
 *  proliferation of these bad practices, and by omitting them from the user documentation we encourage authors to fix them.
 *
 *  @li To generated the consumable documentation formats (e.g., HTML) without any warnings or errors. It has been our experience in
 *  the past that if warnings and errors are tolerated, they accumulate until it's painful for even a conscientious author to
 *  maintain correct documentation.
 *
 *  @section mainpage_binaryanalysis Binary analysis
 *
 *  Although ROSE has historically emphasized source code analysis and source-to-source transformations, binary analysis has become
 *  an important part of the ROSE ecosystem.  Binary analysis is the process of ingesting low-level, non-human oriented code like
 *  machine code and byte code from executables, libraries, and memory dumps; parsing it and decoding its instructions; analyzing
 *  those instructions; and unparsing to more human-consumable formats like assembly listings.
 *
 *  All binary analysis in the ROSE library is located under the @ref Rose::BinaryAnalysis namespace, and that page should be your
 *  next stop in this journey.
 *
 *  @section mainpage_resources Other resources
 *
 *  ROSE comes with a number of binary analysis tools, some useful and some that intend to demonstrate a particular
 *  capability. Additional tools are available to collaborators and sponsors in separate, private repositories. All of these tools
 *  can be run with the "--help" command-line switch to show their manpage-style documentation, some of which is quite extensive.
 *
 *  The full ROSE API, including source code portions, can be found at [ROSECompiler.org](http://rosecompiler.org).
 *
 *  Source code and installation instructions are hosted at [GitHub](https://github.com/rose-compiler/rose) for external
 *  users. Internal developers should use the team's [internal GitLab](https://rosecompiler2.llnl.gov/gitlab) deployment.
 *
 *  @section mainpage_generation Documentation generation
 *
 *  This documentation was generated by [Doxygen](https://www.doxygen.nl) on the date shown on the bottom of this page for the ROSE
 *  version shown at the top of this page. You can generate a local copy of this documentation by running the
 *  `generate-api-documentation` found in the "scripts" directory at the top of the ROSE source code. You should use Doxygen version
 *  1.9 or later. The results are placed in the ROSE-User-Documentation directory.
 */
