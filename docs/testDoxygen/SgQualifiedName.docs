//////////////////////////////////////////////////////////////////////////
// Documentation for class SgQualifiedName
//////////////////////////////////////////////////////////////////////////

/*!
\class SgQualifiedName
\brief This class represents qualified names within the IR nodes.

   Qualified names appear as "X::Y" where "X" is the qualified name and
refers to a class or namespace (or global scope in the case of "::").
It is applied to names (SgInitializedName), expressions (SgFunctionCallExp),
and types (SgNamedType).  But since SgTypes are shared, we have to store
the name qualifer list (SgQualifiedNamePtrList) at the locations where the
types are referenced (instead of in the shared SgType IR nodes directly).
The only valid SgScopeStatement objects are:
   - SgGlobal
   - SgClassDefinition
   - SgTemplateInstantiationDefn
   - SgNamespaceDefinitionStatement
These are the scopes (except for SgFunctionDefinition) that have an associated name
(the less obvious case of SgGlobal has the name "::").

The SgQualifiedName is used internally in a list (SgQualifiedNamePtrList)
which is located at the following IR nodes:
   - SgTypedefDeclaration
   - SgInitializedName
   - SgFunctionType (for the return type)

\note In this sense it might be worth while to consider a less memory efficient 
IR design that would have not shared SgType IR nodes.

\sa
\ref SgQualifiedName_usage  "Example of using a SgQualifiedName object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgQualifiedName data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgQualifiedName::p_scope
\brief This pointer points to SgScopeStatement used to represent the explicitly named
    scope of the expression's reference.
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgQualifiedName member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgQualifiedName::SgQualifiedName()
\brief This is the constructor.

   This constructor builds the SgQualifiedName base class.

\sa 
\ref SgQualifiedName_create "Example:create an SgQualifiedName object"
*/

/*!
\fn SgQualifiedName::~SgQualifiedName()
\brief This is the destructor.

   There is nothing to delete in this object.
*/

/*!
\fn SgQualifiedName::isSgQualifiedName (SgNode *s)
\brief Cast function (from derived class to SgQualifiedName pointer).

   This functions returns a SgQualifiedName pointer for any input of a 
pointer to an object derived from a SgQualifiedName.

\return Returns valid pointer to SgQualifiedName if input is derived from a SgLocatedNode.
*/

/*!
\fn SgQualifiedName::isSgQualifiedName (const SgNode *s)
\brief Cast function (from derived class to SgQualifiedName pointer).

   This functions returns a SgQualifiedName pointer for any input of a 
pointer to an object derived from a SgQualifiedName.

\return Returns valid pointer to SgQualifiedName if input is derived from a SgLocatedNode.
*/

/*!
\fn SgQualifiedName::get_scope()
\brief This is the access function to read p_scope.
\return pointer to SgScopeStatement
*/

/*!
\fn SgQualifiedName::set_scope( SgScopeStatement* s )
\brief This is the access function to set p_scope.

\return void
*/

