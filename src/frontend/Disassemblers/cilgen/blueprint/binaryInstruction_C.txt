// This part of the ROSETTA code has been generated from a JSON description file using json2rosetta.
//   Do not modify this file directly, but the corresponding JSON file.
// --- BEGIN generated code: ----------------------------------------------------


`for_each cl = .metadata`
    /*************************************************************************************************************************
     *                                          CIL `cl.Name` (`cl.Section`)
     *************************************************************************************************************************/

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    DECLARE_LEAF_CLASS(AsmCil`cl.Name`);
    IS_SERIALIZABLE(AsmCil`cl.Name`);

#ifdef DOCUMENTATION
    /** CIL `cl.Name` table.
     *
     */
    class SgAsmCil`cl.Name`: public Sg`cl.Baseclass` {
    public:
#endif

`for_each fl = cl.Fields`
#ifdef DOCUMENTATION
        /** Property: `fl.Name`.
         *
         *  `fl.Doc`
         *
         * @{ */
        `fl.Type` get_`fl.Name`() const;
        void set_`fl.Name`(`fl.Type`);
        /** @} */
#else
        AsmCil`cl.Name`.setDataPrototype("`fl.Type`", "`fl.Name`", "", NO_CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif
`end_for`
`for_each exists xtr = cl.Extras`
#ifdef DOCUMENTATION
        /** Property: `xtr.Name`.
         *
         *  `xtr.Doc`
         *
         * @{ */
        `xtr.Type` get_`xtr.Name`() const;
        void set_`xtr.Name`(`xtr.Type`);
        /** @} */
#else
        AsmCil`cl.Name`.setDataPrototype("`xtr.Type`", "`xtr.Name`", "`xtr.Init`", NO_CONSTRUCTOR_PARAMETER,
                                              BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif
`end_for`


        DECLARE_OTHERS(AsmCil`cl.Name`);
#if defined(SgAsmCil`cl.Name`_OTHERS) || defined(DOCUMENTATION)

    public:
        void parse(std::vector<uint8_t>& buf, size_t& index, uint64_t uses4byteIndexing);        
`for_each fl = cl.Fields` `if exists fl.RefKind` `if fl.RefKind eq "blob_heap"`
        const std::uint8_t* get_`fl.Name`_blob() const;
    `else_if fl.RefKind eq "guid_heap"`
        const std::uint32_t* get_`fl.Name`_guid() const;
    `else_if fl.RefKind eq "string_heap"`
        const std::uint8_t* get_`fl.Name`_string() const;
    `else`
        const SgAsmCilMetadata* get_`fl.Name`_object() const;
    `end_if`
  `end_if`
`end_for`        

#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilNode);
            `for_each fl = cl.Fields`
            s & BOOST_SERIALIZATION_NVP(p_`fl.Name`);
            `end_for`
            `for_each exists xtr = cl.Extras`
            s & BOOST_SERIALIZATION_NVP(p_`xtr.Name`);
            `end_for`
        }
#endif


#endif // SgAsmCil`cl.Name`_OTHERS

#ifdef DOCUMENTATION
    protected:
      `for_each fl = cl.Fields`
      `fl.Type` p_`fl.Name`;
      `end_for`
#endif

#ifdef DOCUMENTATION
    };
#endif
`end_for`

    /*************************************************************************************************************************
     *                                      Root of a branch of CIL IR classes
     *************************************************************************************************************************/

    NEW_NONTERMINAL_MACRO(AsmCilMetadata,
                          AsmCilAssembly        | AsmCilAssemblyOS           | AsmCilAssemblyProcessor | AsmCilAssemblyRef |
                          AsmCilAssemblyRefOS   | AsmCilAssemblyRefProcessor | AsmCilClassLayout       | AsmCilConstant |
                          AsmCilCustomAttribute | AsmCilDeclSecurity         | AsmCilEvent             | AsmCilEventMap |
                          AsmCilExportedType    | AsmCilField                | AsmCilFieldLayout       | AsmCilFieldMarshal |
                          AsmCilFieldRVA        | AsmCilFile                 | AsmCilGenericParam      | AsmCilGenericParamConstraint |
                          AsmCilImplMap         | AsmCilInterfaceImpl        | AsmCilManifestResource  | AsmCilMemberRef |
                          AsmCilMethodDef       | AsmCilMethodImpl           | AsmCilMethodSemantics   | AsmCilMethodSpec |
                          AsmCilModule          | AsmCilModuleRef            | AsmCilNestedClass       | AsmCilParam |
                          AsmCilProperty        | AsmCilPropertyMap          | AsmCilStandAloneSig     | AsmCilTypeDef |
                          AsmCilTypeRef         | AsmCilTypeSpec,
                          "AsmCilMetadata", "AsmCilMetadataTag", false);
    AsmCilMetadata.setCppCondition("!defined(DOCUMENTATION)");
    IS_SERIALIZABLE(AsmCilMetadata);

#ifdef DOCUMENTATION
    /** Base class for CIL branch of binary analysis IR nodes. */
    class SgAsmCilMetadata : public SgAsmCilNode {
    public:
#endif

        DECLARE_OTHERS(AsmCilMetadata);
#if defined(SgAsmCilMetadata_OTHERS) || defined(DOCUMENTATION)
#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilNode);
        }
#endif

#endif // SgAsmCilMetadata_OTHERS

#ifdef DOCUMENTATION
    };
#endif

//
// MetadataHeap

    DECLARE_LEAF_CLASS(AsmCilMetadataHeap);
    IS_SERIALIZABLE(AsmCilMetadataHeap);

#ifdef DOCUMENTATION
    /** CIL AsmCilMetadataHeap.
     *
     */
    class SgAsmCilMetadataHeap: public SgAsmCilDataStream {
    public:
#endif

`for_each fl = .metadataheap.Fields`

#ifdef DOCUMENTATION
        /** Property: `fl.Doc`
         * @{ */
        `fl.Type` get_`fl.Name`() const;
        void set_`fl.Name`(`fl.Type`);
        /** @} */
#else
        AsmCilMetadataHeap.setDataPrototype("`fl.Type`", "`fl.Name`", "", NO_CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

`end_for`

`for_each cl = .metadata`

#ifdef DOCUMENTATION
#else
        AsmCilMetadataHeap.setDataPrototype("std::vector<SgAsmCil`cl.Name`*>", "`cl.Name`", "", NO_CONSTRUCTOR_PARAMETER,
                                            NO_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

`end_for`


        DECLARE_OTHERS(AsmCilMetadataHeap);
#if defined(SgAsmCilMetadataHeap_OTHERS) || defined(DOCUMENTATION)

    public:
        /// reference kinds in the metadata tables
        enum ReferenceKind
        {
          // heaps
          e_ref_string_heap           = 1 << 0,
          e_ref_guid_heap             = 1 << 1,
          e_ref_blob_heap             = 1 << 2,
          // single-table references
          e_ref_assembly_ref          = 1 << 3,
          e_ref_type_def              = 1 << 4,
          e_ref_event                 = 1 << 5,
          e_ref_field                 = 1 << 6,
          e_ref_generic_param         = 1 << 7,
          e_ref_module_ref            = 1 << 8,
          e_ref_method_def            = 1 << 9,
          e_ref_param                 = 1 << 10,
          e_ref_property              = 1 << 11,
          // multi-table references
          e_ref_has_constant          = 1 << 12,
          e_ref_has_custom_attribute  = 1 << 13,
          e_ref_has_decl_security     = 1 << 14,
          e_ref_has_field_marshall    = 1 << 15,
          e_ref_has_semantics         = 1 << 16,
          e_ref_method_def_or_ref     = 1 << 17,
          e_ref_type_def_or_ref       = 1 << 18,
          e_ref_implementation        = 1 << 19,
          e_ref_member_forwarded      = 1 << 20,
          e_ref_member_ref_parent     = 1 << 21,
          e_ref_type_or_method_def    = 1 << 22,
          e_ref_custom_attribute_type = 1 << 23,
          e_ref_resolution_scope      = 1 << 24,
          e_ref_last                  = 1 << 25,  
        };

        enum TableKind : std::uint8_t
        {
          `for_each cl = .metadata`
          e_`cl.Name` = `cl.Code`,
          `end_for`
          e_Unknown_table_kind = 0xFF
        };
        
        SgAsmCilMetadataHeap() = default;

        /** parses the metadata objects from the buffer. */
        void parse(std::vector<uint8_t>& buf, size_t startOfMetaData) override;

        /** looks up the node associated with the coded index @ref idx in the metadata table
         *  associated with @ref tblcode.
         */
        SgAsmCilMetadata* get_MetadataNode(std::uint32_t idx, TableKind tblcode) const;        
        
        /** looks up the node associated with the coded index @ref refcode in the metadata tables
         *  under the assumption that @refval is of kind @ref knd
         */
        SgAsmCilMetadata* get_CodedMetadataNode(std::uint32_t refcode, ReferenceKind knd) const;


        /** looks up the node associated with the coded index @ref refcode in the metadata tables
         *  under the assumption that @refval is of kind @ref knd
         */
        SgAsmCilMetadata* get_MetadataNode(std::uint32_t refcode, ReferenceKind knd) const;

        /** metadata-tables accessor methods
         *  @{ */
        `for_each cl = .metadata`
        std::vector<SgAsmCil`cl.Name`*>&       get_`cl.Name`()       { return p_`cl.Name`; }
        std::vector<SgAsmCil`cl.Name`*> const& get_`cl.Name`() const { return p_`cl.Name`; }
        `end_for`
        /** @} */


#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilDataStream);
            `for_each fl = .metadataheap.Fields`
            s & BOOST_SERIALIZATION_NVP(p_`fl.Name`);
            `end_for`
            `for_each cl = .metadata`
            s & BOOST_SERIALIZATION_NVP(p_`cl.Name`);
            `end_for`
        }
#endif


#endif // SgAsmCilMetadataHeap_OTHERS

#ifdef DOCUMENTATION
    protected:
      `for_each fl = .metadataheap.Fields`
      `fl.Type` p_`fl.Name`;
      `end_for`
      `for_each cl = .metadata`
      std::vector<SgAsmCil`cl.Name`*> p_`cl.Name`;
      `end_for`
#endif

#ifdef DOCUMENTATION
    };
#endif


    DECLARE_LEAF_CLASS(AsmCilUint8Heap);
    IS_SERIALIZABLE(AsmCilUint8Heap);

#ifdef DOCUMENTATION
    /** Base class for CIL branch of binary analysis IR nodes. */
    class SgAsmCilUint8Heap : public SgAsmCilDataStream {
    public:
#endif

#ifdef DOCUMENTATION
#else
        AsmCilUint8Heap.setDataPrototype("std::vector<uint8_t>", "Stream", "", NO_CONSTRUCTOR_PARAMETER,
                                         NO_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif


    DECLARE_OTHERS(AsmCilUint8Heap);

#if defined(SgAsmCilUint8Heap_OTHERS) || defined(DOCUMENTATION)
#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    public:
        // using SgAsmCilDataStream::SgAsmCilDataStream;
        SgAsmCilUint8Heap() = default;

        void parse(std::vector<uint8_t>& buf, size_t startOfMetaData) override;

        /** Property: Returns stream representation
         * @{ */
              std::vector<uint8_t>& get_Stream()       { return p_Stream; }
        const std::vector<uint8_t>& get_Stream() const { return p_Stream; }
        /** @} */

    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilDataStream);

            s & BOOST_SERIALIZATION_NVP(p_Stream);
        }
#endif

#endif // SgAsmCilUint8Heap_OTHERS

#ifdef DOCUMENTATION
    protected:
        std::vector<uint8_t> p_Stream;
#endif

#ifdef DOCUMENTATION
    };
#endif


    DECLARE_LEAF_CLASS(AsmCilUint32Heap);
    IS_SERIALIZABLE(AsmCilUint32Heap);

#ifdef DOCUMENTATION
    /** Base class for CIL branch of binary analysis IR nodes. */
    class SgAsmCilUint32Heap : public SgAsmCilDataStream {
    public:
#endif

#ifdef DOCUMENTATION
#else
        AsmCilUint32Heap.setDataPrototype("std::vector<uint32_t>", "Stream", "", NO_CONSTRUCTOR_PARAMETER,
                                          NO_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif


    DECLARE_OTHERS(AsmCilUint32Heap);

#if defined(SgAsmCilUint32Heap_OTHERS) || defined(DOCUMENTATION)
#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    public:
        // using SgAsmCilDataStream::SgAsmCilDataStream;
        SgAsmCilUint32Heap() = default;

        void parse(std::vector<uint8_t>& buf, size_t startOfMetaData) override;
        /** Property: Returns stream representation
         * @{ */
              std::vector<uint32_t>& get_Stream()       { return p_Stream; }
        const std::vector<uint32_t>& get_Stream() const { return p_Stream; }
        /** @} */


    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilDataStream);

            s & BOOST_SERIALIZATION_NVP(p_Stream);
        }
#endif

#endif // SgAsmCilUint32Heap_OTHERS

#ifdef DOCUMENTATION
    protected:
        std::vector<uint32_t> p_Stream;
#endif

#ifdef DOCUMENTATION
    };
#endif


    NEW_NONTERMINAL_MACRO(AsmCilDataStream,
                          AsmCilMetadataHeap | AsmCilUint8Heap | AsmCilUint32Heap,
                          "AsmCilDataStream", "AsmCilDataStreamTag", false);
    AsmCilDataStream.setCppCondition("!defined(DOCUMENTATION)");
    IS_SERIALIZABLE(AsmCilDataStream);

#ifdef DOCUMENTATION
    /** Base class for CIL branch of binary analysis IR nodes. */
    class SgAsmCilDataStream : public SgAsmCilNode {
    public:
#endif

#ifdef DOCUMENTATION
        /** Property: Start offset of the byte stream
         * @{ */
        uint32_t get_Offset() const;
        void set_Offset(uint32_t);
        /** @} */
#else
        AsmCilDataStream.setDataPrototype("uint32_t", "Offset", "", CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

#ifdef DOCUMENTATION
        /** Property: Length of the byte stream
         * @{ */
        uint32_t get_Size() const;
        void set_Size(uint32_t);
        /** @} */
#else
        AsmCilDataStream.setDataPrototype("uint32_t", "Size", "", CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

#ifdef DOCUMENTATION
        /** Property: Name of the byte stream
         * @{ */
        std::string get_Name() const;
        void set_Name(std::string);
        /** @} */
#else
        AsmCilDataStream.setDataPrototype("std::string", "Name", "", CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

#ifdef DOCUMENTATION
        /** Property: Name of the byte stream
         * @{ */
        uint32_t get_NamePadding() const;
        void set_NamePadding(uint32_t);
        /** @} */
#else
        AsmCilDataStream.setDataPrototype("uint32_t", "NamePadding", "", CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

    DECLARE_OTHERS(AsmCilDataStream);

#if defined(SgAsmCilDataStream_OTHERS) || defined(DOCUMENTATION)
#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    public:
        /** Define constant strings for the known stream types
         *  @{
         */
        static const std::string ID_STRING_HEAP;
        static const std::string ID_BLOB_HEAP;
        static const std::string ID_US_HEAP;
        static const std::string ID_GUID_HEAP;
        static const std::string ID_METADATA_HEAP;
        /** }@ */

        SgAsmCilDataStream() = default;

        /**
         * Defines the parse function.
         * @param buf the binary buffer.
         * @param startOfMetaData the location in buf where the metadata root (CIL ECMA II.24.2.1)
         *        is located.
         * @details
         *   buf[startOfMetaData] is the location of the metadata root magic number.
         *   parse will add get_Offset to startOfMetaData to find the first byte of a
         *   stream.
         */
        virtual void parse(std::vector<uint8_t>& buf, size_t startOfMetaData) { /* FIXME: should be abstract */ }

    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilNode);

            s & BOOST_SERIALIZATION_NVP(p_Offset);
            s & BOOST_SERIALIZATION_NVP(p_Size);
            s & BOOST_SERIALIZATION_NVP(p_Name);
            s & BOOST_SERIALIZATION_NVP(p_NamePadding);
        }
#endif

#endif // SgAsmCilDataStream_OTHERS

#ifdef DOCUMENTATION
    protected:
        uint32_t    p_Offset;
        uint32_t    p_Size;
        std::string p_Name;
        uint32_t    p_NamePadding;
#endif

#ifdef DOCUMENTATION
    };
#endif


//
// MetadataRoot

    DECLARE_LEAF_CLASS(AsmCilMetadataRoot);
    IS_SERIALIZABLE(AsmCilMetadataRoot);

#ifdef DOCUMENTATION
    /** CIL SgAsmCilMetadataRoot.
     *
     */
    class SgAsmCilMetadataRoot: public SgAsmCilNode {
    public:
#endif

`for_each fl = .metadataroot.Fields`

#ifdef DOCUMENTATION
        /** Property: `fl.Doc`
         * @{ */
        `fl.Type` get_`fl.Name`() const;
        void set_`fl.Name`(`fl.Type`);
        /** @} */
#else
        AsmCilMetadataRoot.setDataPrototype("`fl.Type`", "`fl.Name`", "", NO_CONSTRUCTOR_PARAMETER,
                                            BUILD_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

`end_for`


`for_each str = .metadataroot.Streams`

#ifdef DOCUMENTATION

#else
        AsmCilMetadataRoot.setDataPrototype("std::vector<`str.Type`*>", "`str.Name`", "", NO_CONSTRUCTOR_PARAMETER,
                                            NO_ACCESS_FUNCTIONS, NO_TRAVERSAL, NO_DELETE);
#endif

`end_for`


        DECLARE_OTHERS(AsmCilMetadataRoot);
#if defined(SgAsmCilMetadataRoot_OTHERS) || defined(DOCUMENTATION)
    private:
        /** indices to efficienty access the different heaps
         * @{ */
        mutable int8_t idxStringHeap = -1;
        mutable int8_t idxBlobHeap = -1;
        mutable int8_t idxUsHeap = -1;
        mutable int8_t idxGuidHeap = -1;
        mutable int8_t idxMetadataHeap = -1;
        /** }@ */

    public:
        /** 4-byte indicating the start of the metadata root in the .text section.
         */
        static constexpr uint32_t MAGIC_SIGNATURE = 0x424A5342;

        /** Declares the parse function as called from the Cil section header object
         *  @pre isSgAsmCliHeader(this->get_parent()) != nullptr
         */
        void parse();

        /** Declares the parse function.
         *  @param buf the binary buffer
         *  @param index the start location of the metadata root object.
         *         buf[index] is the location of the magic number.
         */
        void parse(std::vector<uint8_t>& buf, size_t index);

        /** accessor functions to return specific heaps
         * @{ */
        SgAsmCilUint8Heap*    get_StringHeap() const;
        SgAsmCilUint8Heap*    get_BlobHeap() const;
        SgAsmCilUint8Heap*    get_UsHeap() const;
        SgAsmCilUint32Heap*   get_GuidHeap() const;
        SgAsmCilMetadataHeap* get_MetadataHeap() const;
        /** }@ */

`for_each str = .metadataroot.Streams`
        /** `str.Name` accessor
         * @{ */
        const std::vector<`str.Type`*>& get_`str.Name`() const;
        std::vector<`str.Type`*>& get_`str.Name`();
        /** @} */
`end_for`



#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmCilNode);
            `for_each fld = .metadataroot.Fields`
            s & BOOST_SERIALIZATION_NVP(p_`fld.Name`);
            `end_for`
            `for_each str = .metadataroot.Streams`
            s & BOOST_SERIALIZATION_NVP(p_`str.Name`);
            `end_for`
        }
#endif


#endif // SgAsmCilMetadataRoot_OTHERS

#ifdef DOCUMENTATION
    protected:
      `for_each fld = .metadataroot.Fields`
      `fld.Type` p_`fld.Name`;
      `end_for`
      `for_each str = .metadataroot.Streams`
      std::vector<`str.Type`*> p_`str.Name`;
      `end_for`
#endif

#ifdef DOCUMENTATION
    };
#endif



    NEW_NONTERMINAL_MACRO(AsmCilNode,
                          AsmCilMetadata | AsmCilDataStream | AsmCilMetadataRoot,
                          "AsmCilNode", "AsmCilNodeTag", false);
    AsmCilNode.setCppCondition("!defined(DOCUMENTATION)");
    IS_SERIALIZABLE(AsmCilNode);

#ifdef DOCUMENTATION
    /** Base class for CIL branch of binary analysis IR nodes. */
    class SgAsmCilNode: public SgAsmNode {
    public:
#endif

        DECLARE_OTHERS(AsmCilNode);
#if defined(SgAsmCilNode_OTHERS) || defined(DOCUMENTATION)
#ifdef ROSE_HAVE_BOOST_SERIALIZATION_LIB
    private:
        friend class boost::serialization::access;

        template<class S>
        void serialize(S &s, const unsigned /*version*/) {
            s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(SgAsmNode);
        }
#endif

#endif // SgAsmCilNode_OTHERS

#ifdef DOCUMENTATION
    };
#endif


// --- END generated code. ------------------------------------------------------

