// DO NOT EDIT -- This file is automatically generated.

#ifndef ROSE_STRINGIFY_H
#define ROSE_STRINGIFY_H
#include <boost/algorithm/string/predicate.hpp>
#include <boost/lexical_cast.hpp>
#include <string>

namespace Rose {
/** Shortens names of long stringifiers.
 *
 *  Enum stringifier functions are automatically and sometimes have very long names.  This class is intended to be a convenient
 *  way to make a locally short-named object that can be used in place of the long stringifier.
 *
 *  @code
 *   Stringifier stringifyType(stringifyBinaryAnalysisInstructionSemantics2DataFlowSemanticsDataFlowEdgeEdgeType);
 *   std::cout <<stringifyType(CLOBBER) <<"\n";
 *  @endcode */
class Stringifier {
    std::string(*stringifier_)(long int, const char*, bool);
public:
    Stringifier(std::string(*stringifier)(long int, const char*, bool)): stringifier_(stringifier) {}
    std::string operator()(long int n, const char *strip=NULL, bool canonic=false) {
        return stringifier_(n, strip, canonic);
    }
};
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/AsmUnparser.h line 251
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace AsmUnparser {
    /** Convert Rose::BinaryAnalysis::AsmUnparser::Organization enum constant to a string. */
    const char* Organization(long);

    /** Convert Rose::BinaryAnalysis::AsmUnparser::Organization enum constant to a string. */
    std::string Organization(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisAsmUnparserOrganization(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinarySerialIo.h line 116
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SerialIo {
    /** Convert Rose::BinaryAnalysis::SerialIo::Format enum constant to a string. */
    const char* Format(long);

    /** Convert Rose::BinaryAnalysis::SerialIo::Format enum constant to a string. */
    std::string Format(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSerialIoFormat(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinarySerialIo.h line 127
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SerialIo {
    /** Convert Rose::BinaryAnalysis::SerialIo::Savable enum constant to a string. */
    const char* Savable(long);

    /** Convert Rose::BinaryAnalysis::SerialIo::Savable enum constant to a string. */
    std::string Savable(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSerialIoSavable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/AsmUnparser_compat.h line 44
namespace stringify {
    /** Convert ArmSignForExpressionUnparsing enum constant to a string. */
    const char* ArmSignForExpressionUnparsing(long);

    /** Convert ArmSignForExpressionUnparsing enum constant to a string. */
    std::string ArmSignForExpressionUnparsing(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyArmSignForExpressionUnparsing(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 19
namespace stringify {
    /** Convert AssociativitySpecifier enum constant to a string. */
    const char* AssociativitySpecifier(long);

    /** Convert AssociativitySpecifier enum constant to a string. */
    std::string AssociativitySpecifier(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyAssociativitySpecifier(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 46
namespace stringify { namespace UnparseLanguageIndependentConstructs {
    /** Convert UnparseLanguageIndependentConstructs::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(long);

    /** Convert UnparseLanguageIndependentConstructs::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyUnparseLanguageIndependentConstructs_token_sequence_position_enum_type(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 71
namespace stringify { namespace UnparseLanguageIndependentConstructs {
    /** Convert UnparseLanguageIndependentConstructs::unparsed_as_enum_type enum constant to a string. */
    const char* unparsed_as_enum_type(long);

    /** Convert UnparseLanguageIndependentConstructs::unparsed_as_enum_type enum constant to a string. */
    std::string unparsed_as_enum_type(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyUnparseLanguageIndependentConstructs_unparsed_as_enum_type(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/unparser.h line 201
namespace stringify { namespace Unparser {
    /** Convert Unparser::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(long);

    /** Convert Unparser::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyUnparser_token_sequence_position_enum_type(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/formatSupport/unparse_format.h line 51
namespace stringify {
    /** Convert Format_Opt enum constant to a string. */
    const char* Format_Opt(long);

    /** Convert Format_Opt enum constant to a string. */
    std::string Format_Opt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyFormat_Opt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/CxxCodeGeneration/unparseCxx.h line 522
namespace stringify { namespace Unparse_ExprStmt {
    /** Convert Unparse_ExprStmt::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(long);

    /** Convert Unparse_ExprStmt::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyUnparse_ExprStmt_token_sequence_position_enum_type(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/astUnparseAttribute.h line 33
namespace stringify { namespace AstUnparseAttribute {
    /** Convert AstUnparseAttribute::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(long);

    /** Convert AstUnparseAttribute::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstUnparseAttributeRelativePositionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/POET/poet_yacc.h line 46
namespace stringify {
    /** Convert yytokentype enum constant to a string. */
    const char* yytokentype(long);

    /** Convert yytokentype enum constant to a string. */
    std::string yytokentype(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_yytokentype(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/MSTL/DOTGeneration.h line 45
namespace stringify { namespace DOTGeneration {
    /** Convert DOTGeneration::traversalType enum constant to a string. */
    const char* traversalType(long);

    /** Convert DOTGeneration::traversalType enum constant to a string. */
    std::string traversalType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyDOTGeneration_traversalType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Widgets/QRButtons.h line 29
namespace stringify { namespace qrs { namespace QRButtons {
    /** Convert qrs::QRButtons::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::QRButtons::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQRButtonsType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Widgets/QRSelect.h line 26
namespace stringify { namespace qrs { namespace QRSelect {
    /** Convert qrs::QRSelect::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::QRSelect::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQRSelectType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Widgets/QREdit.h line 28
namespace stringify { namespace qrs { namespace QREdit {
    /** Convert qrs::QREdit::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::QREdit::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQREditType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/qeditor.h line 65
namespace stringify { namespace qrs { namespace QEditor {
    /** Convert qrs::QEditor::TypeSel enum constant to a string. */
    const char* TypeSel(long);

    /** Convert qrs::QEditor::TypeSel enum constant to a string. */
    std::string TypeSel(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQEditorTypeSel(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/qsourcecolorizer.h line 257
namespace stringify { namespace qrs { namespace QSourceColorizer {
    /** Convert qrs::QSourceColorizer::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::QSourceColorizer::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQSourceColorizerType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/parenmatcher.h line 37
namespace stringify { namespace qrs { namespace Paren {
    /** Convert qrs::Paren::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::Paren::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsParenType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/parenmatcher.h line 48
namespace stringify { namespace qrs { namespace ParenMatcher {
    /** Convert qrs::ParenMatcher::Selection enum constant to a string. */
    const char* Selection(long);

    /** Convert qrs::ParenMatcher::Selection enum constant to a string. */
    std::string Selection(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsParenMatcherSelection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/paragdata.h line 36
namespace stringify { namespace qrs { namespace Symbol {
    /** Convert qrs::Symbol::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::Symbol::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsSymbolType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/QRSourceBox.h line 39
namespace stringify { namespace qrs { namespace QRSourceBox {
    /** Convert qrs::QRSourceBox::ToolbarIdx enum constant to a string. */
    const char* ToolbarIdx(long);

    /** Convert qrs::QRSourceBox::ToolbarIdx enum constant to a string. */
    std::string ToolbarIdx(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQRSourceBoxToolbarIdx(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 122
namespace stringify { namespace qrs { namespace Q3TextStringChar {
    /** Convert qrs::Q3TextStringChar::Type enum constant to a string. */
    const char* Type(long);

    /** Convert qrs::Q3TextStringChar::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextStringCharType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 366
namespace stringify { namespace qrs { namespace Q3TextCursor {
    /** Convert qrs::Q3TextCursor::Operation enum constant to a string. */
    const char* Operation(long);

    /** Convert qrs::Q3TextCursor::Operation enum constant to a string. */
    std::string Operation(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextCursorOperation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 390
namespace stringify { namespace qrs { namespace Q3TextCommand {
    /** Convert qrs::Q3TextCommand::Commands enum constant to a string. */
    const char* Commands(long);

    /** Convert qrs::Q3TextCommand::Commands enum constant to a string. */
    std::string Commands(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextCommandCommands(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 451
namespace stringify { namespace qrs { namespace Q3TextCustomItem {
    /** Convert qrs::Q3TextCustomItem::Placement enum constant to a string. */
    const char* Placement(long);

    /** Convert qrs::Q3TextCustomItem::Placement enum constant to a string. */
    std::string Placement(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextCustomItemPlacement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 724
namespace stringify { namespace qrs { namespace Q3TextDocument {
    /** Convert qrs::Q3TextDocument::SelectionIds enum constant to a string. */
    const char* SelectionIds(long);

    /** Convert qrs::Q3TextDocument::SelectionIds enum constant to a string. */
    std::string SelectionIds(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextDocumentSelectionIds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 1380
namespace stringify { namespace qrs { namespace Q3TextPreProcessor {
    /** Convert qrs::Q3TextPreProcessor::Ids enum constant to a string. */
    const char* Ids(long);

    /** Convert qrs::Q3TextPreProcessor::Ids enum constant to a string. */
    std::string Ids(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextPreProcessorIds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 1400
namespace stringify { namespace qrs { namespace Q3TextFormat {
    /** Convert qrs::Q3TextFormat::Flags enum constant to a string. */
    const char* Flags(long);

    /** Convert qrs::Q3TextFormat::Flags enum constant to a string. */
    std::string Flags(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextFormatFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 1415
namespace stringify { namespace qrs { namespace Q3TextFormat {
    /** Convert qrs::Q3TextFormat::VerticalAlignment enum constant to a string. */
    const char* VerticalAlignment(long);

    /** Convert qrs::Q3TextFormat::VerticalAlignment enum constant to a string. */
    std::string VerticalAlignment(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQ3TextFormatVerticalAlignment(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/TreeBox/QRTreeBox.h line 40
namespace stringify { namespace qrs { namespace QRTreeBox {
    /** Convert qrs::QRTreeBox::ToolbarIdx enum constant to a string. */
    const char* ToolbarIdx(long);

    /** Convert qrs::QRTreeBox::ToolbarIdx enum constant to a string. */
    std::string ToolbarIdx(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQRTreeBoxToolbarIdx(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/TreeBox/QRTreeBox.h line 107
namespace stringify { namespace qrs { namespace QRTreeBox {
    /** Convert qrs::QRTreeBox::popmenu_nodes_id enum constant to a string. */
    const char* popmenu_nodes_id(long);

    /** Convert qrs::QRTreeBox::popmenu_nodes_id enum constant to a string. */
    std::string popmenu_nodes_id(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_qrsQRTreeBox_popmenu_nodes_id(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_encoder.h line 69
namespace stringify {
    /** Convert _HPDF_EncodingType enum constant to a string. */
    const char* _HPDF_EncodingType(long);

    /** Convert _HPDF_EncodingType enum constant to a string. */
    std::string _HPDF_EncodingType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_EncodingType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_encoder.h line 130
namespace stringify {
    /** Convert _HPDF_BaseEncodings enum constant to a string. */
    const char* _HPDF_BaseEncodings(long);

    /** Convert _HPDF_BaseEncodings enum constant to a string. */
    std::string _HPDF_BaseEncodings(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_BaseEncodings(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_fontdef.h line 63
namespace stringify {
    /** Convert _HPDF_FontDefType enum constant to a string. */
    const char* _HPDF_FontDefType(long);

    /** Convert _HPDF_FontDefType enum constant to a string. */
    std::string _HPDF_FontDefType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_FontDefType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_streams.h line 33
namespace stringify {
    /** Convert _HPDF_StreamType enum constant to a string. */
    const char* _HPDF_StreamType(long);

    /** Convert _HPDF_StreamType enum constant to a string. */
    std::string _HPDF_StreamType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_StreamType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_streams.h line 46
namespace stringify {
    /** Convert _HPDF_WhenceMode enum constant to a string. */
    const char* _HPDF_WhenceMode(long);

    /** Convert _HPDF_WhenceMode enum constant to a string. */
    std::string _HPDF_WhenceMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_WhenceMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_font.h line 31
namespace stringify {
    /** Convert _HPDF_FontType enum constant to a string. */
    const char* _HPDF_FontType(long);

    /** Convert _HPDF_FontType enum constant to a string. */
    std::string _HPDF_FontType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_FontType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 128
namespace stringify {
    /** Convert _HPDF_InfoType enum constant to a string. */
    const char* _HPDF_InfoType(long);

    /** Convert _HPDF_InfoType enum constant to a string. */
    std::string _HPDF_InfoType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_InfoType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 144
namespace stringify {
    /** Convert _HPDF_PdfVer enum constant to a string. */
    const char* _HPDF_PdfVer(long);

    /** Convert _HPDF_PdfVer enum constant to a string. */
    std::string _HPDF_PdfVer(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_PdfVer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 154
namespace stringify {
    /** Convert _HPDF_EncryptMode enum constant to a string. */
    const char* _HPDF_EncryptMode(long);

    /** Convert _HPDF_EncryptMode enum constant to a string. */
    std::string _HPDF_EncryptMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_EncryptMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 213
namespace stringify {
    /** Convert _HPDF_ColorSpace enum constant to a string. */
    const char* _HPDF_ColorSpace(long);

    /** Convert _HPDF_ColorSpace enum constant to a string. */
    std::string _HPDF_ColorSpace(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_ColorSpace(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 250
namespace stringify {
    /** Convert _HPDF_LineCap enum constant to a string. */
    const char* _HPDF_LineCap(long);

    /** Convert _HPDF_LineCap enum constant to a string. */
    std::string _HPDF_LineCap(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_LineCap(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 260
namespace stringify {
    /** Convert _HPDF_LineJoin enum constant to a string. */
    const char* _HPDF_LineJoin(long);

    /** Convert _HPDF_LineJoin enum constant to a string. */
    std::string _HPDF_LineJoin(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_LineJoin(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 270
namespace stringify {
    /** Convert _HPDF_TextRenderingMode enum constant to a string. */
    const char* _HPDF_TextRenderingMode(long);

    /** Convert _HPDF_TextRenderingMode enum constant to a string. */
    std::string _HPDF_TextRenderingMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_TextRenderingMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 283
namespace stringify {
    /** Convert _HPDF_WritingMode enum constant to a string. */
    const char* _HPDF_WritingMode(long);

    /** Convert _HPDF_WritingMode enum constant to a string. */
    std::string _HPDF_WritingMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_WritingMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 290
namespace stringify {
    /** Convert _HPDF_PageLayout enum constant to a string. */
    const char* _HPDF_PageLayout(long);

    /** Convert _HPDF_PageLayout enum constant to a string. */
    std::string _HPDF_PageLayout(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_PageLayout(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 299
namespace stringify {
    /** Convert _HPDF_PageMode enum constant to a string. */
    const char* _HPDF_PageMode(long);

    /** Convert _HPDF_PageMode enum constant to a string. */
    std::string _HPDF_PageMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_PageMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 311
namespace stringify {
    /** Convert _HPDF_PageNumStyle enum constant to a string. */
    const char* _HPDF_PageNumStyle(long);

    /** Convert _HPDF_PageNumStyle enum constant to a string. */
    std::string _HPDF_PageNumStyle(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_PageNumStyle(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 321
namespace stringify {
    /** Convert _HPDF_DestinationType enum constant to a string. */
    const char* _HPDF_DestinationType(long);

    /** Convert _HPDF_DestinationType enum constant to a string. */
    std::string _HPDF_DestinationType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_DestinationType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 334
namespace stringify {
    /** Convert _HPDF_AnnotType enum constant to a string. */
    const char* _HPDF_AnnotType(long);

    /** Convert _HPDF_AnnotType enum constant to a string. */
    std::string _HPDF_AnnotType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_AnnotType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 352
namespace stringify {
    /** Convert _HPDF_AnnotFlgs enum constant to a string. */
    const char* _HPDF_AnnotFlgs(long);

    /** Convert _HPDF_AnnotFlgs enum constant to a string. */
    std::string _HPDF_AnnotFlgs(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_AnnotFlgs(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 363
namespace stringify {
    /** Convert _HPDF_AnnotHighlightMode enum constant to a string. */
    const char* _HPDF_AnnotHighlightMode(long);

    /** Convert _HPDF_AnnotHighlightMode enum constant to a string. */
    std::string _HPDF_AnnotHighlightMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_AnnotHighlightMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 372
namespace stringify {
    /** Convert _HPDF_AnnotIcon enum constant to a string. */
    const char* _HPDF_AnnotIcon(long);

    /** Convert _HPDF_AnnotIcon enum constant to a string. */
    std::string _HPDF_AnnotIcon(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_AnnotIcon(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 388
namespace stringify {
    /** Convert _HPDF_BSSubtype enum constant to a string. */
    const char* _HPDF_BSSubtype(long);

    /** Convert _HPDF_BSSubtype enum constant to a string. */
    std::string _HPDF_BSSubtype(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_BSSubtype(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 399
namespace stringify {
    /** Convert _HPDF_BlendMode enum constant to a string. */
    const char* _HPDF_BlendMode(long);

    /** Convert _HPDF_BlendMode enum constant to a string. */
    std::string _HPDF_BlendMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_BlendMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 417
namespace stringify {
    /** Convert _HPDF_TransitionStyle enum constant to a string. */
    const char* _HPDF_TransitionStyle(long);

    /** Convert _HPDF_TransitionStyle enum constant to a string. */
    std::string _HPDF_TransitionStyle(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_TransitionStyle(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 440
namespace stringify {
    /** Convert _HPDF_PageSizes enum constant to a string. */
    const char* _HPDF_PageSizes(long);

    /** Convert _HPDF_PageSizes enum constant to a string. */
    std::string _HPDF_PageSizes(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_PageSizes(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 457
namespace stringify {
    /** Convert _HPDF_PageDirection enum constant to a string. */
    const char* _HPDF_PageDirection(long);

    /** Convert _HPDF_PageDirection enum constant to a string. */
    std::string _HPDF_PageDirection(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_PageDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 463
namespace stringify {
    /** Convert _HPDF_EncoderType enum constant to a string. */
    const char* _HPDF_EncoderType(long);

    /** Convert _HPDF_EncoderType enum constant to a string. */
    std::string _HPDF_EncoderType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_EncoderType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 471
namespace stringify {
    /** Convert _HPDF_ByteType enum constant to a string. */
    const char* _HPDF_ByteType(long);

    /** Convert _HPDF_ByteType enum constant to a string. */
    std::string _HPDF_ByteType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_ByteType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 479
namespace stringify {
    /** Convert _HPDF_TextAlignment enum constant to a string. */
    const char* _HPDF_TextAlignment(long);

    /** Convert _HPDF_TextAlignment enum constant to a string. */
    std::string _HPDF_TextAlignment(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_HPDF_TextAlignment(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/SgNodeHelper.h line 426
namespace stringify { namespace SgNodeHelper { namespace Pattern { namespace OutputTarget {
    /** Convert SgNodeHelper::Pattern::OutputTarget::OType enum constant to a string. */
    const char* OType(long);

    /** Convert SgNodeHelper::Pattern::OutputTarget::OType enum constant to a string. */
    std::string OType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySgNodeHelperPatternOutputTargetOType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/Labeler.h line 60
namespace stringify { namespace SPRAY { namespace LabelProperty {
    /** Convert SPRAY::LabelProperty::LabelType enum constant to a string. */
    const char* LabelType(long);

    /** Convert SPRAY::LabelProperty::LabelType enum constant to a string. */
    std::string LabelType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySPRAY_LabelPropertyLabelType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/Labeler.h line 86
namespace stringify { namespace SPRAY { namespace LabelProperty {
    /** Convert SPRAY::LabelProperty::IOType enum constant to a string. */
    const char* IOType(long);

    /** Convert SPRAY::LabelProperty::IOType enum constant to a string. */
    std::string IOType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySPRAY_LabelPropertyIOType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/MDCG/include/MDCG/Model/base.hpp line 24
namespace stringify { namespace MDCG { namespace Model {
    /** Convert MDCG::Model::model_elements_e enum constant to a string. */
    const char* model_elements_e(long);

    /** Convert MDCG::Model::model_elements_e enum constant to a string. */
    std::string model_elements_e(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyMDCG_Model_model_elements_e(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/MDCG/include/MDCG/Model/base.hpp line 46
namespace stringify { namespace MDCG { namespace Model { namespace element_t {
    /** Convert MDCG::Model::element_t::kind_e enum constant to a string. */
    const char* kind_e(long);

    /** Convert MDCG::Model::element_t::kind_e enum constant to a string. */
    std::string kind_e(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyMDCG_Model_element_t_kind_e(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nameQuery.h line 74
namespace stringify { namespace NameQuery {
    /** Convert NameQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(long);

    /** Convert NameQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyNameQueryTypeOfQueryTypeOneParameter(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nameQuery.h line 94
namespace stringify { namespace NameQuery {
    /** Convert NameQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(long);

    /** Convert NameQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyNameQueryTypeOfQueryTypeTwoParameters(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/booleanQuery.h line 43
namespace stringify { namespace BooleanQuery {
    /** Convert BooleanQuery::TypeOfQueryType enum constant to a string. */
    const char* TypeOfQueryType(long);

    /** Convert BooleanQuery::TypeOfQueryType enum constant to a string. */
    std::string TypeOfQueryType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyBooleanQueryTypeOfQueryType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/astQuery.h line 96
namespace stringify { namespace AstQueryNamespace {
    /** Convert AstQueryNamespace::QueryDepth enum constant to a string. */
    const char* QueryDepth(long);

    /** Convert AstQueryNamespace::QueryDepth enum constant to a string. */
    std::string QueryDepth(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstQueryNamespaceQueryDepth(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/numberQuery.h line 10
namespace stringify { namespace NumberQuery {
    /** Convert NumberQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(long);

    /** Convert NumberQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyNumberQueryTypeOfQueryTypeOneParameter(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/numberQuery.h line 19
namespace stringify { namespace NumberQuery {
    /** Convert NumberQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(long);

    /** Convert NumberQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyNumberQueryTypeOfQueryTypeTwoParameters(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nodeQuery.h line 133
namespace stringify { namespace NodeQuery {
    /** Convert NodeQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(long);

    /** Convert NodeQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyNodeQueryTypeOfQueryTypeOneParameter(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nodeQuery.h line 154
namespace stringify { namespace NodeQuery {
    /** Convert NodeQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(long);

    /** Convert NodeQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyNodeQueryTypeOfQueryTypeTwoParameters(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractMemoryObject/memory_object_impl.h line 84
namespace stringify { namespace AbstractMemoryObject { namespace IndexSet {
    /** Convert AbstractMemoryObject::IndexSet::Index_type enum constant to a string. */
    const char* Index_type(long);

    /** Convert AbstractMemoryObject::IndexSet::Index_type enum constant to a string. */
    std::string Index_type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyAbstractMemoryObjectIndexSetIndex_type(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/omp_lowering.h line 37
namespace stringify { namespace OmpSupport {
    /** Convert OmpSupport::omp_rtl_enum enum constant to a string. */
    const char* omp_rtl_enum(long);

    /** Convert OmpSupport::omp_rtl_enum enum constant to a string. */
    std::string omp_rtl_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyOmpSupport_omp_rtl_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/xomp.c line 60
namespace stringify {
    /** Convert omp_rtl_enum enum constant to a string. */
    const char* omp_rtl_enum(long);

    /** Convert omp_rtl_enum enum constant to a string. */
    std::string omp_rtl_enum(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_omp_rtl_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/implicitCodeGeneration/defaultFunctionGenerator.C line 17
namespace stringify {
    /** Convert defaultEnumFunctionType enum constant to a string. */
    const char* defaultEnumFunctionType(long);

    /** Convert defaultEnumFunctionType enum constant to a string. */
    std::string defaultEnumFunctionType(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_defaultEnumFunctionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/extractFunctionArgumentsNormalization/functionEvaluationOrderTraversal.h line 40
namespace stringify { namespace FunctionCallInfo {
    /** Convert FunctionCallInfo::InsertionMode enum constant to a string. */
    const char* InsertionMode(long);

    /** Convert FunctionCallInfo::InsertionMode enum constant to a string. */
    std::string InsertionMode(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyFunctionCallInfoInsertionMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 21
namespace stringify { namespace SDG { namespace SDGNode {
    /** Convert SDG::SDGNode::NodeType enum constant to a string. */
    const char* NodeType(long);

    /** Convert SDG::SDGNode::NodeType enum constant to a string. */
    std::string NodeType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySDG_SDGNodeNodeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 48
namespace stringify { namespace SDG { namespace SDGEdge {
    /** Convert SDG::SDGEdge::EdgeType enum constant to a string. */
    const char* EdgeType(long);

    /** Convert SDG::SDGEdge::EdgeType enum constant to a string. */
    std::string EdgeType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySDG_SDGEdgeEdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 58
namespace stringify { namespace SDG { namespace SDGEdge {
    /** Convert SDG::SDGEdge::ControlDependenceType enum constant to a string. */
    const char* ControlDependenceType(long);

    /** Convert SDG::SDGEdge::ControlDependenceType enum constant to a string. */
    std::string ControlDependenceType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySDG_SDGEdgeControlDependenceType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/PDG.h line 32
namespace stringify { namespace SDG { namespace PDGEdge {
    /** Convert SDG::PDGEdge::EdgeType enum constant to a string. */
    const char* EdgeType(long);

    /** Convert SDG::PDGEdge::EdgeType enum constant to a string. */
    std::string EdgeType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySDG_PDGEdgeEdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/PtrAliasAnalysis.h line 31
namespace stringify { namespace PtrAliasAnalysis {
    /** Convert PtrAliasAnalysis::COLOR enum constant to a string. */
    const char* COLOR(long);

    /** Convert PtrAliasAnalysis::COLOR enum constant to a string. */
    std::string COLOR(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyPtrAliasAnalysisCOLOR(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/PtrAliasAnalysis.h line 33
namespace stringify { namespace PtrAliasAnalysis {
    /** Convert PtrAliasAnalysis::TRAVERSAL_TYPE enum constant to a string. */
    const char* TRAVERSAL_TYPE(long);

    /** Convert PtrAliasAnalysis::TRAVERSAL_TYPE enum constant to a string. */
    std::string TRAVERSAL_TYPE(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyPtrAliasAnalysisTRAVERSAL_TYPE(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/IntraProcAliasAnalysis.h line 279
namespace stringify { namespace CollectAliasRelations {
    /** Convert CollectAliasRelations::COLOR enum constant to a string. */
    const char* COLOR(long);

    /** Convert CollectAliasRelations::COLOR enum constant to a string. */
    std::string COLOR(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCollectAliasRelationsCOLOR(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/IntraProcAliasAnalysis.h line 280
namespace stringify { namespace CollectAliasRelations {
    /** Convert CollectAliasRelations::TRAVERSAL_TYPE enum constant to a string. */
    const char* TRAVERSAL_TYPE(long);

    /** Convert CollectAliasRelations::TRAVERSAL_TYPE enum constant to a string. */
    std::string TRAVERSAL_TYPE(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCollectAliasRelationsTRAVERSAL_TYPE(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/dominanceAnalysis/DominatorTree.h line 13
namespace stringify { namespace DominatorTreesAndDominanceFrontiers {
    /** Convert DominatorTreesAndDominanceFrontiers::Dir_ection enum constant to a string. */
    const char* Dir_ection(long);

    /** Convert DominatorTreesAndDominanceFrontiers::Dir_ection enum constant to a string. */
    std::string Dir_ection(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyDominatorTreesAndDominanceFrontiersDir_ection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/ssaUnfilteredCfg/reachingDefUnfilteredCfg.h line 19
namespace stringify { namespace ssa_unfiltered_cfg { namespace ReachingDef {
    /** Convert ssa_unfiltered_cfg::ReachingDef::Type enum constant to a string. */
    const char* Type(long);

    /** Convert ssa_unfiltered_cfg::ReachingDef::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify_ssa_unfiltered_cfgReachingDefType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers/DominatorTree.h line 50
namespace stringify { namespace DominatorTreesAndDominanceFrontiers { namespace DominatorTree {
    /** Convert DominatorTreesAndDominanceFrontiers::DominatorTree::Direction enum constant to a string. */
    const char* Direction(long);

    /** Convert DominatorTreesAndDominanceFrontiers::DominatorTree::Direction enum constant to a string. */
    std::string Direction(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyDominatorTreesAndDominanceFrontiersDominatorTreeDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/cfgUtils/CallGraphTraverse.h line 121
namespace stringify { namespace CGFunction { namespace iterator {
    /** Convert CGFunction::iterator::direction enum constant to a string. */
    const char* direction(long);

    /** Convert CGFunction::iterator::direction enum constant to a string. */
    std::string direction(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyCGFunction_iterator_direction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/simpleAnalyses/taintAnalysis.h line 60
namespace stringify { namespace TaintLattice {
    /** Convert TaintLattice::Vertex enum constant to a string. */
    const char* Vertex(long);

    /** Convert TaintLattice::Vertex enum constant to a string. */
    std::string Vertex(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyTaintLatticeVertex(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/lattice/ConstrGraph.h line 42
namespace stringify { namespace ConstrGraph {
    /** Convert ConstrGraph::levels enum constant to a string. */
    const char* levels(long);

    /** Convert ConstrGraph::levels enum constant to a string. */
    std::string levels(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyConstrGraph_levels(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Utils/BaseGraph.h line 261
namespace stringify { namespace BaseGraph { namespace BiDirNodesIterator {
    /** Convert BaseGraph::BiDirNodesIterator::dirType enum constant to a string. */
    const char* dirType(long);

    /** Convert BaseGraph::BiDirNodesIterator::dirType enum constant to a string. */
    std::string dirType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyBaseGraphBiDirNodesIterator_dirType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/RIFG.h line 63
namespace stringify { namespace RIFG {
    /** Convert RIFG::EdgeDirection enum constant to a string. */
    const char* EdgeDirection(long);

    /** Convert RIFG::EdgeDirection enum constant to a string. */
    std::string EdgeDirection(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyRIFG_EdgeDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/RIFG.h line 64
namespace stringify { namespace RIFG {
    /** Convert RIFG::ForwardBackward enum constant to a string. */
    const char* ForwardBackward(long);

    /** Convert RIFG::ForwardBackward enum constant to a string. */
    std::string ForwardBackward(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyRIFG_ForwardBackward(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/CFG.h line 83
namespace stringify { namespace CFG {
    /** Convert CFG::EdgeType enum constant to a string. */
    const char* EdgeType(long);

    /** Convert CFG::EdgeType enum constant to a string. */
    std::string EdgeType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCFG_EdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/TarjanIntervals.h line 65
namespace stringify {
    /** Convert RITarjType enum constant to a string. */
    const char* RITarjType(long);

    /** Convert RITarjType enum constant to a string. */
    std::string RITarjType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyRITarjType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/TarjanIntervals.h line 67
namespace stringify {
    /** Convert RITarjEdgeType enum constant to a string. */
    const char* RITarjEdgeType(long);

    /** Convert RITarjEdgeType enum constant to a string. */
    std::string RITarjEdgeType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyRITarjEdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Interface/IRInterface.h line 163
namespace stringify {
    /** Convert IRProcType enum constant to a string. */
    const char* IRProcType(long);

    /** Convert IRProcType enum constant to a string. */
    std::string IRProcType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyIRProcType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Interface/IRInterface.h line 173
namespace stringify {
    /** Convert IRStmtType enum constant to a string. */
    const char* IRStmtType(long);

    /** Convert IRStmtType enum constant to a string. */
    std::string IRStmtType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyIRStmtType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CallGraph/CallGraph.h line 73
namespace stringify { namespace CallGraph {
    /** Convert CallGraph::EdgeType enum constant to a string. */
    const char* EdgeType(long);

    /** Convert CallGraph::EdgeType enum constant to a string. */
    std::string EdgeType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCallGraphEdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/EditDistance/TreeEditDistance.h line 60
namespace stringify { namespace Rose { namespace EditDistance { namespace TreeEditDistance {
    /** Convert Rose::EditDistance::TreeEditDistance::EditType enum constant to a string. */
    const char* EditType(long);

    /** Convert Rose::EditDistance::TreeEditDistance::EditType enum constant to a string. */
    std::string EditType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyEditDistanceTreeEditDistanceEditType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/staticSingleAssignment/reachingDef.h line 18
namespace stringify { namespace ReachingDef {
    /** Convert ReachingDef::Type enum constant to a string. */
    const char* Type(long);

    /** Convert ReachingDef::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyReachingDefType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 52
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    const char* ScopeIdentifier_Enum(long);

    /** Convert MidLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    std::string ScopeIdentifier_Enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsScopeIdentifier_Enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 66
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    const char* PlacementPosition_Enum(long);

    /** Convert MidLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    std::string PlacementPosition_Enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsPlacementPosition_Enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 79
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    const char* IntermediateFileStringPosition_Enum(long);

    /** Convert MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    std::string IntermediateFileStringPosition_Enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsIntermediateFileStringPosition_Enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 141
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    const char* ScopeIdentifier_Enum(long);

    /** Convert HighLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    std::string ScopeIdentifier_Enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsScopeIdentifier_Enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 162
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    const char* PlacementPosition_Enum(long);

    /** Convert HighLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    std::string PlacementPosition_Enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsPlacementPosition_Enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 176
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    const char* IntermediateFileStringPosition_Enum(long);

    /** Convert HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    std::string IntermediateFileStringPosition_Enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsIntermediateFileStringPosition_Enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/KLT/include/KLT/RTL/tile.h line 7
namespace stringify { namespace klt_tile_desc_t {
    /** Convert klt_tile_desc_t::tile_kind_e enum constant to a string. */
    const char* tile_kind_e(long);

    /** Convert klt_tile_desc_t::tile_kind_e enum constant to a string. */
    std::string tile_kind_e(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_klt_tile_desc_t_tile_kind_e(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/KLT/include/KLT/Core/looptree.hpp line 30
namespace stringify { namespace KLT { namespace LoopTree {
    /** Convert KLT::LoopTree::kind_e enum constant to a string. */
    const char* kind_e(long);

    /** Convert KLT::LoopTree::kind_e enum constant to a string. */
    std::string kind_e(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyKLT_LoopTree_kind_e(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/KLT/include/KLT/Core/descriptor.hpp line 18
namespace stringify { namespace KLT { namespace Descriptor {
    /** Convert KLT::Descriptor::tile_kind_e enum constant to a string. */
    const char* tile_kind_e(long);

    /** Convert KLT::Descriptor::tile_kind_e enum constant to a string. */
    std::string tile_kind_e(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyKLT_Descriptor_tile_kind_e(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstAttributeMechanism.C line 21
namespace stringify {
    /** Convert WarningType enum constant to a string. */
    const char* WarningType(long);

    /** Convert WarningType enum constant to a string. */
    std::string WarningType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyWarningType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstAttributeMechanism.h line 42
namespace stringify { namespace AstAttribute {
    /** Convert AstAttribute::OwnershipPolicy enum constant to a string. */
    const char* OwnershipPolicy(long);

    /** Convert AstAttribute::OwnershipPolicy enum constant to a string. */
    std::string OwnershipPolicy(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstAttributeOwnershipPolicy(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryTaintedFlow.h line 23
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace TaintedFlow {
    /** Convert Rose::BinaryAnalysis::TaintedFlow::Taintedness enum constant to a string. */
    const char* Taintedness(long);

    /** Convert Rose::BinaryAnalysis::TaintedFlow::Taintedness enum constant to a string. */
    std::string Taintedness(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisTaintedFlowTaintedness(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryTaintedFlow.h line 30
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace TaintedFlow {
    /** Convert Rose::BinaryAnalysis::TaintedFlow::Approximation enum constant to a string. */
    const char* Approximation(long);

    /** Convert Rose::BinaryAnalysis::TaintedFlow::Approximation enum constant to a string. */
    std::string Approximation(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisTaintedFlowApproximation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySymbolicExprParser.h line 43
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExprParser { namespace Token {
    /** Convert Rose::BinaryAnalysis::SymbolicExprParser::Token::Type enum constant to a string. */
    const char* Type(long);

    /** Convert Rose::BinaryAnalysis::SymbolicExprParser::Token::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprParserTokenType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryReachability.h line 19
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Reachability {
    /** Convert Rose::BinaryAnalysis::Reachability::Reason enum constant to a string. */
    const char* Reason(long);

    /** Convert Rose::BinaryAnalysis::Reachability::Reason enum constant to a string. */
    std::string Reason(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisReachabilityReason(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySymbolicExpr.h line 56
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Operator enum constant to a string. */
    const char* Operator(long);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Operator enum constant to a string. */
    std::string Operator(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprOperator(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySymbolicExpr.h line 129
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr { namespace Formatter {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Formatter::ShowComments enum constant to a string. */
    const char* ShowComments(long);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Formatter::ShowComments enum constant to a string. */
    std::string ShowComments(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprFormatterShowComments(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySymbolicExpr.h line 149
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::VisitAction enum constant to a string. */
    const char* VisitAction(long);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::VisitAction enum constant to a string. */
    std::string VisitAction(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprVisitAction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySymbolicExpr.h line 944
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr { namespace Leaf {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Leaf::LeafType enum constant to a string. */
    const char* LeafType(long);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Leaf::LeafType enum constant to a string. */
    std::string LeafType(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprLeafLeafType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFunctionSimilarity.h line 70
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FunctionSimilarity {
    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::CValKind enum constant to a string. */
    const char* CValKind(long);

    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::CValKind enum constant to a string. */
    std::string CValKind(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFunctionSimilarityCValKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFunctionSimilarity.h line 82
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FunctionSimilarity {
    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::Statistic enum constant to a string. */
    const char* Statistic(long);

    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::Statistic enum constant to a string. */
    std::string Statistic(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFunctionSimilarityStatistic(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFeasiblePath.h line 23
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::SearchMode enum constant to a string. */
    const char* SearchMode(long);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::SearchMode enum constant to a string. */
    std::string SearchMode(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathSearchMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFeasiblePath.h line 26
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::SemanticMemoryParadigm enum constant to a string. */
    const char* SemanticMemoryParadigm(long);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::SemanticMemoryParadigm enum constant to a string. */
    std::string SemanticMemoryParadigm(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathSemanticMemoryParadigm(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFeasiblePath.h line 32
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::IoMode enum constant to a string. */
    const char* IoMode(long);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::IoMode enum constant to a string. */
    std::string IoMode(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathIoMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFeasiblePath.h line 35
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::MayOrMust enum constant to a string. */
    const char* MayOrMust(long);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::MayOrMust enum constant to a string. */
    std::string MayOrMust(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathMayOrMust(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryFeasiblePath.h line 102
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath { namespace PathProcessor {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::PathProcessor::Action enum constant to a string. */
    const char* Action(long);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::PathProcessor::Action enum constant to a string. */
    std::string Action(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathPathProcessorAction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryString.h line 194
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Strings {
    /** Convert Rose::BinaryAnalysis::Strings::State enum constant to a string. */
    const char* State(long);

    /** Convert Rose::BinaryAnalysis::Strings::State enum constant to a string. */
    std::string State(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisStringsState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySmtSolver.h line 42
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SmtSolver {
    /** Convert Rose::BinaryAnalysis::SmtSolver::LinkMode enum constant to a string. */
    const char* LinkMode(long);

    /** Convert Rose::BinaryAnalysis::SmtSolver::LinkMode enum constant to a string. */
    std::string LinkMode(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSmtSolverLinkMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySmtSolver.h line 54
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SmtSolver {
    /** Convert Rose::BinaryAnalysis::SmtSolver::Type enum constant to a string. */
    const char* Type(long);

    /** Convert Rose::BinaryAnalysis::SmtSolver::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSmtSolverType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinarySmtSolver.h line 78
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SmtSolver {
    /** Convert Rose::BinaryAnalysis::SmtSolver::Satisfiable enum constant to a string. */
    const char* Satisfiable(long);

    /** Convert Rose::BinaryAnalysis::SmtSolver::Satisfiable enum constant to a string. */
    std::string Satisfiable(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSmtSolverSatisfiable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCallingConvention.h line 49
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention {
    /** Convert Rose::BinaryAnalysis::CallingConvention::StackParameterOrder enum constant to a string. */
    const char* StackParameterOrder(long);

    /** Convert Rose::BinaryAnalysis::CallingConvention::StackParameterOrder enum constant to a string. */
    std::string StackParameterOrder(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionStackParameterOrder(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCallingConvention.h line 56
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention {
    /** Convert Rose::BinaryAnalysis::CallingConvention::StackDirection enum constant to a string. */
    const char* StackDirection(long);

    /** Convert Rose::BinaryAnalysis::CallingConvention::StackDirection enum constant to a string. */
    std::string StackDirection(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionStackDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCallingConvention.h line 62
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention {
    /** Convert Rose::BinaryAnalysis::CallingConvention::StackCleanup enum constant to a string. */
    const char* StackCleanup(long);

    /** Convert Rose::BinaryAnalysis::CallingConvention::StackCleanup enum constant to a string. */
    std::string StackCleanup(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionStackCleanup(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCallingConvention.h line 86
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention { namespace ParameterLocation {
    /** Convert Rose::BinaryAnalysis::CallingConvention::ParameterLocation::Type enum constant to a string. */
    const char* Type(long);

    /** Convert Rose::BinaryAnalysis::CallingConvention::ParameterLocation::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionParameterLocationType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCodeInserter.h line 12
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Commit {
    /** Convert Rose::BinaryAnalysis::Commit::Boolean enum constant to a string. */
    const char* Boolean(long);

    /** Convert Rose::BinaryAnalysis::Commit::Boolean enum constant to a string. */
    std::string Boolean(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCommitBoolean(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCodeInserter.h line 22
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CodeInserter {
    /** Convert Rose::BinaryAnalysis::CodeInserter::AggregationDirection enum constant to a string. */
    const char* AggregationDirection(long);

    /** Convert Rose::BinaryAnalysis::CodeInserter::AggregationDirection enum constant to a string. */
    std::string AggregationDirection(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCodeInserterAggregationDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCodeInserter.h line 28
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CodeInserter {
    /** Convert Rose::BinaryAnalysis::CodeInserter::NopPadding enum constant to a string. */
    const char* NopPadding(long);

    /** Convert Rose::BinaryAnalysis::CodeInserter::NopPadding enum constant to a string. */
    std::string NopPadding(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCodeInserterNopPadding(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryCodeInserter.h line 52
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CodeInserter {
    /** Convert Rose::BinaryAnalysis::CodeInserter::RelocType enum constant to a string. */
    const char* RelocType(long);

    /** Convert Rose::BinaryAnalysis::CodeInserter::RelocType enum constant to a string. */
    std::string RelocType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCodeInserterRelocType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/DwarfLineMapper.h line 16
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DwarfLineMapper {
    /** Convert Rose::BinaryAnalysis::DwarfLineMapper::Direction enum constant to a string. */
    const char* Direction(long);

    /** Convert Rose::BinaryAnalysis::DwarfLineMapper::Direction enum constant to a string. */
    std::string Direction(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDwarfLineMapperDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/instructionSemantics/BaseSemantics2.h line 393
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace BaseSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::BaseSemantics::InputOutputProperty enum constant to a string. */
    const char* InputOutputProperty(long);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::BaseSemantics::InputOutputProperty enum constant to a string. */
    std::string InputOutputProperty(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2BaseSemanticsInputOutputProperty(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/instructionSemantics/DataFlowSemantics2.h line 35
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace DataFlowSemantics { namespace DataFlowEdge {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DataFlowSemantics::DataFlowEdge::EdgeType enum constant to a string. */
    const char* EdgeType(long);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DataFlowSemantics::DataFlowEdge::EdgeType enum constant to a string. */
    std::string EdgeType(long, const std::string &strip);
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2DataFlowSemanticsDataFlowEdgeEdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/instructionSemantics/SymbolicSemantics2.h line 759
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace SymbolicSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::WritersMode enum constant to a string. */
    const char* WritersMode(long);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::WritersMode enum constant to a string. */
    std::string WritersMode(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsWritersMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/instructionSemantics/SymbolicSemantics2.h line 766
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace SymbolicSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::DefinersMode enum constant to a string. */
    const char* DefinersMode(long);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::DefinersMode enum constant to a string. */
    std::string DefinersMode(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsDefinersMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/instructionSemantics/IntervalSemantics2.C line 650
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace IntervalSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::IntervalSemantics::Carry enum constant to a string. */
    const char* Carry(long);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::IntervalSemantics::Carry enum constant to a string. */
    std::string Carry(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2IntervalSemanticsCarry(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/instructionSemantics/DispatcherX86.h line 175
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace DispatcherX86 {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DispatcherX86::AccessMode enum constant to a string. */
    const char* AccessMode(long);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DispatcherX86::AccessMode enum constant to a string. */
    std::string AccessMode(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2DispatcherX86AccessMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/binaryAnalyses/BinaryMagic.h line 16
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace MagicNumber {
    /** Convert Rose::BinaryAnalysis::MagicNumber::Mechanism enum constant to a string. */
    const char* Mechanism(long);

    /** Convert Rose::BinaryAnalysis::MagicNumber::Mechanism enum constant to a string. */
    std::string Mechanism(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMagicNumberMechanism(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/MatchOperation.h line 42
namespace stringify { namespace MatchStatus {
    /** Convert MatchStatus::PatternMatchMode enum constant to a string. */
    const char* PatternMatchMode(long);

    /** Convert MatchStatus::PatternMatchMode enum constant to a string. */
    std::string PatternMatchMode(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyMatchStatusPatternMatchMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/MatchOperation.h line 43
namespace stringify { namespace MatchStatus {
    /** Convert MatchStatus::CheckNodeMode enum constant to a string. */
    const char* CheckNodeMode(long);

    /** Convert MatchStatus::CheckNodeMode enum constant to a string. */
    std::string CheckNodeMode(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyMatchStatusCheckNodeMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astSnippet/Snippet.h line 319
namespace stringify { namespace Rose { namespace Snippet {
    /** Convert Rose::Snippet::InsertMechanism enum constant to a string. */
    const char* InsertMechanism(long);

    /** Convert Rose::Snippet::InsertMechanism enum constant to a string. */
    std::string InsertMechanism(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySnippetInsertMechanism(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astSnippet/Snippet.h line 329
namespace stringify { namespace Rose { namespace Snippet {
    /** Convert Rose::Snippet::LocalDeclarationPosition enum constant to a string. */
    const char* LocalDeclarationPosition(long);

    /** Convert Rose::Snippet::LocalDeclarationPosition enum constant to a string. */
    std::string LocalDeclarationPosition(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySnippetLocalDeclarationPosition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 100
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::locationInTree enum constant to a string. */
    const char* locationInTree(long);

    /** Convert AstNodeClass::locationInTree enum constant to a string. */
    std::string locationInTree(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstNodeClass_locationInTree(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 106
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::includeExcludeMechanism enum constant to a string. */
    const char* includeExcludeMechanism(long);

    /** Convert AstNodeClass::includeExcludeMechanism enum constant to a string. */
    std::string includeExcludeMechanism(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstNodeClass_includeExcludeMechanism(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 309
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::TypeEvaluation enum constant to a string. */
    const char* TypeEvaluation(long);

    /** Convert AstNodeClass::TypeEvaluation enum constant to a string. */
    std::string TypeEvaluation(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstNodeClassTypeEvaluation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 93
namespace stringify {
    /** Convert ConstructParamEnum enum constant to a string. */
    const char* ConstructParamEnum(long);

    /** Convert ConstructParamEnum enum constant to a string. */
    std::string ConstructParamEnum(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyConstructParamEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 98
namespace stringify {
    /** Convert BuildAccessEnum enum constant to a string. */
    const char* BuildAccessEnum(long);

    /** Convert BuildAccessEnum enum constant to a string. */
    std::string BuildAccessEnum(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyBuildAccessEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 106
namespace stringify {
    /** Convert CopyConfigEnum enum constant to a string. */
    const char* CopyConfigEnum(long);

    /** Convert CopyConfigEnum enum constant to a string. */
    std::string CopyConfigEnum(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyCopyConfigEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 127
namespace stringify {
    /** Convert TraversalEnum enum constant to a string. */
    const char* TraversalEnum(long);

    /** Convert TraversalEnum enum constant to a string. */
    std::string TraversalEnum(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyTraversalEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 132
namespace stringify {
    /** Convert DeleteEnum enum constant to a string. */
    const char* DeleteEnum(long);

    /** Convert DeleteEnum enum constant to a string. */
    std::string DeleteEnum(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyDeleteEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 2587
namespace stringify { namespace SgAsmRiscOperation {
    /** Convert SgAsmRiscOperation::RiscOperator enum constant to a string. */
    const char* RiscOperator(long);

    /** Convert SgAsmRiscOperation::RiscOperator enum constant to a string. */
    std::string RiscOperator(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmRiscOperationRiscOperator(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3415
namespace stringify { namespace SgAsmFunction {
    /** Convert SgAsmFunction::MayReturn enum constant to a string. */
    const char* MayReturn(long);

    /** Convert SgAsmFunction::MayReturn enum constant to a string. */
    std::string MayReturn(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmFunctionMayReturn(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3425
namespace stringify { namespace SgAsmFunction {
    /** Convert SgAsmFunction::FunctionReason enum constant to a string. */
    const char* FunctionReason(long);

    /** Convert SgAsmFunction::FunctionReason enum constant to a string. */
    std::string FunctionReason(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmFunctionFunctionReason(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3580
namespace stringify { namespace SgAsmFunction {
    /** Convert SgAsmFunction::function_kind_enum enum constant to a string. */
    const char* function_kind_enum(long);

    /** Convert SgAsmFunction::function_kind_enum enum constant to a string. */
    std::string function_kind_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmFunction_function_kind_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3817
namespace stringify { namespace SgAsmBlock {
    /** Convert SgAsmBlock::Reason enum constant to a string. */
    const char* Reason(long);

    /** Convert SgAsmBlock::Reason enum constant to a string. */
    std::string Reason(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmBlockReason(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 4668
namespace stringify { namespace SgAsmElfFileHeader {
    /** Convert SgAsmElfFileHeader::ObjectType enum constant to a string. */
    const char* ObjectType(long);

    /** Convert SgAsmElfFileHeader::ObjectType enum constant to a string. */
    std::string ObjectType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfFileHeaderObjectType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5088
namespace stringify { namespace SgAsmElfSectionTableEntry {
    /** Convert SgAsmElfSectionTableEntry::SectionType enum constant to a string. */
    const char* SectionType(long);

    /** Convert SgAsmElfSectionTableEntry::SectionType enum constant to a string. */
    std::string SectionType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfSectionTableEntrySectionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5115
namespace stringify { namespace SgAsmElfSectionTableEntry {
    /** Convert SgAsmElfSectionTableEntry::SectionFlags enum constant to a string. */
    const char* SectionFlags(long);

    /** Convert SgAsmElfSectionTableEntry::SectionFlags enum constant to a string. */
    std::string SectionFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfSectionTableEntrySectionFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5517
namespace stringify { namespace SgAsmElfSegmentTableEntry {
    /** Convert SgAsmElfSegmentTableEntry::SegmentType enum constant to a string. */
    const char* SegmentType(long);

    /** Convert SgAsmElfSegmentTableEntry::SegmentType enum constant to a string. */
    std::string SegmentType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfSegmentTableEntrySegmentType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5545
namespace stringify { namespace SgAsmElfSegmentTableEntry {
    /** Convert SgAsmElfSegmentTableEntry::SegmentFlags enum constant to a string. */
    const char* SegmentFlags(long);

    /** Convert SgAsmElfSegmentTableEntry::SegmentFlags enum constant to a string. */
    std::string SegmentFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfSegmentTableEntrySegmentFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5891
namespace stringify { namespace SgAsmElfSymbol {
    /** Convert SgAsmElfSymbol::ElfSymBinding enum constant to a string. */
    const char* ElfSymBinding(long);

    /** Convert SgAsmElfSymbol::ElfSymBinding enum constant to a string. */
    std::string ElfSymBinding(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfSymbolElfSymBinding(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5897
namespace stringify { namespace SgAsmElfSymbol {
    /** Convert SgAsmElfSymbol::ElfSymType enum constant to a string. */
    const char* ElfSymType(long);

    /** Convert SgAsmElfSymbol::ElfSymType enum constant to a string. */
    std::string ElfSymType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfSymbolElfSymType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 7299
namespace stringify { namespace SgAsmElfRelocEntry {
    /** Convert SgAsmElfRelocEntry::RelocType enum constant to a string. */
    const char* RelocType(long);

    /** Convert SgAsmElfRelocEntry::RelocType enum constant to a string. */
    std::string RelocType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfRelocEntryRelocType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 7656
namespace stringify { namespace SgAsmElfDynamicEntry {
    /** Convert SgAsmElfDynamicEntry::EntryType enum constant to a string. */
    const char* EntryType(long);

    /** Convert SgAsmElfDynamicEntry::EntryType enum constant to a string. */
    std::string EntryType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmElfDynamicEntryEntryType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10155
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::HeaderFlags enum constant to a string. */
    const char* HeaderFlags(long);

    /** Convert SgAsmPEFileHeader::HeaderFlags enum constant to a string. */
    std::string HeaderFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderHeaderFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10164
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::Subsystem enum constant to a string. */
    const char* Subsystem(long);

    /** Convert SgAsmPEFileHeader::Subsystem enum constant to a string. */
    std::string Subsystem(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderSubsystem(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10174
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::DLLFlags enum constant to a string. */
    const char* DLLFlags(long);

    /** Convert SgAsmPEFileHeader::DLLFlags enum constant to a string. */
    std::string DLLFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderDLLFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10183
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::PairPurpose enum constant to a string. */
    const char* PairPurpose(long);

    /** Convert SgAsmPEFileHeader::PairPurpose enum constant to a string. */
    std::string PairPurpose(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderPairPurpose(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 11964
namespace stringify { namespace SgAsmPESectionTableEntry {
    /** Convert SgAsmPESectionTableEntry::PESectionFlags enum constant to a string. */
    const char* PESectionFlags(long);

    /** Convert SgAsmPESectionTableEntry::PESectionFlags enum constant to a string. */
    std::string PESectionFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmPESectionTableEntryPESectionFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 13992
namespace stringify { namespace SgAsmGenericSymbol {
    /** Convert SgAsmGenericSymbol::SymbolDefState enum constant to a string. */
    const char* SymbolDefState(long);

    /** Convert SgAsmGenericSymbol::SymbolDefState enum constant to a string. */
    std::string SymbolDefState(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmGenericSymbolSymbolDefState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 13999
namespace stringify { namespace SgAsmGenericSymbol {
    /** Convert SgAsmGenericSymbol::SymbolType enum constant to a string. */
    const char* SymbolType(long);

    /** Convert SgAsmGenericSymbol::SymbolType enum constant to a string. */
    std::string SymbolType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmGenericSymbolSymbolType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 14013
namespace stringify { namespace SgAsmGenericSymbol {
    /** Convert SgAsmGenericSymbol::SymbolBinding enum constant to a string. */
    const char* SymbolBinding(long);

    /** Convert SgAsmGenericSymbol::SymbolBinding enum constant to a string. */
    std::string SymbolBinding(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmGenericSymbolSymbolBinding(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 14546
namespace stringify { namespace SgAsmGenericSection {
    /** Convert SgAsmGenericSection::SectionPurpose enum constant to a string. */
    const char* SectionPurpose(long);

    /** Convert SgAsmGenericSection::SectionPurpose enum constant to a string. */
    std::string SectionPurpose(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmGenericSectionSectionPurpose(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15383
namespace stringify { namespace SgAsmGenericFile {
    /** Convert SgAsmGenericFile::AddressSpace enum constant to a string. */
    const char* AddressSpace(long);

    /** Convert SgAsmGenericFile::AddressSpace enum constant to a string. */
    std::string AddressSpace(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmGenericFileAddressSpace(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15390
namespace stringify { namespace SgAsmGenericFile {
    /** Convert SgAsmGenericFile::Elasticity enum constant to a string. */
    const char* Elasticity(long);

    /** Convert SgAsmGenericFile::Elasticity enum constant to a string. */
    std::string Elasticity(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmGenericFileElasticity(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15796
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::ExecFamily enum constant to a string. */
    const char* ExecFamily(long);

    /** Convert SgAsmExecutableFileFormat::ExecFamily enum constant to a string. */
    std::string ExecFamily(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatExecFamily(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15807
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::ExecABI enum constant to a string. */
    const char* ExecABI(long);

    /** Convert SgAsmExecutableFileFormat::ExecABI enum constant to a string. */
    std::string ExecABI(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatExecABI(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15831
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::InsSetArchitecture enum constant to a string. */
    const char* InsSetArchitecture(long);

    /** Convert SgAsmExecutableFileFormat::InsSetArchitecture enum constant to a string. */
    std::string InsSetArchitecture(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatInsSetArchitecture(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 16010
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::ExecPurpose enum constant to a string. */
    const char* ExecPurpose(long);

    /** Convert SgAsmExecutableFileFormat::ExecPurpose enum constant to a string. */
    std::string ExecPurpose(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatExecPurpose(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/GraphTraversal.h line 39
namespace stringify { namespace Sawyer { namespace Container { namespace Algorithm {
    /** Convert Sawyer::Container::Algorithm::TraversalEvent enum constant to a string. */
    const char* TraversalEvent(long);

    /** Convert Sawyer::Container::Algorithm::TraversalEvent enum constant to a string. */
    std::string TraversalEvent(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerContainerAlgorithmTraversalEvent(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Access.h line 19
namespace stringify { namespace Sawyer { namespace Access {
    /** Convert Sawyer::Access::Access enum constant to a string. */
    const char* Access(long);

    /** Convert Sawyer::Access::Access enum constant to a string. */
    std::string Access(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerAccessAccess(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 170
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::SortOrder enum constant to a string. */
    const char* SortOrder(long);

    /** Convert Sawyer::CommandLine::SortOrder enum constant to a string. */
    std::string SortOrder(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerCommandLineSortOrder(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 183
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::Canonical enum constant to a string. */
    const char* Canonical(long);

    /** Convert Sawyer::CommandLine::Canonical enum constant to a string. */
    std::string Canonical(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerCommandLineCanonical(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 191
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::ShowGroupName enum constant to a string. */
    const char* ShowGroupName(long);

    /** Convert Sawyer::CommandLine::ShowGroupName enum constant to a string. */
    std::string ShowGroupName(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerCommandLineShowGroupName(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 199
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::SwitchSkipping enum constant to a string. */
    const char* SwitchSkipping(long);

    /** Convert Sawyer::CommandLine::SwitchSkipping enum constant to a string. */
    std::string SwitchSkipping(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerCommandLineSwitchSkipping(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 1929
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::WhichValue enum constant to a string. */
    const char* WhichValue(long);

    /** Convert Sawyer::CommandLine::WhichValue enum constant to a string. */
    std::string WhichValue(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerCommandLineWhichValue(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 2925
namespace stringify { namespace Sawyer { namespace CommandLine { namespace Parser {
    /** Convert Sawyer::CommandLine::Parser::GroupingFlags enum constant to a string. */
    const char* GroupingFlags(long);

    /** Convert Sawyer::CommandLine::Parser::GroupingFlags enum constant to a string. */
    std::string GroupingFlags(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerCommandLineParserGroupingFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/DocumentMarkup.h line 42
namespace stringify { namespace Sawyer { namespace Document { namespace Markup {
    /** Convert Sawyer::Document::Markup::TokenType enum constant to a string. */
    const char* TokenType(long);

    /** Convert Sawyer::Document::Markup::TokenType enum constant to a string. */
    std::string TokenType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerDocumentMarkupTokenType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Clexer.h line 25
namespace stringify { namespace Sawyer { namespace Language { namespace Clexer {
    /** Convert Sawyer::Language::Clexer::TokenType enum constant to a string. */
    const char* TokenType(long);

    /** Convert Sawyer::Language::Clexer::TokenType enum constant to a string. */
    std::string TokenType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerLanguageClexerTokenType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/GraphAlgorithm.h line 338
namespace stringify { namespace Sawyer { namespace Container { namespace Algorithm {
    /** Convert Sawyer::Container::Algorithm::CsiNextAction enum constant to a string. */
    const char* CsiNextAction(long);

    /** Convert Sawyer::Container::Algorithm::CsiNextAction enum constant to a string. */
    std::string CsiNextAction(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerContainerAlgorithmCsiNextAction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Graph.h line 636
namespace stringify { namespace Sawyer { namespace Container { namespace Graph {
    /** Convert Sawyer::Container::Graph::EdgePhase enum constant to a string. */
    const char* EdgePhase(long);

    /** Convert Sawyer::Container::Graph::EdgePhase enum constant to a string. */
    std::string EdgePhase(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerContainerGraphEdgePhase(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 310
namespace stringify { namespace Sawyer { namespace Message {
    /** Convert Sawyer::Message::Importance enum constant to a string. */
    const char* Importance(long);

    /** Convert Sawyer::Message::Importance enum constant to a string. */
    std::string Importance(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerMessageImportance(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 340
namespace stringify { namespace Sawyer { namespace Message {
    /** Convert Sawyer::Message::AnsiColor enum constant to a string. */
    const char* AnsiColor(long);

    /** Convert Sawyer::Message::AnsiColor enum constant to a string. */
    std::string AnsiColor(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifySawyerMessageAnsiColor(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 988
namespace stringify { namespace Sawyer { namespace Message { namespace Prefix {
    /** Convert Sawyer::Message::Prefix::When enum constant to a string. */
    const char* When(long);

    /** Convert Sawyer::Message::Prefix::When enum constant to a string. */
    std::string When(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifySawyerMessagePrefixWhen(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/stringSupport/FileUtility.h line 25
namespace stringify { namespace Rose { namespace StringUtility {
    /** Convert Rose::StringUtility::OSType enum constant to a string. */
    const char* OSType(long);

    /** Convert Rose::StringUtility::OSType enum constant to a string. */
    std::string OSType(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyStringUtilityOSType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/stringSupport/FileUtility.h line 150
namespace stringify { namespace Rose { namespace StringUtility {
    /** Convert Rose::StringUtility::FileNameLocation enum constant to a string. */
    const char* FileNameLocation(long);

    /** Convert Rose::StringUtility::FileNameLocation enum constant to a string. */
    std::string FileNameLocation(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyStringUtilityFileNameLocation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/sageInterface/sageBuilder.h line 138
namespace stringify { namespace SageBuilder {
    /** Convert SageBuilder::SourcePositionClassification enum constant to a string. */
    const char* SourcePositionClassification(long);

    /** Convert SageBuilder::SourcePositionClassification enum constant to a string. */
    std::string SourcePositionClassification(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySageBuilderSourcePositionClassification(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/OmpAttribute.h line 31
namespace stringify { namespace OmpSupport {
    /** Convert OmpSupport::omp_construct_enum enum constant to a string. */
    const char* omp_construct_enum(long);

    /** Convert OmpSupport::omp_construct_enum enum constant to a string. */
    std::string omp_construct_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyOmpSupport_omp_construct_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 28
namespace stringify {
    /** Convert omp_lock_hint_t enum constant to a string. */
    const char* omp_lock_hint_t(long);

    /** Convert omp_lock_hint_t enum constant to a string. */
    std::string omp_lock_hint_t(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_omp_lock_hint_t(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 44
namespace stringify {
    /** Convert omp_sched_t enum constant to a string. */
    const char* omp_sched_t(long);

    /** Convert omp_sched_t enum constant to a string. */
    std::string omp_sched_t(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_omp_sched_t(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 55
namespace stringify {
    /** Convert omp_proc_bind_t enum constant to a string. */
    const char* omp_proc_bind_t(long);

    /** Convert omp_proc_bind_t enum constant to a string. */
    std::string omp_proc_bind_t(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_omp_proc_bind_t(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 25
namespace stringify { namespace AstAttributeDOT {
    /** Convert AstAttributeDOT::DOTStyles enum constant to a string. */
    const char* DOTStyles(long);

    /** Convert AstAttributeDOT::DOTStyles enum constant to a string. */
    std::string DOTStyles(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstAttributeDOT_DOTStyles(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 90
namespace stringify { namespace DOTGraphNode {
    /** Convert DOTGraphNode::DOTShapeTypes enum constant to a string. */
    const char* DOTShapeTypes(long);

    /** Convert DOTGraphNode::DOTShapeTypes enum constant to a string. */
    std::string DOTShapeTypes(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyDOTGraphNodeDOTShapeTypes(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 137
namespace stringify { namespace DOTGraphEdge {
    /** Convert DOTGraphEdge::DOTArrowTypes enum constant to a string. */
    const char* DOTArrowTypes(long);

    /** Convert DOTGraphEdge::DOTArrowTypes enum constant to a string. */
    std::string DOTArrowTypes(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyDOTGraphEdgeDOTArrowTypes(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/astGraph.h line 12
namespace stringify { namespace AST_Graph {
    /** Convert AST_Graph::pointerHandling enum constant to a string. */
    const char* pointerHandling(long);

    /** Convert AST_Graph::pointerHandling enum constant to a string. */
    std::string pointerHandling(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAST_Graph_pointerHandling(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/astGraph.h line 19
namespace stringify { namespace AST_Graph {
    /** Convert AST_Graph::traversalType enum constant to a string. */
    const char* traversalType(long);

    /** Convert AST_Graph::traversalType enum constant to a string. */
    std::string traversalType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAST_Graph_traversalType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 126
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(long);

    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyPreprocessingInfoRelativePositionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 147
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::DirectiveType enum constant to a string. */
    const char* DirectiveType(long);

    /** Convert PreprocessingInfo::DirectiveType enum constant to a string. */
    std::string DirectiveType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyPreprocessingInfoDirectiveType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 511
namespace stringify { namespace ROSEAttributesList {
    /** Convert ROSEAttributesList::languageTypeEnum enum constant to a string. */
    const char* languageTypeEnum(long);

    /** Convert ROSEAttributesList::languageTypeEnum enum constant to a string. */
    std::string languageTypeEnum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSEAttributesList_languageTypeEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/virtualCFG/virtualCFG.h line 47
namespace stringify { namespace VirtualCFG {
    /** Convert VirtualCFG::EdgeConditionKind enum constant to a string. */
    const char* EdgeConditionKind(long);

    /** Convert VirtualCFG::EdgeConditionKind enum constant to a string. */
    std::string EdgeConditionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyVirtualCFG_EdgeConditionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/virtualCFG/virtualBinCFG.h line 15
namespace stringify { namespace VirtualBinCFG {
    /** Convert VirtualBinCFG::EdgeConditionKind enum constant to a string. */
    const char* EdgeConditionKind(long);

    /** Convert VirtualBinCFG::EdgeConditionKind enum constant to a string. */
    std::string EdgeConditionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyVirtualBinCFG_EdgeConditionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 12
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::whitespace enum constant to a string. */
    const char* whitespace(long);

    /** Convert ROSE_token_ids::whitespace enum constant to a string. */
    std::string whitespace(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_token_ids_whitespace(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 21
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(long);

    /** Convert ROSE_token_ids::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_keywords(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 159
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_alternate_tok enum constant to a string. */
    const char* ROSE_C_CXX_alternate_tok(long);

    /** Convert ROSE_token_ids::ROSE_C_CXX_alternate_tok enum constant to a string. */
    std::string ROSE_C_CXX_alternate_tok(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_alternate_tok(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 171
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_Additional_Info enum constant to a string. */
    const char* ROSE_C_CXX_Additional_Info(long);

    /** Convert ROSE_token_ids::ROSE_C_CXX_Additional_Info enum constant to a string. */
    std::string ROSE_C_CXX_Additional_Info(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_Additional_Info(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/ECJ_ROSE_Connection/JavaParserActionROSE.C line 4128
namespace stringify {
    /** Convert ops enum constant to a string. */
    const char* ops(long);

    /** Convert ops enum constant to a string. */
    std::string ops(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_ops(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Cobol_ROSE_Connection/Cobol_to_ROSE_translation.h line 8
namespace stringify { namespace Cobol_ROSE_Translation {
    /** Convert Cobol_ROSE_Translation::ProgramSpec enum constant to a string. */
    const char* ProgramSpec(long);

    /** Convert Cobol_ROSE_Translation::ProgramSpec enum constant to a string. */
    std::string ProgramSpec(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCobol_ROSE_TranslationProgramSpec(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Cobol_ROSE_Connection/Cobol_to_ROSE_translation.h line 21
namespace stringify { namespace Cobol_ROSE_Translation {
    /** Convert Cobol_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(long);

    /** Convert Cobol_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCobol_ROSE_TranslationExpressionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/statements.h line 53
namespace stringify {
    /** Convert a_control_flow_descr_kind_tag enum constant to a string. */
    const char* a_control_flow_descr_kind_tag(long);

    /** Convert a_control_flow_descr_kind_tag enum constant to a string. */
    std::string a_control_flow_descr_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_control_flow_descr_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.cpp line 1030
namespace stringify { namespace a_type_wrapper {
    /** Convert a_type_wrapper::a_kind enum constant to a string. */
    const char* a_kind(long);

    /** Convert a_type_wrapper::a_kind enum constant to a string. */
    std::string a_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_a_type_wrapper_a_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.cpp line 1291
namespace stringify { namespace a_class_type_wrapper {
    /** Convert a_class_type_wrapper::a_class_kind enum constant to a string. */
    const char* a_class_kind(long);

    /** Convert a_class_type_wrapper::a_class_kind enum constant to a string. */
    std::string a_class_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_a_class_type_wrapper_a_class_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.cpp line 1412
namespace stringify { namespace a_type_indirection {
    /** Convert a_type_indirection::an_indirection_kind enum constant to a string. */
    const char* an_indirection_kind(long);

    /** Convert a_type_indirection::an_indirection_kind enum constant to a string. */
    std::string an_indirection_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_a_type_indirection_an_indirection_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.cpp line 1563
namespace stringify { namespace an_array_type_wrapper {
    /** Convert an_array_type_wrapper::an_array_kind enum constant to a string. */
    const char* an_array_kind(long);

    /** Convert an_array_type_wrapper::an_array_kind enum constant to a string. */
    std::string an_array_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_an_array_type_wrapper_an_array_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.cpp line 3796
namespace stringify { namespace an_accessibility {
    /** Convert an_accessibility::access_kind enum constant to a string. */
    const char* access_kind(long);

    /** Convert an_accessibility::access_kind enum constant to a string. */
    std::string access_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_an_accessibility_access_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.cpp line 3835
namespace stringify { namespace a_type_definition {
    /** Convert a_type_definition::a_type_definition_kind enum constant to a string. */
    const char* a_type_definition_kind(long);

    /** Convert a_type_definition::a_type_definition_kind enum constant to a string. */
    std::string a_type_definition_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringify_a_type_definition_a_type_definition_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/lower_il.h line 402
namespace stringify {
    /** Convert an_insert_location_kind enum constant to a string. */
    const char* an_insert_location_kind(long);

    /** Convert an_insert_location_kind enum constant to a string. */
    std::string an_insert_location_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_insert_location_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il.h line 81
namespace stringify {
    /** Convert a_type_info_kind_tag enum constant to a string. */
    const char* a_type_info_kind_tag(long);

    /** Convert a_type_info_kind_tag enum constant to a string. */
    std::string a_type_info_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_type_info_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/host_envir.h line 2199
namespace stringify {
    /** Convert a_unicode_source_kind_tag enum constant to a string. */
    const char* a_unicode_source_kind_tag(long);

    /** Convert a_unicode_source_kind_tag enum constant to a string. */
    std::string a_unicode_source_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_unicode_source_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/host_envir.h line 3479
namespace stringify {
    /** Convert a_predef_macro_mode enum constant to a string. */
    const char* a_predef_macro_mode(long);

    /** Convert a_predef_macro_mode enum constant to a string. */
    std::string a_predef_macro_mode(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_predef_macro_mode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/decls.c line 15092
namespace stringify {
    /** Convert an_end_of_decl_action enum constant to a string. */
    const char* an_end_of_decl_action(long);

    /** Convert an_end_of_decl_action enum constant to a string. */
    std::string an_end_of_decl_action(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_end_of_decl_action(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/exprutil.h line 99
namespace stringify {
    /** Convert an_expression_kind_tag enum constant to a string. */
    const char* an_expression_kind_tag(long);

    /** Convert an_expression_kind_tag enum constant to a string. */
    std::string an_expression_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_expression_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/exprutil.h line 136
namespace stringify {
    /** Convert a_cast_source_form enum constant to a string. */
    const char* a_cast_source_form(long);

    /** Convert a_cast_source_form enum constant to a string. */
    std::string a_cast_source_form(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_cast_source_form(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/exprutil.h line 155
namespace stringify {
    /** Convert a_type_class_kind enum constant to a string. */
    const char* a_type_class_kind(long);

    /** Convert a_type_class_kind enum constant to a string. */
    std::string a_type_class_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_type_class_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/exprutil.h line 237
namespace stringify {
    /** Convert an_operand_kind_tag enum constant to a string. */
    const char* an_operand_kind_tag(long);

    /** Convert an_operand_kind_tag enum constant to a string. */
    std::string an_operand_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_operand_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/exprutil.h line 283
namespace stringify {
    /** Convert an_operand_state_tag enum constant to a string. */
    const char* an_operand_state_tag(long);

    /** Convert an_operand_state_tag enum constant to a string. */
    std::string an_operand_state_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_operand_state_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/sys_predef.h line 38
namespace stringify {
    /** Convert a_multiversion_arch_kind_tag enum constant to a string. */
    const char* a_multiversion_arch_kind_tag(long);

    /** Convert a_multiversion_arch_kind_tag enum constant to a string. */
    std::string a_multiversion_arch_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_multiversion_arch_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/mem_manage.h line 399
namespace stringify {
    /** Convert a_function_number_tag enum constant to a string. */
    const char* a_function_number_tag(long);

    /** Convert a_function_number_tag enum constant to a string. */
    std::string a_function_number_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_function_number_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/pragma.h line 49
namespace stringify {
    /** Convert a_pragma_binding_kind enum constant to a string. */
    const char* a_pragma_binding_kind(long);

    /** Convert a_pragma_binding_kind enum constant to a string. */
    std::string a_pragma_binding_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_pragma_binding_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/symbol_tbl.h line 422
namespace stringify {
    /** Convert a_symbol_kind_tag enum constant to a string. */
    const char* a_symbol_kind_tag(long);

    /** Convert a_symbol_kind_tag enum constant to a string. */
    std::string a_symbol_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_symbol_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/symbol_tbl.h line 697
namespace stringify {
    /** Convert a_dependent_type_fixup_kind_tag enum constant to a string. */
    const char* a_dependent_type_fixup_kind_tag(long);

    /** Convert a_dependent_type_fixup_kind_tag enum constant to a string. */
    std::string a_dependent_type_fixup_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_dependent_type_fixup_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/symbol_tbl.h line 3691
namespace stringify {
    /** Convert a_cli_operator_kind_tag enum constant to a string. */
    const char* a_cli_operator_kind_tag(long);

    /** Convert a_cli_operator_kind_tag enum constant to a string. */
    std::string a_cli_operator_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_cli_operator_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/symbol_tbl.h line 4495
namespace stringify {
    /** Convert a_cli_symbol_kind_tag enum constant to a string. */
    const char* a_cli_symbol_kind_tag(long);

    /** Convert a_cli_symbol_kind_tag enum constant to a string. */
    std::string a_cli_symbol_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_cli_symbol_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/error.c line 115
namespace stringify {
    /** Convert a_diagnostic_category_kind_tag enum constant to a string. */
    const char* a_diagnostic_category_kind_tag(long);

    /** Convert a_diagnostic_category_kind_tag enum constant to a string. */
    std::string a_diagnostic_category_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_diagnostic_category_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/error.c line 158
namespace stringify {
    /** Convert a_message_segment_kind_tag enum constant to a string. */
    const char* a_message_segment_kind_tag(long);

    /** Convert a_message_segment_kind_tag enum constant to a string. */
    std::string a_message_segment_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_message_segment_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/expr.h line 84
namespace stringify {
    /** Convert an_init_component_kind_tag enum constant to a string. */
    const char* an_init_component_kind_tag(long);

    /** Convert an_init_component_kind_tag enum constant to a string. */
    std::string an_init_component_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_init_component_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 405
namespace stringify {
    /** Convert an_access_specifier_tag enum constant to a string. */
    const char* an_access_specifier_tag(long);

    /** Convert an_access_specifier_tag enum constant to a string. */
    std::string an_access_specifier_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_access_specifier_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 425
namespace stringify {
    /** Convert an_assembly_visibility_tag enum constant to a string. */
    const char* an_assembly_visibility_tag(long);

    /** Convert an_assembly_visibility_tag enum constant to a string. */
    std::string an_assembly_visibility_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_assembly_visibility_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 444
namespace stringify {
    /** Convert a_name_linkage_kind_tag enum constant to a string. */
    const char* a_name_linkage_kind_tag(long);

    /** Convert a_name_linkage_kind_tag enum constant to a string. */
    std::string a_name_linkage_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_name_linkage_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 1503
namespace stringify {
    /** Convert an_element_position_kind_tag enum constant to a string. */
    const char* an_element_position_kind_tag(long);

    /** Convert an_element_position_kind_tag enum constant to a string. */
    std::string an_element_position_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_element_position_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 1614
namespace stringify {
    /** Convert an_ELF_visibility_kind_tag enum constant to a string. */
    const char* an_ELF_visibility_kind_tag(long);

    /** Convert an_ELF_visibility_kind_tag enum constant to a string. */
    std::string an_ELF_visibility_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_ELF_visibility_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 2208
namespace stringify {
    /** Convert an_attribute_arg_kind_tag enum constant to a string. */
    const char* an_attribute_arg_kind_tag(long);

    /** Convert an_attribute_arg_kind_tag enum constant to a string. */
    std::string an_attribute_arg_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_attribute_arg_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 2272
namespace stringify {
    /** Convert an_attribute_family_tag enum constant to a string. */
    const char* an_attribute_family_tag(long);

    /** Convert an_attribute_family_tag enum constant to a string. */
    std::string an_attribute_family_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_attribute_family_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 2297
namespace stringify {
    /** Convert an_attribute_location_tag enum constant to a string. */
    const char* an_attribute_location_tag(long);

    /** Convert an_attribute_location_tag enum constant to a string. */
    std::string an_attribute_location_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_attribute_location_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 2362
namespace stringify {
    /** Convert an_attribute_kind_tag enum constant to a string. */
    const char* an_attribute_kind_tag(long);

    /** Convert an_attribute_kind_tag enum constant to a string. */
    std::string an_attribute_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_attribute_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 2926
namespace stringify {
    /** Convert a_constant_repr_kind_tag enum constant to a string. */
    const char* a_constant_repr_kind_tag(long);

    /** Convert a_constant_repr_kind_tag enum constant to a string. */
    std::string a_constant_repr_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_constant_repr_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 2975
namespace stringify {
    /** Convert an_address_base_kind_tag enum constant to a string. */
    const char* an_address_base_kind_tag(long);

    /** Convert an_address_base_kind_tag enum constant to a string. */
    std::string an_address_base_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_address_base_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 3222
namespace stringify {
    /** Convert a_dynamic_init_kind_tag enum constant to a string. */
    const char* a_dynamic_init_kind_tag(long);

    /** Convert a_dynamic_init_kind_tag enum constant to a string. */
    std::string a_dynamic_init_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_dynamic_init_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 3617
namespace stringify {
    /** Convert a_template_param_constant_kind_tag enum constant to a string. */
    const char* a_template_param_constant_kind_tag(long);

    /** Convert a_template_param_constant_kind_tag enum constant to a string. */
    std::string a_template_param_constant_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_template_param_constant_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 3753
namespace stringify {
    /** Convert a_character_kind_tag enum constant to a string. */
    const char* a_character_kind_tag(long);

    /** Convert a_character_kind_tag enum constant to a string. */
    std::string a_character_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_character_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 3784
namespace stringify {
    /** Convert a_special_function_kind_tag enum constant to a string. */
    const char* a_special_function_kind_tag(long);

    /** Convert a_special_function_kind_tag enum constant to a string. */
    std::string a_special_function_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_special_function_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4500
namespace stringify {
    /** Convert a_type_kind_tag enum constant to a string. */
    const char* a_type_kind_tag(long);

    /** Convert a_type_kind_tag enum constant to a string. */
    std::string a_type_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_type_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4548
namespace stringify {
    /** Convert an_integer_kind_tag enum constant to a string. */
    const char* an_integer_kind_tag(long);

    /** Convert an_integer_kind_tag enum constant to a string. */
    std::string an_integer_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_integer_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4638
namespace stringify {
    /** Convert a_fixed_point_precision_tag enum constant to a string. */
    const char* a_fixed_point_precision_tag(long);

    /** Convert a_fixed_point_precision_tag enum constant to a string. */
    std::string a_fixed_point_precision_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_fixed_point_precision_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4670
namespace stringify {
    /** Convert a_float_kind_tag enum constant to a string. */
    const char* a_float_kind_tag(long);

    /** Convert a_float_kind_tag enum constant to a string. */
    std::string a_float_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_float_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4688
namespace stringify {
    /** Convert a_type_mode_kind_tag enum constant to a string. */
    const char* a_type_mode_kind_tag(long);

    /** Convert a_type_mode_kind_tag enum constant to a string. */
    std::string a_type_mode_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_type_mode_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4733
namespace stringify {
    /** Convert an_asm_operand_constraint_kind_tag enum constant to a string. */
    const char* an_asm_operand_constraint_kind_tag(long);

    /** Convert an_asm_operand_constraint_kind_tag enum constant to a string. */
    std::string an_asm_operand_constraint_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_asm_operand_constraint_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4870
namespace stringify {
    /** Convert an_asm_operand_modifier_tag enum constant to a string. */
    const char* an_asm_operand_modifier_tag(long);

    /** Convert an_asm_operand_modifier_tag enum constant to a string. */
    std::string an_asm_operand_modifier_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_asm_operand_modifier_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 4882
namespace stringify {
    /** Convert a_named_register_tag enum constant to a string. */
    const char* a_named_register_tag(long);

    /** Convert a_named_register_tag enum constant to a string. */
    std::string a_named_register_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_named_register_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5050
namespace stringify {
    /** Convert a_type_qualifier_tag enum constant to a string. */
    const char* a_type_qualifier_tag(long);

    /** Convert a_type_qualifier_tag enum constant to a string. */
    std::string a_type_qualifier_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_type_qualifier_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5136
namespace stringify {
    /** Convert a_upc_pragma_kind_tag enum constant to a string. */
    const char* a_upc_pragma_kind_tag(long);

    /** Convert a_upc_pragma_kind_tag enum constant to a string. */
    std::string a_upc_pragma_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_upc_pragma_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5146
namespace stringify {
    /** Convert a_upc_access_method_tag enum constant to a string. */
    const char* a_upc_access_method_tag(long);

    /** Convert a_upc_access_method_tag enum constant to a string. */
    std::string a_upc_access_method_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_upc_access_method_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5157
namespace stringify {
    /** Convert a_upc_coherence_stack_operation_tag enum constant to a string. */
    const char* a_upc_coherence_stack_operation_tag(long);

    /** Convert a_upc_coherence_stack_operation_tag enum constant to a string. */
    std::string a_upc_coherence_stack_operation_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_upc_coherence_stack_operation_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5323
namespace stringify {
    /** Convert a_stdc_pragma_kind_tag enum constant to a string. */
    const char* a_stdc_pragma_kind_tag(long);

    /** Convert a_stdc_pragma_kind_tag enum constant to a string. */
    std::string a_stdc_pragma_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_stdc_pragma_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5349
namespace stringify {
    /** Convert a_stdc_pragma_value_tag enum constant to a string. */
    const char* a_stdc_pragma_value_tag(long);

    /** Convert a_stdc_pragma_value_tag enum constant to a string. */
    std::string a_stdc_pragma_value_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_stdc_pragma_value_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5370
namespace stringify {
    /** Convert a_gcc_pragma_kind_tag enum constant to a string. */
    const char* a_gcc_pragma_kind_tag(long);

    /** Convert a_gcc_pragma_kind_tag enum constant to a string. */
    std::string a_gcc_pragma_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_gcc_pragma_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5410
namespace stringify {
    /** Convert a_pragma_kind_tag enum constant to a string. */
    const char* a_pragma_kind_tag(long);

    /** Convert a_pragma_kind_tag enum constant to a string. */
    std::string a_pragma_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_pragma_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5634
namespace stringify {
    /** Convert a_microsoft_pragma_comment_type_tag enum constant to a string. */
    const char* a_microsoft_pragma_comment_type_tag(long);

    /** Convert a_microsoft_pragma_comment_type_tag enum constant to a string. */
    std::string a_microsoft_pragma_comment_type_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_microsoft_pragma_comment_type_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5648
namespace stringify {
    /** Convert a_microsoft_pragma_conform_kind_tag enum constant to a string. */
    const char* a_microsoft_pragma_conform_kind_tag(long);

    /** Convert a_microsoft_pragma_conform_kind_tag enum constant to a string. */
    std::string a_microsoft_pragma_conform_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_microsoft_pragma_conform_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5933
namespace stringify {
    /** Convert a_calling_convention_tag enum constant to a string. */
    const char* a_calling_convention_tag(long);

    /** Convert a_calling_convention_tag enum constant to a string. */
    std::string a_calling_convention_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_calling_convention_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 5966
namespace stringify {
    /** Convert a_decl_modifier_tag enum constant to a string. */
    const char* a_decl_modifier_tag(long);

    /** Convert a_decl_modifier_tag enum constant to a string. */
    std::string a_decl_modifier_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_decl_modifier_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 6121
namespace stringify {
    /** Convert a_ref_qualifier_kind_tag enum constant to a string. */
    const char* a_ref_qualifier_kind_tag(long);

    /** Convert a_ref_qualifier_kind_tag enum constant to a string. */
    std::string a_ref_qualifier_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_ref_qualifier_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 6382
namespace stringify {
    /** Convert a_templ_arg_kind_tag enum constant to a string. */
    const char* a_templ_arg_kind_tag(long);

    /** Convert a_templ_arg_kind_tag enum constant to a string. */
    std::string a_templ_arg_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_templ_arg_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 6972
namespace stringify {
    /** Convert an_anonymous_union_kind_tag enum constant to a string. */
    const char* an_anonymous_union_kind_tag(long);

    /** Convert an_anonymous_union_kind_tag enum constant to a string. */
    std::string an_anonymous_union_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_anonymous_union_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 6987
namespace stringify {
    /** Convert an_inheritance_kind_tag enum constant to a string. */
    const char* an_inheritance_kind_tag(long);

    /** Convert an_inheritance_kind_tag enum constant to a string. */
    std::string an_inheritance_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_inheritance_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 7021
namespace stringify {
    /** Convert a_cli_class_type_kind_tag enum constant to a string. */
    const char* a_cli_class_type_kind_tag(long);

    /** Convert a_cli_class_type_kind_tag enum constant to a string. */
    std::string a_cli_class_type_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_cli_class_type_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 7054
namespace stringify {
    /** Convert a_property_or_event_kind_tag enum constant to a string. */
    const char* a_property_or_event_kind_tag(long);

    /** Convert a_property_or_event_kind_tag enum constant to a string. */
    std::string a_property_or_event_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_property_or_event_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 7187
namespace stringify {
    /** Convert a_rewritten_property_reference_kind_tag enum constant to a string. */
    const char* a_rewritten_property_reference_kind_tag(long);

    /** Convert a_rewritten_property_reference_kind_tag enum constant to a string. */
    std::string a_rewritten_property_reference_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_rewritten_property_reference_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 7824
namespace stringify {
    /** Convert a_template_param_type_kind_tag enum constant to a string. */
    const char* a_template_param_type_kind_tag(long);

    /** Convert a_template_param_type_kind_tag enum constant to a string. */
    std::string a_template_param_type_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_template_param_type_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 8070
namespace stringify {
    /** Convert a_based_type_kind_tag enum constant to a string. */
    const char* a_based_type_kind_tag(long);

    /** Convert a_based_type_kind_tag enum constant to a string. */
    std::string a_based_type_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_based_type_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 8128
namespace stringify {
    /** Convert a_pointer_modifier_tag enum constant to a string. */
    const char* a_pointer_modifier_tag(long);

    /** Convert a_pointer_modifier_tag enum constant to a string. */
    std::string a_pointer_modifier_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_pointer_modifier_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 9214
namespace stringify {
    /** Convert a_storage_class_tag enum constant to a string. */
    const char* a_storage_class_tag(long);

    /** Convert a_storage_class_tag enum constant to a string. */
    std::string a_storage_class_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_storage_class_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 9254
namespace stringify {
    /** Convert an_init_kind_tag enum constant to a string. */
    const char* an_init_kind_tag(long);

    /** Convert an_init_kind_tag enum constant to a string. */
    std::string an_init_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_init_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 10148
namespace stringify {
    /** Convert an_opname_kind_tag enum constant to a string. */
    const char* an_opname_kind_tag(long);

    /** Convert an_opname_kind_tag enum constant to a string. */
    std::string an_opname_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_opname_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 10189
namespace stringify {
    /** Convert a_builtin_function_kind_tag enum constant to a string. */
    const char* a_builtin_function_kind_tag(long);

    /** Convert a_builtin_function_kind_tag enum constant to a string. */
    std::string a_builtin_function_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_builtin_function_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 13060
namespace stringify {
    /** Convert a_ctor_or_dtor_kind_tag enum constant to a string. */
    const char* a_ctor_or_dtor_kind_tag(long);

    /** Convert a_ctor_or_dtor_kind_tag enum constant to a string. */
    std::string a_ctor_or_dtor_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_ctor_or_dtor_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 14268
namespace stringify {
    /** Convert an_expr_node_kind_tag enum constant to a string. */
    const char* an_expr_node_kind_tag(long);

    /** Convert an_expr_node_kind_tag enum constant to a string. */
    std::string an_expr_node_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_expr_node_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 14371
namespace stringify {
    /** Convert a_lowered_eh_construct_kind_tag enum constant to a string. */
    const char* a_lowered_eh_construct_kind_tag(long);

    /** Convert a_lowered_eh_construct_kind_tag enum constant to a string. */
    std::string a_lowered_eh_construct_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_lowered_eh_construct_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 14413
namespace stringify {
    /** Convert an_expr_operator_kind_tag enum constant to a string. */
    const char* an_expr_operator_kind_tag(long);

    /** Convert an_expr_operator_kind_tag enum constant to a string. */
    std::string an_expr_operator_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_expr_operator_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 14872
namespace stringify {
    /** Convert a_builtin_operation_kind_tag enum constant to a string. */
    const char* a_builtin_operation_kind_tag(long);

    /** Convert a_builtin_operation_kind_tag enum constant to a string. */
    std::string a_builtin_operation_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_builtin_operation_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 15205
namespace stringify {
    /** Convert a_local_expr_node_ref_kind_tag enum constant to a string. */
    const char* a_local_expr_node_ref_kind_tag(long);

    /** Convert a_local_expr_node_ref_kind_tag enum constant to a string. */
    std::string a_local_expr_node_ref_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_local_expr_node_ref_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 15929
namespace stringify {
    /** Convert a_statement_kind_tag enum constant to a string. */
    const char* a_statement_kind_tag(long);

    /** Convert a_statement_kind_tag enum constant to a string. */
    std::string a_statement_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_statement_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 16141
namespace stringify {
    /** Convert a_for_each_pattern_kind_tag enum constant to a string. */
    const char* a_for_each_pattern_kind_tag(long);

    /** Convert a_for_each_pattern_kind_tag enum constant to a string. */
    std::string a_for_each_pattern_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_for_each_pattern_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 16811
namespace stringify {
    /** Convert a_constructor_init_kind_tag enum constant to a string. */
    const char* a_constructor_init_kind_tag(long);

    /** Convert a_constructor_init_kind_tag enum constant to a string. */
    std::string a_constructor_init_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_constructor_init_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 17019
namespace stringify {
    /** Convert a_generic_constraint_kind_tag enum constant to a string. */
    const char* a_generic_constraint_kind_tag(long);

    /** Convert a_generic_constraint_kind_tag enum constant to a string. */
    std::string a_generic_constraint_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_generic_constraint_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 17107
namespace stringify {
    /** Convert a_template_parameter_kind_tag enum constant to a string. */
    const char* a_template_parameter_kind_tag(long);

    /** Convert a_template_parameter_kind_tag enum constant to a string. */
    std::string a_template_parameter_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_template_parameter_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 17211
namespace stringify {
    /** Convert a_template_kind_tag enum constant to a string. */
    const char* a_template_kind_tag(long);

    /** Convert a_template_kind_tag enum constant to a string. */
    std::string a_template_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_template_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 17551
namespace stringify {
    /** Convert an_object_lifetime_kind_tag enum constant to a string. */
    const char* an_object_lifetime_kind_tag(long);

    /** Convert an_object_lifetime_kind_tag enum constant to a string. */
    std::string an_object_lifetime_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_object_lifetime_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 17694
namespace stringify {
    /** Convert an_ms_attribute_kind_tag enum constant to a string. */
    const char* an_ms_attribute_kind_tag(long);

    /** Convert an_ms_attribute_kind_tag enum constant to a string. */
    std::string an_ms_attribute_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_ms_attribute_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 17714
namespace stringify {
    /** Convert an_ms_attribute_arg_kind_tag enum constant to a string. */
    const char* an_ms_attribute_arg_kind_tag(long);

    /** Convert an_ms_attribute_arg_kind_tag enum constant to a string. */
    std::string an_ms_attribute_arg_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_ms_attribute_arg_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/il_def.h line 18023
namespace stringify {
    /** Convert a_scope_kind_tag enum constant to a string. */
    const char* a_scope_kind_tag(long);

    /** Convert a_scope_kind_tag enum constant to a string. */
    std::string a_scope_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_scope_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/ms_metadata.h line 25
namespace stringify {
    /** Convert a_cpp_cli_import_flag_tag enum constant to a string. */
    const char* a_cpp_cli_import_flag_tag(long);

    /** Convert a_cpp_cli_import_flag_tag enum constant to a string. */
    std::string a_cpp_cli_import_flag_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_cpp_cli_import_flag_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/src/lexical.h line 1829
namespace stringify {
    /** Convert a_token_extra_info_kind_tag enum constant to a string. */
    const char* a_token_extra_info_kind_tag(long);

    /** Convert a_token_extra_info_kind_tag enum constant to a string. */
    std::string a_token_extra_info_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_token_extra_info_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/util/decode.c line 4037
namespace stringify {
    /** Convert a_substitution_kind enum constant to a string. */
    const char* a_substitution_kind(long);

    /** Convert a_substitution_kind enum constant to a string. */
    std::string a_substitution_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_substitution_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/lib_src/eh.h line 309
namespace stringify {
    /** Convert an_eh_stack_entry_kind_tag enum constant to a string. */
    const char* an_eh_stack_entry_kind_tag(long);

    /** Convert an_eh_stack_entry_kind_tag enum constant to a string. */
    std::string an_eh_stack_entry_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_an_eh_stack_entry_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/lib_src/rtti.c line 109
namespace stringify {
    /** Convert a_result_virtuality enum constant to a string. */
    const char* a_result_virtuality(long);

    /** Convert a_result_virtuality enum constant to a string. */
    std::string a_result_virtuality(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_result_virtuality(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/include/cxxabi.h line 62
namespace stringify { namespace __cxxabiv1 { namespace __base_class_type_info {
    /** Convert __cxxabiv1::__base_class_type_info::__offset_flags_masks enum constant to a string. */
    const char* __offset_flags_masks(long);

    /** Convert __cxxabiv1::__base_class_type_info::__offset_flags_masks enum constant to a string. */
    std::string __offset_flags_masks(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify__cxxabiv1__base_class_type_info__offset_flags_masks(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/include/cxxabi.h line 77
namespace stringify { namespace __cxxabiv1 { namespace __vmi_class_type_info {
    /** Convert __cxxabiv1::__vmi_class_type_info::__flags_masks enum constant to a string. */
    const char* __flags_masks(long);

    /** Convert __cxxabiv1::__vmi_class_type_info::__flags_masks enum constant to a string. */
    std::string __flags_masks(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify__cxxabiv1__vmi_class_type_info__flags_masks(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.9/include/cxxabi.h line 90
namespace stringify { namespace __cxxabiv1 { namespace __pbase_type_info {
    /** Convert __cxxabiv1::__pbase_type_info::__masks enum constant to a string. */
    const char* __masks(long);

    /** Convert __cxxabiv1::__pbase_type_info::__masks enum constant to a string. */
    std::string __masks(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringify__cxxabiv1__pbase_type_info__masks(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/edgRose.C line 6378
namespace stringify {
    /** Convert kinds_of_type_references enum constant to a string. */
    const char* kinds_of_type_references(long);

    /** Convert kinds_of_type_references enum constant to a string. */
    std::string kinds_of_type_references(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_kinds_of_type_references(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.14/src/sys_predef.h line 212
namespace stringify {
    /** Convert a_builtin_user_function_kind_tag enum constant to a string. */
    const char* a_builtin_user_function_kind_tag(long);

    /** Convert a_builtin_user_function_kind_tag enum constant to a string. */
    std::string a_builtin_user_function_kind_tag(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_builtin_user_function_kind_tag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.14/src/builtin_defs.h line 22
namespace stringify {
    /** Convert a_builtin_function_type_index enum constant to a string. */
    const char* a_builtin_function_type_index(long);

    /** Convert a_builtin_function_type_index enum constant to a string. */
    std::string a_builtin_function_type_index(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_builtin_function_type_index(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.14/src/builtin_defs.h line 4189
namespace stringify {
    /** Convert a_builtin_function_condition_index enum constant to a string. */
    const char* a_builtin_function_condition_index(long);

    /** Convert a_builtin_function_condition_index enum constant to a string. */
    std::string a_builtin_function_condition_index(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_builtin_function_condition_index(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.14/src/disp/error.c line 91
namespace stringify {
    /** Convert a_diag_fill_in_kind enum constant to a string. */
    const char* a_diag_fill_in_kind(long);

    /** Convert a_diag_fill_in_kind enum constant to a string. */
    std::string a_diag_fill_in_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_diag_fill_in_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.14/src/disp/error.c line 196
namespace stringify {
    /** Convert a_diagnostic_kind enum constant to a string. */
    const char* a_diagnostic_kind(long);

    /** Convert a_diagnostic_kind enum constant to a string. */
    std::string a_diagnostic_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_diagnostic_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.4/src/ms_metadata.cpp line 880
namespace stringify {
    /** Convert a_top_level_kind enum constant to a string. */
    const char* a_top_level_kind(long);

    /** Convert a_top_level_kind enum constant to a string. */
    std::string a_top_level_kind(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_top_level_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_4.4/src/decl_inits.c line 56
namespace stringify {
    /** Convert a_designation_state enum constant to a string. */
    const char* a_designation_state(long);

    /** Convert a_designation_state enum constant to a string. */
    std::string a_designation_state(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_a_designation_state(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/Clang/clang-frontend-private.hpp line 137
namespace stringify { namespace ClangToSageTranslator {
    /** Convert ClangToSageTranslator::Language enum constant to a string. */
    const char* Language(long);

    /** Convert ClangToSageTranslator::Language enum constant to a string. */
    std::string Language(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyClangToSageTranslatorLanguage(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Jovial_ROSE_Connection/Jovial_to_ROSE_translation.h line 8
namespace stringify { namespace Jovial_ROSE_Translation {
    /** Convert Jovial_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(long);

    /** Convert Jovial_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyJovial_ROSE_TranslationExpressionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/SRecord.h line 18
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SRecord {
    /** Convert Rose::BinaryAnalysis::SRecord::Type enum constant to a string. */
    const char* Type(long);

    /** Convert Rose::BinaryAnalysis::SRecord::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSRecordType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/MemoryMap.h line 125
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace MemoryMap { namespace Attach {
    /** Convert Rose::BinaryAnalysis::MemoryMap::Attach::Boolean enum constant to a string. */
    const char* Boolean(long);

    /** Convert Rose::BinaryAnalysis::MemoryMap::Attach::Boolean enum constant to a string. */
    std::string Boolean(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMemoryMapAttachBoolean(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/MemoryMap.h line 281
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace MemoryMap {
    /** Convert Rose::BinaryAnalysis::MemoryMap::InsertFileMapMode enum constant to a string. */
    const char* InsertFileMapMode(long);

    /** Convert Rose::BinaryAnalysis::MemoryMap::InsertFileMapMode enum constant to a string. */
    std::string InsertFileMapMode(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMemoryMapInsertFileMapMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/ByteOrder.h line 7
namespace stringify { namespace ByteOrder {
    /** Convert ByteOrder::Endianness enum constant to a string. */
    const char* Endianness(long);

    /** Convert ByteOrder::Endianness enum constant to a string. */
    std::string Endianness(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyByteOrderEndianness(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 7222
namespace stringify {
    /** Convert Definition_Kinds enum constant to a string. */
    const char* Definition_Kinds(long);

    /** Convert Definition_Kinds enum constant to a string. */
    std::string Definition_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyDefinition_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 7859
namespace stringify {
    /** Convert Path_Kinds enum constant to a string. */
    const char* Path_Kinds(long);

    /** Convert Path_Kinds enum constant to a string. */
    std::string Path_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPath_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 9954
namespace stringify {
    /** Convert _Access_Definition_Kinds enum constant to a string. */
    const char* _Access_Definition_Kinds(long);

    /** Convert _Access_Definition_Kinds enum constant to a string. */
    std::string _Access_Definition_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Access_Definition_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 9992
namespace stringify {
    /** Convert _Formal_Type_Kinds enum constant to a string. */
    const char* _Formal_Type_Kinds(long);

    /** Convert _Formal_Type_Kinds enum constant to a string. */
    std::string _Formal_Type_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Formal_Type_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 10048
namespace stringify {
    /** Convert _Discrete_Range_Kinds enum constant to a string. */
    const char* _Discrete_Range_Kinds(long);

    /** Convert _Discrete_Range_Kinds enum constant to a string. */
    std::string _Discrete_Range_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Discrete_Range_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 10079
namespace stringify {
    /** Convert _Constraint_Kinds enum constant to a string. */
    const char* _Constraint_Kinds(long);

    /** Convert _Constraint_Kinds enum constant to a string. */
    std::string _Constraint_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Constraint_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.C line 10116
namespace stringify {
    /** Convert _Representation_Clause_Kinds enum constant to a string. */
    const char* _Representation_Clause_Kinds(long);

    /** Convert _Representation_Clause_Kinds enum constant to a string. */
    std::string _Representation_Clause_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Representation_Clause_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.h line 26
namespace stringify { namespace Ada_ROSE_Translation {
    /** Convert Ada_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(long);

    /** Convert Ada_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAda_ROSE_TranslationExpressionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 47
namespace stringify {
    /** Convert Element_Kinds enum constant to a string. */
    const char* Element_Kinds(long);

    /** Convert Element_Kinds enum constant to a string. */
    std::string Element_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyElement_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 142
namespace stringify {
    /** Convert Operator_Kinds enum constant to a string. */
    const char* Operator_Kinds(long);

    /** Convert Operator_Kinds enum constant to a string. */
    std::string Operator_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyOperator_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 172
namespace stringify {
    /** Convert Pragma_Kinds enum constant to a string. */
    const char* Pragma_Kinds(long);

    /** Convert Pragma_Kinds enum constant to a string. */
    std::string Pragma_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPragma_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 247
namespace stringify {
    /** Convert Defining_Name_Kinds enum constant to a string. */
    const char* Defining_Name_Kinds(long);

    /** Convert Defining_Name_Kinds enum constant to a string. */
    std::string Defining_Name_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyDefining_Name_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 288
namespace stringify {
    /** Convert Declaration_Kinds enum constant to a string. */
    const char* Declaration_Kinds(long);

    /** Convert Declaration_Kinds enum constant to a string. */
    std::string Declaration_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyDeclaration_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 392
namespace stringify {
    /** Convert Declaration_Origins enum constant to a string. */
    const char* Declaration_Origins(long);

    /** Convert Declaration_Origins enum constant to a string. */
    std::string Declaration_Origins(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyDeclaration_Origins(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 408
namespace stringify {
    /** Convert Mode_Kinds enum constant to a string. */
    const char* Mode_Kinds(long);

    /** Convert Mode_Kinds enum constant to a string. */
    std::string Mode_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyMode_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 418
namespace stringify {
    /** Convert Subprogram_Default_Kinds enum constant to a string. */
    const char* Subprogram_Default_Kinds(long);

    /** Convert Subprogram_Default_Kinds enum constant to a string. */
    std::string Subprogram_Default_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifySubprogram_Default_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 836
namespace stringify {
    /** Convert _Type_Kinds enum constant to a string. */
    const char* _Type_Kinds(long);

    /** Convert _Type_Kinds enum constant to a string. */
    std::string _Type_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Type_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 870
namespace stringify {
    /** Convert _Interface_Kinds enum constant to a string. */
    const char* _Interface_Kinds(long);

    /** Convert _Interface_Kinds enum constant to a string. */
    std::string _Interface_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Interface_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 879
namespace stringify {
    /** Convert _Root_Type_Kinds enum constant to a string. */
    const char* _Root_Type_Kinds(long);

    /** Convert _Root_Type_Kinds enum constant to a string. */
    std::string _Root_Type_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Root_Type_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 917
namespace stringify {
    /** Convert _Access_Type_Kinds enum constant to a string. */
    const char* _Access_Type_Kinds(long);

    /** Convert _Access_Type_Kinds enum constant to a string. */
    std::string _Access_Type_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_Access_Type_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1244
namespace stringify {
    /** Convert Expression_Kinds enum constant to a string. */
    const char* Expression_Kinds(long);

    /** Convert Expression_Kinds enum constant to a string. */
    std::string Expression_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyExpression_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1289
namespace stringify {
    /** Convert Attribute_Kinds enum constant to a string. */
    const char* Attribute_Kinds(long);

    /** Convert Attribute_Kinds enum constant to a string. */
    std::string Attribute_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyAttribute_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1515
namespace stringify {
    /** Convert Association_Kinds enum constant to a string. */
    const char* Association_Kinds(long);

    /** Convert Association_Kinds enum constant to a string. */
    std::string Association_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyAssociation_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1564
namespace stringify {
    /** Convert Statement_Kinds enum constant to a string. */
    const char* Statement_Kinds(long);

    /** Convert Statement_Kinds enum constant to a string. */
    std::string Statement_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyStatement_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1792
namespace stringify {
    /** Convert Clause_Kinds enum constant to a string. */
    const char* Clause_Kinds(long);

    /** Convert Clause_Kinds enum constant to a string. */
    std::string Clause_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyClause_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1893
namespace stringify {
    /** Convert Enclosing_Kinds enum constant to a string. */
    const char* Enclosing_Kinds(long);

    /** Convert Enclosing_Kinds enum constant to a string. */
    std::string Enclosing_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyEnclosing_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 1945
namespace stringify {
    /** Convert Unit_Kinds enum constant to a string. */
    const char* Unit_Kinds(long);

    /** Convert Unit_Kinds enum constant to a string. */
    std::string Unit_Kinds(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyUnit_Kinds(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 2012
namespace stringify {
    /** Convert Unit_Classes enum constant to a string. */
    const char* Unit_Classes(long);

    /** Convert Unit_Classes enum constant to a string. */
    std::string Unit_Classes(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyUnit_Classes(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/a_nodes.h line 2033
namespace stringify {
    /** Convert Unit_Origins enum constant to a string. */
    const char* Unit_Origins(long);

    /** Convert Unit_Origins enum constant to a string. */
    std::string Unit_Origins(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyUnit_Origins(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryLoader/BinaryLoader.h line 55
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryLoader {
    /** Convert Rose::BinaryAnalysis::BinaryLoader::MappingContribution enum constant to a string. */
    const char* MappingContribution(long);

    /** Convert Rose::BinaryAnalysis::BinaryLoader::MappingContribution enum constant to a string. */
    std::string MappingContribution(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryLoaderMappingContribution(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryLoader/BinaryLoader.h line 63
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryLoader {
    /** Convert Rose::BinaryAnalysis::BinaryLoader::ConflictResolution enum constant to a string. */
    const char* ConflictResolution(long);

    /** Convert Rose::BinaryAnalysis::BinaryLoader::ConflictResolution enum constant to a string. */
    std::string ConflictResolution(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryLoaderConflictResolution(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 8
namespace stringify { namespace General_Language_Translation {
    /** Convert General_Language_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(long);

    /** Convert General_Language_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyGeneral_Language_TranslationExpressionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 88
namespace stringify { namespace FAST { namespace TypeSpec {
    /** Convert FAST::TypeSpec::TypeEnum enum constant to a string. */
    const char* TypeEnum(long);

    /** Convert FAST::TypeSpec::TypeEnum enum constant to a string. */
    std::string TypeEnum(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyFAST_TypeSpecTypeEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 136
namespace stringify { namespace FAST { namespace AttrSpec {
    /** Convert FAST::AttrSpec::AttrEnum enum constant to a string. */
    const char* AttrEnum(long);

    /** Convert FAST::AttrSpec::AttrEnum enum constant to a string. */
    std::string AttrEnum(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyFAST_AttrSpecAttrEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 265
namespace stringify { namespace FAST { namespace UseStmt {
    /** Convert FAST::UseStmt::ModuleNature enum constant to a string. */
    const char* ModuleNature(long);

    /** Convert FAST::UseStmt::ModuleNature enum constant to a string. */
    std::string ModuleNature(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyFAST_UseStmtModuleNature(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 444
namespace stringify { namespace FAST { namespace PrefixSpec {
    /** Convert FAST::PrefixSpec::PrefixEnum enum constant to a string. */
    const char* PrefixEnum(long);

    /** Convert FAST::PrefixSpec::PrefixEnum enum constant to a string. */
    std::string PrefixEnum(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyFAST_PrefixSpecPrefixEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Function.h line 42
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Function {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Function::Ownership enum constant to a string. */
    const char* Ownership(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Function::Ownership enum constant to a string. */
    std::string Ownership(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2FunctionOwnership(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Partitioner.h line 1416
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Partitioner { namespace MayReturnVertexInfo {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Partitioner::MayReturnVertexInfo::State enum constant to a string. */
    const char* State(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Partitioner::MayReturnVertexInfo::State enum constant to a string. */
    std::string State(long, const std::string &strip);
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2PartitionerMayReturnVertexInfoState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/ModulesElf.h line 68
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace ModulesElf { namespace FixUndefinedSymbols {
    /** Convert Rose::BinaryAnalysis::Partitioner2::ModulesElf::FixUndefinedSymbols::Boolean enum constant to a string. */
    const char* Boolean(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::ModulesElf::FixUndefinedSymbols::Boolean enum constant to a string. */
    std::string Boolean(long, const std::string &strip);
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2ModulesElfFixUndefinedSymbolsBoolean(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 22
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Precision {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Precision::Level enum constant to a string. */
    const char* Level(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Precision::Level enum constant to a string. */
    std::string Level(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2PrecisionLevel(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 31
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::VertexType enum constant to a string. */
    const char* VertexType(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::VertexType enum constant to a string. */
    std::string VertexType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2VertexType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 42
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::EdgeType enum constant to a string. */
    const char* EdgeType(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::EdgeType enum constant to a string. */
    std::string EdgeType(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2EdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 66
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Confidence enum constant to a string. */
    const char* Confidence(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Confidence enum constant to a string. */
    std::string Confidence(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2Confidence(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 72
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::SemanticMemoryParadigm enum constant to a string. */
    const char* SemanticMemoryParadigm(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::SemanticMemoryParadigm enum constant to a string. */
    std::string SemanticMemoryParadigm(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2SemanticMemoryParadigm(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 170
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::MemoryDataAdjustment enum constant to a string. */
    const char* MemoryDataAdjustment(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::MemoryDataAdjustment enum constant to a string. */
    std::string MemoryDataAdjustment(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2MemoryDataAdjustment(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 255
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::FunctionReturnAnalysis enum constant to a string. */
    const char* FunctionReturnAnalysis(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::FunctionReturnAnalysis enum constant to a string. */
    std::string FunctionReturnAnalysis(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2FunctionReturnAnalysis(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/DataFlow.h line 28
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace DataFlow { namespace DfCfgVertex {
    /** Convert Rose::BinaryAnalysis::Partitioner2::DataFlow::DfCfgVertex::Type enum constant to a string. */
    const char* Type(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::DataFlow::DfCfgVertex::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2DataFlowDfCfgVertexType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Modules.h line 44
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace BasicBlockCallback {
    /** Convert Rose::BinaryAnalysis::Partitioner2::BasicBlockCallback::Termination enum constant to a string. */
    const char* Termination(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::BasicBlockCallback::Termination enum constant to a string. */
    std::string Termination(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2BasicBlockCallbackTermination(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Reference.h line 29
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Reference {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Reference::Granularity enum constant to a string. */
    const char* Granularity(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Reference::Granularity enum constant to a string. */
    std::string Granularity(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2ReferenceGranularity(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/CfgPath.h line 329
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Inliner {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Inliner::HowInline enum constant to a string. */
    const char* HowInline(long);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Inliner::HowInline enum constant to a string. */
    std::string HowInline(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2InlinerHowInline(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 10
namespace stringify {
    /** Convert ROSE_Fortran_Identifiers enum constant to a string. */
    const char* ROSE_Fortran_Identifiers(long);

    /** Convert ROSE_Fortran_Identifiers enum constant to a string. */
    std::string ROSE_Fortran_Identifiers(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyROSE_Fortran_Identifiers(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 140
namespace stringify {
    /** Convert ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(long);

    /** Convert ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyROSE_Fortran_Operators(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 167
namespace stringify {
    /** Convert ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(long);

    /** Convert ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyROSE_Fortran_Additional_Info(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 14
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_keywords enum constant to a string. */
    const char* ROSE_Fortran_keywords(long);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_keywords enum constant to a string. */
    std::string ROSE_Fortran_keywords(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_keywords(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 147
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(long);

    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_C_CXX_keywords(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 215
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(long);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_Operators(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 242
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_operators enum constant to a string. */
    const char* ROSE_C_CXX_operators(long);

    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_operators enum constant to a string. */
    std::string ROSE_C_CXX_operators(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_C_CXX_operators(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 321
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(long);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_Additional_Info(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/AssemblerX86.h line 141
namespace stringify { namespace AssemblerX86 {
    /** Convert AssemblerX86::OperandDefn enum constant to a string. */
    const char* OperandDefn(long);

    /** Convert AssemblerX86::OperandDefn enum constant to a string. */
    std::string OperandDefn(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAssemblerX86OperandDefn(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/AssemblerX86.h line 382
namespace stringify { namespace AssemblerX86 {
    /** Convert AssemblerX86::MemoryReferencePattern enum constant to a string. */
    const char* MemoryReferencePattern(long);

    /** Convert AssemblerX86::MemoryReferencePattern enum constant to a string. */
    std::string MemoryReferencePattern(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAssemblerX86MemoryReferencePattern(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/BinaryDebugger.h line 15
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryDebugger {
    /** Convert Rose::BinaryAnalysis::BinaryDebugger::DetachMode enum constant to a string. */
    const char* DetachMode(long);

    /** Convert Rose::BinaryAnalysis::BinaryDebugger::DetachMode enum constant to a string. */
    std::string DetachMode(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryDebuggerDetachMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/BinaryDebugger.h line 18
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryDebugger {
    /** Convert Rose::BinaryAnalysis::BinaryDebugger::Flag enum constant to a string. */
    const char* Flag(long);

    /** Convert Rose::BinaryAnalysis::BinaryDebugger::Flag enum constant to a string. */
    std::string Flag(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryDebuggerFlag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/BinaryDebugger.h line 29
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryDebugger {
    /** Convert Rose::BinaryAnalysis::BinaryDebugger::RegPageStatus enum constant to a string. */
    const char* RegPageStatus(long);

    /** Convert Rose::BinaryAnalysis::BinaryDebugger::RegPageStatus enum constant to a string. */
    std::string RegPageStatus(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryDebuggerRegPageStatus(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 12
namespace stringify {
    /** Convert M68kFamily enum constant to a string. */
    const char* M68kFamily(long);

    /** Convert M68kFamily enum constant to a string. */
    std::string M68kFamily(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kFamily(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 49
namespace stringify {
    /** Convert M68kRegisterClass enum constant to a string. */
    const char* M68kRegisterClass(long);

    /** Convert M68kRegisterClass enum constant to a string. */
    std::string M68kRegisterClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kRegisterClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 58
namespace stringify {
    /** Convert M68kSpecialPurposeRegister enum constant to a string. */
    const char* M68kSpecialPurposeRegister(long);

    /** Convert M68kSpecialPurposeRegister enum constant to a string. */
    std::string M68kSpecialPurposeRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kSpecialPurposeRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 66
namespace stringify {
    /** Convert M68kMacRegister enum constant to a string. */
    const char* M68kMacRegister(long);

    /** Convert M68kMacRegister enum constant to a string. */
    std::string M68kMacRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kMacRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 81
namespace stringify {
    /** Convert M68kEmacRegister enum constant to a string. */
    const char* M68kEmacRegister(long);

    /** Convert M68kEmacRegister enum constant to a string. */
    std::string M68kEmacRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kEmacRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 90
namespace stringify {
    /** Convert M68kSupervisorRegister enum constant to a string. */
    const char* M68kSupervisorRegister(long);

    /** Convert M68kSupervisorRegister enum constant to a string. */
    std::string M68kSupervisorRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kSupervisorRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 177
namespace stringify {
    /** Convert M68kEffectiveAddressMode enum constant to a string. */
    const char* M68kEffectiveAddressMode(long);

    /** Convert M68kEffectiveAddressMode enum constant to a string. */
    std::string M68kEffectiveAddressMode(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kEffectiveAddressMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 231
namespace stringify {
    /** Convert M68kDataFormat enum constant to a string. */
    const char* M68kDataFormat(long);

    /** Convert M68kDataFormat enum constant to a string. */
    std::string M68kDataFormat(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kDataFormat(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 242
namespace stringify {
    /** Convert M68kInstructionKind enum constant to a string. */
    const char* M68kInstructionKind(long);

    /** Convert M68kInstructionKind enum constant to a string. */
    std::string M68kInstructionKind(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyM68kInstructionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerX86.h line 139
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerX86 {
    /** Convert Rose::BinaryAnalysis::DisassemblerX86::RegisterMode enum constant to a string. */
    const char* RegisterMode(long);

    /** Convert Rose::BinaryAnalysis::DisassemblerX86::RegisterMode enum constant to a string. */
    std::string RegisterMode(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerX86RegisterMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerX86.h line 144
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerX86 {
    /** Convert Rose::BinaryAnalysis::DisassemblerX86::MMPrefix enum constant to a string. */
    const char* MMPrefix(long);

    /** Convert Rose::BinaryAnalysis::DisassemblerX86::MMPrefix enum constant to a string. */
    std::string MMPrefix(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerX86MMPrefix(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerMips.h line 34
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerMips { namespace Mips32 {
    /** Convert Rose::BinaryAnalysis::DisassemblerMips::Mips32::Architecture enum constant to a string. */
    const char* Architecture(long);

    /** Convert Rose::BinaryAnalysis::DisassemblerMips::Mips32::Architecture enum constant to a string. */
    std::string Architecture(long, const std::string &strip);
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerMipsMips32Architecture(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 6
namespace stringify {
    /** Convert MipsRegisterClass enum constant to a string. */
    const char* MipsRegisterClass(long);

    /** Convert MipsRegisterClass enum constant to a string. */
    std::string MipsRegisterClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyMipsRegisterClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 18
namespace stringify {
    /** Convert MipsFcsrMinors enum constant to a string. */
    const char* MipsFcsrMinors(long);

    /** Convert MipsFcsrMinors enum constant to a string. */
    std::string MipsFcsrMinors(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyMipsFcsrMinors(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 26
namespace stringify {
    /** Convert MipsSpecialPurposeRegister enum constant to a string. */
    const char* MipsSpecialPurposeRegister(long);

    /** Convert MipsSpecialPurposeRegister enum constant to a string. */
    std::string MipsSpecialPurposeRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyMipsSpecialPurposeRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 35
namespace stringify {
    /** Convert MipsInstructionKind enum constant to a string. */
    const char* MipsInstructionKind(long);

    /** Convert MipsInstructionKind enum constant to a string. */
    std::string MipsInstructionKind(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyMipsInstructionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/armInstructionEnum.h line 6
namespace stringify {
    /** Convert ArmRegisterClass enum constant to a string. */
    const char* ArmRegisterClass(long);

    /** Convert ArmRegisterClass enum constant to a string. */
    std::string ArmRegisterClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyArmRegisterClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/armInstructionEnum.h line 12
namespace stringify {
    /** Convert ArmProgramStatusRegister enum constant to a string. */
    const char* ArmProgramStatusRegister(long);

    /** Convert ArmProgramStatusRegister enum constant to a string. */
    std::string ArmProgramStatusRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyArmProgramStatusRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/armInstructionEnum.h line 18
namespace stringify {
    /** Convert ArmInstructionKind enum constant to a string. */
    const char* ArmInstructionKind(long);

    /** Convert ArmInstructionKind enum constant to a string. */
    std::string ArmInstructionKind(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyArmInstructionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/armInstructionEnum.h line 123
namespace stringify {
    /** Convert ArmInstructionCondition enum constant to a string. */
    const char* ArmInstructionCondition(long);

    /** Convert ArmInstructionCondition enum constant to a string. */
    std::string ArmInstructionCondition(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyArmInstructionCondition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/BinaryDebugger.C line 12
namespace stringify {
    /** Convert __ptrace_request enum constant to a string. */
    const char* __ptrace_request(long);

    /** Convert __ptrace_request enum constant to a string. */
    std::string __ptrace_request(long, const std::string &strip);
}

namespace Rose {
    std::string stringify__ptrace_request(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 9
namespace stringify {
    /** Convert X86InstructionSize enum constant to a string. */
    const char* X86InstructionSize(long);

    /** Convert X86InstructionSize enum constant to a string. */
    std::string X86InstructionSize(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86InstructionSize(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 17
namespace stringify {
    /** Convert X86RegisterClass enum constant to a string. */
    const char* X86RegisterClass(long);

    /** Convert X86RegisterClass enum constant to a string. */
    std::string X86RegisterClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86RegisterClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 30
namespace stringify {
    /** Convert X86SegmentRegister enum constant to a string. */
    const char* X86SegmentRegister(long);

    /** Convert X86SegmentRegister enum constant to a string. */
    std::string X86SegmentRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86SegmentRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 41
namespace stringify {
    /** Convert X86GeneralPurposeRegister enum constant to a string. */
    const char* X86GeneralPurposeRegister(long);

    /** Convert X86GeneralPurposeRegister enum constant to a string. */
    std::string X86GeneralPurposeRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86GeneralPurposeRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 61
namespace stringify {
    /** Convert X86StRegister enum constant to a string. */
    const char* X86StRegister(long);

    /** Convert X86StRegister enum constant to a string. */
    std::string X86StRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86StRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 74
namespace stringify {
    /** Convert X86Flags enum constant to a string. */
    const char* X86Flags(long);

    /** Convert X86Flags enum constant to a string. */
    std::string X86Flags(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86Flags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 83
namespace stringify {
    /** Convert X86Flag enum constant to a string. */
    const char* X86Flag(long);

    /** Convert X86Flag enum constant to a string. */
    std::string X86Flag(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86Flag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 104
namespace stringify {
    /** Convert X86BranchPrediction enum constant to a string. */
    const char* X86BranchPrediction(long);

    /** Convert X86BranchPrediction enum constant to a string. */
    std::string X86BranchPrediction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86BranchPrediction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 112
namespace stringify {
    /** Convert X86RepeatPrefix enum constant to a string. */
    const char* X86RepeatPrefix(long);

    /** Convert X86RepeatPrefix enum constant to a string. */
    std::string X86RepeatPrefix(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86RepeatPrefix(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 121
namespace stringify {
    /** Convert X86Exception enum constant to a string. */
    const char* X86Exception(long);

    /** Convert X86Exception enum constant to a string. */
    std::string X86Exception(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86Exception(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/AssemblerX86Init.h line 21
namespace stringify {
    /** Convert X86InstructionKind enum constant to a string. */
    const char* X86InstructionKind(long);

    /** Convert X86InstructionKind enum constant to a string. */
    std::string X86InstructionKind(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyX86InstructionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/Registers.h line 275
namespace stringify { namespace RegisterDictionary { namespace SortBySize {
    /** Convert RegisterDictionary::SortBySize::Direction enum constant to a string. */
    const char* Direction(long);

    /** Convert RegisterDictionary::SortBySize::Direction enum constant to a string. */
    std::string Direction(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyRegisterDictionarySortBySizeDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/powerpcInstructionEnum.h line 8
namespace stringify {
    /** Convert PowerpcInstructionKind enum constant to a string. */
    const char* PowerpcInstructionKind(long);

    /** Convert PowerpcInstructionKind enum constant to a string. */
    std::string PowerpcInstructionKind(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPowerpcInstructionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/powerpcInstructionEnum.h line 454
namespace stringify {
    /** Convert PowerpcRegisterClass enum constant to a string. */
    const char* PowerpcRegisterClass(long);

    /** Convert PowerpcRegisterClass enum constant to a string. */
    std::string PowerpcRegisterClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPowerpcRegisterClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/powerpcInstructionEnum.h line 470
namespace stringify {
    /** Convert PowerpcConditionRegisterAccessGranularity enum constant to a string. */
    const char* PowerpcConditionRegisterAccessGranularity(long);

    /** Convert PowerpcConditionRegisterAccessGranularity enum constant to a string. */
    std::string PowerpcConditionRegisterAccessGranularity(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPowerpcConditionRegisterAccessGranularity(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/powerpcInstructionEnum.h line 477
namespace stringify {
    /** Convert PowerpcSpecialPurposeRegister enum constant to a string. */
    const char* PowerpcSpecialPurposeRegister(long);

    /** Convert PowerpcSpecialPurposeRegister enum constant to a string. */
    std::string PowerpcSpecialPurposeRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPowerpcSpecialPurposeRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/powerpcInstructionEnum.h line 487
namespace stringify {
    /** Convert PowerpcTimeBaseRegister enum constant to a string. */
    const char* PowerpcTimeBaseRegister(long);

    /** Convert PowerpcTimeBaseRegister enum constant to a string. */
    std::string PowerpcTimeBaseRegister(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyPowerpcTimeBaseRegister(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/Assembler.h line 71
namespace stringify { namespace Assembler {
    /** Convert Assembler::EncodingType enum constant to a string. */
    const char* EncodingType(long);

    /** Convert Assembler::EncodingType enum constant to a string. */
    std::string EncodingType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAssemblerEncodingType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_OpenFortranParser_ROSE_Connection/Fortran_to_ROSE_translation.h line 8
namespace stringify { namespace Fortran_ROSE_Translation {
    /** Convert Fortran_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(long);

    /** Convert Fortran_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyFortran_ROSE_TranslationExpressionKind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/AstGraphWidget/DisplayEdge.h line 40
namespace stringify { namespace DisplayEdge {
    /** Convert DisplayEdge::PaintMode enum constant to a string. */
    const char* PaintMode(long);

    /** Convert DisplayEdge::PaintMode enum constant to a string. */
    std::string PaintMode(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyDisplayEdgePaintMode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/TaskSystem/TaskInterface.h line 25
namespace stringify { namespace Task {
    /** Convert Task::State enum constant to a string. */
    const char* State(long);

    /** Convert Task::State enum constant to a string. */
    std::string State(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyTaskState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/TaskSystem/CompilerOutputWidget.h line 25
namespace stringify { namespace CompilerOutputWidget {
    /** Convert CompilerOutputWidget::PatternType enum constant to a string. */
    const char* PatternType(long);

    /** Convert CompilerOutputWidget::PatternType enum constant to a string. */
    std::string PatternType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyCompilerOutputWidgetPatternType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QtGradientEditor/qtcolorline.h line 62
namespace stringify { namespace QtColorLine {
    /** Convert QtColorLine::ColorComponent enum constant to a string. */
    const char* ColorComponent(long);

    /** Convert QtColorLine::ColorComponent enum constant to a string. */
    std::string ColorComponent(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQtColorLineColorComponent(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QtGradientEditor/qtgradientwidget.cpp line 91
namespace stringify { namespace QtGradientWidgetPrivate {
    /** Convert QtGradientWidgetPrivate::Handle enum constant to a string. */
    const char* Handle(long);

    /** Convert QtGradientWidgetPrivate::Handle enum constant to a string. */
    std::string Handle(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQtGradientWidgetPrivateHandle(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/util/AstDisplayInfo.h line 14
namespace stringify { namespace AstDisplayInfo {
    /** Convert AstDisplayInfo::NodeType enum constant to a string. */
    const char* NodeType(long);

    /** Convert AstDisplayInfo::NodeType enum constant to a string. */
    std::string NodeType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyAstDisplayInfoNodeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qeditor.h line 64
namespace stringify { namespace QEditor {
    /** Convert QEditor::CodecUpdatePolicy enum constant to a string. */
    const char* CodecUpdatePolicy(long);

    /** Convert QEditor::CodecUpdatePolicy enum constant to a string. */
    std::string CodecUpdatePolicy(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQEditorCodecUpdatePolicy(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qeditor.h line 74
namespace stringify { namespace QEditor {
    /** Convert QEditor::EditFlag enum constant to a string. */
    const char* EditFlag(long);

    /** Convert QEditor::EditFlag enum constant to a string. */
    std::string EditFlag(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQEditorEditFlag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qeditor.h line 493
namespace stringify { namespace QEditor {
    /** Convert QEditor::SaveState enum constant to a string. */
    const char* SaveState(long);

    /** Convert QEditor::SaveState enum constant to a string. */
    std::string SaveState(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQEditorSaveState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qlanguagedefinition.h line 44
namespace stringify { namespace QLanguageDefinition {
    /** Convert QLanguageDefinition::CollapseFlag enum constant to a string. */
    const char* CollapseFlag(long);

    /** Convert QLanguageDefinition::CollapseFlag enum constant to a string. */
    std::string CollapseFlag(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQLanguageDefinitionCollapseFlag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfadefinition.h line 41
namespace stringify { namespace QNFAAction {
    /** Convert QNFAAction::QNFAAction_ enum constant to a string. */
    const char* QNFAAction_(long);

    /** Convert QNFAAction::QNFAAction_ enum constant to a string. */
    std::string QNFAAction_(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQNFAActionQNFAAction_(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfadefinition.h line 129
namespace stringify { namespace QNFADefinition { namespace PMatch {
    /** Convert QNFADefinition::PMatch::Type enum constant to a string. */
    const char* Type(long);

    /** Convert QNFADefinition::PMatch::Type enum constant to a string. */
    std::string Type(long, const std::string &strip);
}}}

namespace Rose {
    std::string stringifyQNFADefinitionPMatchType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfa.h line 42
namespace stringify {
    /** Convert NFAType enum constant to a string. */
    const char* NFAType(long);

    /** Convert NFAType enum constant to a string. */
    std::string NFAType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyNFAType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfa.h line 63
namespace stringify {
    /** Convert NFAAssertion enum constant to a string. */
    const char* NFAAssertion(long);

    /** Convert NFAAssertion enum constant to a string. */
    std::string NFAAssertion(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyNFAAssertion(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor.h line 39
namespace stringify { namespace QDocumentCursor {
    /** Convert QDocumentCursor::MoveFlag enum constant to a string. */
    const char* MoveFlag(long);

    /** Convert QDocumentCursor::MoveFlag enum constant to a string. */
    std::string MoveFlag(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentCursorMoveFlag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor.h line 48
namespace stringify { namespace QDocumentCursor {
    /** Convert QDocumentCursor::MoveOperation enum constant to a string. */
    const char* MoveOperation(long);

    /** Convert QDocumentCursor::MoveOperation enum constant to a string. */
    std::string MoveOperation(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentCursorMoveOperation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor.h line 75
namespace stringify { namespace QDocumentCursor {
    /** Convert QDocumentCursor::SelectionType enum constant to a string. */
    const char* SelectionType(long);

    /** Convert QDocumentCursor::SelectionType enum constant to a string. */
    std::string SelectionType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentCursorSelectionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor_p.h line 52
namespace stringify { namespace QDocumentCursorHandle {
    /** Convert QDocumentCursorHandle::Flags enum constant to a string. */
    const char* Flags(long);

    /** Convert QDocumentCursorHandle::Flags enum constant to a string. */
    std::string Flags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentCursorHandleFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcommand.h line 37
namespace stringify { namespace QDocumentCommand {
    /** Convert QDocumentCommand::Command enum constant to a string. */
    const char* Command(long);

    /** Convert QDocumentCommand::Command enum constant to a string. */
    std::string Command(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentCommandCommand(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentline.h line 38
namespace stringify { namespace QParenthesis {
    /** Convert QParenthesis::Role enum constant to a string. */
    const char* Role(long);

    /** Convert QParenthesis::Role enum constant to a string. */
    std::string Role(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQParenthesisRole(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentline.h line 69
namespace stringify { namespace QDocumentLine {
    /** Convert QDocumentLine::State enum constant to a string. */
    const char* State(long);

    /** Convert QDocumentLine::State enum constant to a string. */
    std::string State(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentLineState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocument.h line 84
namespace stringify { namespace QDocument {
    /** Convert QDocument::LineEnding enum constant to a string. */
    const char* LineEnding(long);

    /** Convert QDocument::LineEnding enum constant to a string. */
    std::string LineEnding(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentLineEnding(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocument.h line 93
namespace stringify { namespace QDocument {
    /** Convert QDocument::TextProcessing enum constant to a string. */
    const char* TextProcessing(long);

    /** Convert QDocument::TextProcessing enum constant to a string. */
    std::string TextProcessing(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentTextProcessing(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocument.h line 100
namespace stringify { namespace QDocument {
    /** Convert QDocument::WhiteSpaceFlag enum constant to a string. */
    const char* WhiteSpaceFlag(long);

    /** Convert QDocument::WhiteSpaceFlag enum constant to a string. */
    std::string WhiteSpaceFlag(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentWhiteSpaceFlag(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentsearch.h line 40
namespace stringify { namespace QDocumentSearch {
    /** Convert QDocumentSearch::Option enum constant to a string. */
    const char* Option(long);

    /** Convert QDocumentSearch::Option enum constant to a string. */
    std::string Option(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQDocumentSearchOption(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qpanellayout.h line 38
namespace stringify { namespace QPanelLayout {
    /** Convert QPanelLayout::Position enum constant to a string. */
    const char* Position(long);

    /** Convert QPanelLayout::Position enum constant to a string. */
    std::string Position(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQPanelLayoutPosition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qpanellayout.h line 87
namespace stringify { namespace QPanelLayout {
    /** Convert QPanelLayout::SizeType enum constant to a string. */
    const char* SizeType(long);

    /** Convert QPanelLayout::SizeType enum constant to a string. */
    std::string SizeType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQPanelLayoutSizeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qreliablefilewatch.h line 52
namespace stringify { namespace QReliableFileWatch {
    /** Convert QReliableFileWatch::State enum constant to a string. */
    const char* State(long);

    /** Convert QReliableFileWatch::State enum constant to a string. */
    std::string State(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQReliableFileWatchState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qcodeedit.h line 46
namespace stringify { namespace QCodeEdit {
    /** Convert QCodeEdit::Position enum constant to a string. */
    const char* Position(long);

    /** Convert QCodeEdit::Position enum constant to a string. */
    std::string Position(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyQCodeEditPosition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/ProjectManager/DependencyInfo.h line 20
namespace stringify { namespace DependencyInfo {
    /** Convert DependencyInfo::State enum constant to a string. */
    const char* State(long);

    /** Convert DependencyInfo::State enum constant to a string. */
    std::string State(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyDependencyInfoState(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/dataStructureTraversal/exampleTest.C line 3
namespace stringify {
    /** Convert controlEnum enum constant to a string. */
    const char* controlEnum(long);

    /** Convert controlEnum enum constant to a string. */
    std::string controlEnum(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_controlEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/dataStructureTraversal/GenRepresentation.h line 23
namespace stringify { namespace GenRepresentation {
    /** Convert GenRepresentation::TypeOfPrint enum constant to a string. */
    const char* TypeOfPrint(long);

    /** Convert GenRepresentation::TypeOfPrint enum constant to a string. */
    std::string TypeOfPrint(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyGenRepresentationTypeOfPrint(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/failSafe/failSafePragma.h line 31
namespace stringify { namespace FailSafe {
    /** Convert FailSafe::fail_safe_enum enum constant to a string. */
    const char* fail_safe_enum(long);

    /** Convert FailSafe::fail_safe_enum enum constant to a string. */
    std::string fail_safe_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyFailSafe_fail_safe_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/callbacks.h line 12
namespace stringify { namespace ROSE_Callbacks {
    /** Convert ROSE_Callbacks::Direction enum constant to a string. */
    const char* Direction(long);

    /** Convert ROSE_Callbacks::Direction enum constant to a string. */
    std::string Direction(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyROSE_CallbacksDirection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/utility_functions.C line 778
namespace stringify {
    /** Convert language_enum enum constant to a string. */
    const char* language_enum(long);

    /** Convert language_enum enum constant to a string. */
    std::string language_enum(long, const std::string &strip);
}

namespace Rose {
    std::string stringify_language_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/SqlDatabase.h line 120
namespace stringify { namespace SqlDatabase {
    /** Convert SqlDatabase::Driver enum constant to a string. */
    const char* Driver(long);

    /** Convert SqlDatabase::Driver enum constant to a string. */
    std::string Driver(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySqlDatabaseDriver(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/CommandLine.C line 19
namespace stringify { namespace Rose { namespace CommandLine { namespace FailedAssertionBehaviorAdjuster {
    /** Convert Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior enum constant to a string. */
    const char* Behavior(long);

    /** Convert Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior enum constant to a string. */
    std::string Behavior(long, const std::string &strip);
}}}}

namespace Rose {
    std::string stringifyCommandLineFailedAssertionBehaviorAdjusterBehavior(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/transformationSupport.h line 37
namespace stringify { namespace TransformationSupport {
    /** Convert TransformationSupport::operatorCodeType enum constant to a string. */
    const char* operatorCodeType(long);

    /** Convert TransformationSupport::operatorCodeType enum constant to a string. */
    std::string operatorCodeType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifyTransformationSupport_operatorCodeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17
namespace stringify {
    /** Convert Cxx_GrammarVariants enum constant to a string. */
    const char* Cxx_GrammarVariants(long);

    /** Convert Cxx_GrammarVariants enum constant to a string. */
    std::string Cxx_GrammarVariants(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyCxx_GrammarVariants(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 899
namespace stringify {
    /** Convert VariantT enum constant to a string. */
    const char* VariantT(long);

    /** Convert VariantT enum constant to a string. */
    std::string VariantT(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyVariantT(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 11101
namespace stringify { namespace SgConstVolatileModifier {
    /** Convert SgConstVolatileModifier::cv_modifier_enum enum constant to a string. */
    const char* cv_modifier_enum(long);

    /** Convert SgConstVolatileModifier::cv_modifier_enum enum constant to a string. */
    std::string cv_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgConstVolatileModifier_cv_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 11646
namespace stringify { namespace SgStorageModifier {
    /** Convert SgStorageModifier::storage_modifier_enum enum constant to a string. */
    const char* storage_modifier_enum(long);

    /** Convert SgStorageModifier::storage_modifier_enum enum constant to a string. */
    std::string storage_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgStorageModifier_storage_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 12280
namespace stringify { namespace SgAccessModifier {
    /** Convert SgAccessModifier::access_modifier_enum enum constant to a string. */
    const char* access_modifier_enum(long);

    /** Convert SgAccessModifier::access_modifier_enum enum constant to a string. */
    std::string access_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAccessModifier_access_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 12809
namespace stringify { namespace SgFunctionModifier {
    /** Convert SgFunctionModifier::function_modifier_enum enum constant to a string. */
    const char* function_modifier_enum(long);

    /** Convert SgFunctionModifier::function_modifier_enum enum constant to a string. */
    std::string function_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgFunctionModifier_function_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 13577
namespace stringify { namespace SgUPC_AccessModifier {
    /** Convert SgUPC_AccessModifier::upc_access_modifier_enum enum constant to a string. */
    const char* upc_access_modifier_enum(long);

    /** Convert SgUPC_AccessModifier::upc_access_modifier_enum enum constant to a string. */
    std::string upc_access_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgUPC_AccessModifier_upc_access_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 14121
namespace stringify { namespace SgSpecialFunctionModifier {
    /** Convert SgSpecialFunctionModifier::special_function_modifier_enum enum constant to a string. */
    const char* special_function_modifier_enum(long);

    /** Convert SgSpecialFunctionModifier::special_function_modifier_enum enum constant to a string. */
    std::string special_function_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgSpecialFunctionModifier_special_function_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 14672
namespace stringify { namespace SgElaboratedTypeModifier {
    /** Convert SgElaboratedTypeModifier::elaborated_type_modifier_enum enum constant to a string. */
    const char* elaborated_type_modifier_enum(long);

    /** Convert SgElaboratedTypeModifier::elaborated_type_modifier_enum enum constant to a string. */
    std::string elaborated_type_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgElaboratedTypeModifier_elaborated_type_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 15208
namespace stringify { namespace SgLinkageModifier {
    /** Convert SgLinkageModifier::linkage_modifier_enum enum constant to a string. */
    const char* linkage_modifier_enum(long);

    /** Convert SgLinkageModifier::linkage_modifier_enum enum constant to a string. */
    std::string linkage_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgLinkageModifier_linkage_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 15735
namespace stringify { namespace SgBaseClassModifier {
    /** Convert SgBaseClassModifier::baseclass_modifier_enum enum constant to a string. */
    const char* baseclass_modifier_enum(long);

    /** Convert SgBaseClassModifier::baseclass_modifier_enum enum constant to a string. */
    std::string baseclass_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgBaseClassModifier_baseclass_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 16266
namespace stringify { namespace SgTypeModifier {
    /** Convert SgTypeModifier::type_modifier_enum enum constant to a string. */
    const char* type_modifier_enum(long);

    /** Convert SgTypeModifier::type_modifier_enum enum constant to a string. */
    std::string type_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTypeModifier_type_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 16350
namespace stringify { namespace SgTypeModifier {
    /** Convert SgTypeModifier::gnu_extension_machine_mode_enum enum constant to a string. */
    const char* gnu_extension_machine_mode_enum(long);

    /** Convert SgTypeModifier::gnu_extension_machine_mode_enum enum constant to a string. */
    std::string gnu_extension_machine_mode_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTypeModifier_gnu_extension_machine_mode_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17133
namespace stringify { namespace SgDeclarationModifier {
    /** Convert SgDeclarationModifier::declaration_modifier_enum enum constant to a string. */
    const char* declaration_modifier_enum(long);

    /** Convert SgDeclarationModifier::declaration_modifier_enum enum constant to a string. */
    std::string declaration_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgDeclarationModifier_declaration_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17180
namespace stringify { namespace SgDeclarationModifier {
    /** Convert SgDeclarationModifier::gnu_declaration_visability_enum enum constant to a string. */
    const char* gnu_declaration_visability_enum(long);

    /** Convert SgDeclarationModifier::gnu_declaration_visability_enum enum constant to a string. */
    std::string gnu_declaration_visability_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgDeclarationModifier_gnu_declaration_visability_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17899
namespace stringify { namespace SgOpenclAccessModeModifier {
    /** Convert SgOpenclAccessModeModifier::access_mode_modifier_enum enum constant to a string. */
    const char* access_mode_modifier_enum(long);

    /** Convert SgOpenclAccessModeModifier::access_mode_modifier_enum enum constant to a string. */
    std::string access_mode_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOpenclAccessModeModifier_access_mode_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 22508
namespace stringify { namespace Sg_File_Info {
    /** Convert Sg_File_Info::classifier enum constant to a string. */
    const char* classifier(long);

    /** Convert Sg_File_Info::classifier enum constant to a string. */
    std::string classifier(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySg_File_Info_classifier(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 22759
namespace stringify { namespace Sg_File_Info {
    /** Convert Sg_File_Info::p_fileflags enum constant to a string. */
    const char* p_fileflags(long);

    /** Convert Sg_File_Info::p_fileflags enum constant to a string. */
    std::string p_fileflags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySg_File_Info_p_fileflags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 23329
namespace stringify { namespace SgFile {
    /** Convert SgFile::outputFormatOption_enum enum constant to a string. */
    const char* outputFormatOption_enum(long);

    /** Convert SgFile::outputFormatOption_enum enum constant to a string. */
    std::string outputFormatOption_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgFile_outputFormatOption_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 23344
namespace stringify { namespace SgFile {
    /** Convert SgFile::languageOption_enum enum constant to a string. */
    const char* languageOption_enum(long);

    /** Convert SgFile::languageOption_enum enum constant to a string. */
    std::string languageOption_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgFile_languageOption_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 26857
namespace stringify { namespace SgProject {
    /** Convert SgProject::template_instantiation_enum enum constant to a string. */
    const char* template_instantiation_enum(long);

    /** Convert SgProject::template_instantiation_enum enum constant to a string. */
    std::string template_instantiation_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgProject_template_instantiation_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 28805
namespace stringify { namespace SgUnparse_Info {
    /** Convert SgUnparse_Info::unparse_type_num enum constant to a string. */
    const char* unparse_type_num(long);

    /** Convert SgUnparse_Info::unparse_type_num enum constant to a string. */
    std::string unparse_type_num(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgUnparse_Info_unparse_type_num(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 28966
namespace stringify { namespace SgUnparse_Info {
    /** Convert SgUnparse_Info::access_attr_enum enum constant to a string. */
    const char* access_attr_enum(long);

    /** Convert SgUnparse_Info::access_attr_enum enum constant to a string. */
    std::string access_attr_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgUnparse_Info_access_attr_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 31481
namespace stringify { namespace SgTemplateParameter {
    /** Convert SgTemplateParameter::template_parameter_enum enum constant to a string. */
    const char* template_parameter_enum(long);

    /** Convert SgTemplateParameter::template_parameter_enum enum constant to a string. */
    std::string template_parameter_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateParameter_template_parameter_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 32041
namespace stringify { namespace SgTemplateArgument {
    /** Convert SgTemplateArgument::template_argument_enum enum constant to a string. */
    const char* template_argument_enum(long);

    /** Convert SgTemplateArgument::template_argument_enum enum constant to a string. */
    std::string template_argument_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateArgument_template_argument_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 36227
namespace stringify { namespace SgGraph {
    /** Convert SgGraph::GraphEdgeType enum constant to a string. */
    const char* GraphEdgeType(long);

    /** Convert SgGraph::GraphEdgeType enum constant to a string. */
    std::string GraphEdgeType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgGraphGraphEdgeType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 36241
namespace stringify { namespace SgGraph {
    /** Convert SgGraph::GraphProperties enum constant to a string. */
    const char* GraphProperties(long);

    /** Convert SgGraph::GraphProperties enum constant to a string. */
    std::string GraphProperties(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgGraphGraphProperties(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 45810
namespace stringify { namespace SgDataStatementValue {
    /** Convert SgDataStatementValue::data_statement_value_enum enum constant to a string. */
    const char* data_statement_value_enum(long);

    /** Convert SgDataStatementValue::data_statement_value_enum enum constant to a string. */
    std::string data_statement_value_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgDataStatementValue_data_statement_value_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 47413
namespace stringify { namespace SgType {
    /** Convert SgType::useWithinDeclarationEnum enum constant to a string. */
    const char* useWithinDeclarationEnum(long);

    /** Convert SgType::useWithinDeclarationEnum enum constant to a string. */
    std::string useWithinDeclarationEnum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgType_useWithinDeclarationEnum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 47431
namespace stringify { namespace SgType {
    /** Convert SgType::fortran_attribute_specifiers_enum enum constant to a string. */
    const char* fortran_attribute_specifiers_enum(long);

    /** Convert SgType::fortran_attribute_specifiers_enum enum constant to a string. */
    std::string fortran_attribute_specifiers_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgType_fortran_attribute_specifiers_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 67153
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::modifiers enum constant to a string. */
    const char* modifiers(long);

    /** Convert SgModifierType::modifiers enum constant to a string. */
    std::string modifiers(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgModifierType_modifiers(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 67207
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::type_modifier_enum enum constant to a string. */
    const char* type_modifier_enum(long);

    /** Convert SgModifierType::type_modifier_enum enum constant to a string. */
    std::string type_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgModifierType_type_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 67224
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::storage_modifier_enum enum constant to a string. */
    const char* storage_modifier_enum(long);

    /** Convert SgModifierType::storage_modifier_enum enum constant to a string. */
    std::string storage_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgModifierType_storage_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 67246
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::access_modifier_enum enum constant to a string. */
    const char* access_modifier_enum(long);

    /** Convert SgModifierType::access_modifier_enum enum constant to a string. */
    std::string access_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgModifierType_access_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 68485
namespace stringify { namespace SgMemberFunctionType {
    /** Convert SgMemberFunctionType::mfunc_specifier_enum enum constant to a string. */
    const char* mfunc_specifier_enum(long);

    /** Convert SgMemberFunctionType::mfunc_specifier_enum enum constant to a string. */
    std::string mfunc_specifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgMemberFunctionType_mfunc_specifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 79821
namespace stringify { namespace SgLocatedNode {
    /** Convert SgLocatedNode::PositionOfPreprocessingInfoInListType enum constant to a string. */
    const char* PositionOfPreprocessingInfoInListType(long);

    /** Convert SgLocatedNode::PositionOfPreprocessingInfoInListType enum constant to a string. */
    std::string PositionOfPreprocessingInfoInListType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgLocatedNodePositionOfPreprocessingInfoInListType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 80572
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Keywords enum constant to a string. */
    const char* ROSE_Fortran_Keywords(long);

    /** Convert SgToken::ROSE_Fortran_Keywords enum constant to a string. */
    std::string ROSE_Fortran_Keywords(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Keywords(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 80739
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(long);

    /** Convert SgToken::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTokenROSE_C_CXX_keywords(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 80808
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(long);

    /** Convert SgToken::ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Operators(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 80835
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_C_CXX_Operators enum constant to a string. */
    const char* ROSE_C_CXX_Operators(long);

    /** Convert SgToken::ROSE_C_CXX_Operators enum constant to a string. */
    std::string ROSE_C_CXX_Operators(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTokenROSE_C_CXX_Operators(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 80915
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(long);

    /** Convert SgToken::ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Additional_Info(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 82379
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::preinitialization_enum enum constant to a string. */
    const char* preinitialization_enum(long);

    /** Convert SgInitializedName::preinitialization_enum enum constant to a string. */
    std::string preinitialization_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgInitializedName_preinitialization_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 82394
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::asm_register_name_enum enum constant to a string. */
    const char* asm_register_name_enum(long);

    /** Convert SgInitializedName::asm_register_name_enum enum constant to a string. */
    std::string asm_register_name_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgInitializedName_asm_register_name_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 82456
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::gnu_variable_attribute_enum enum constant to a string. */
    const char* gnu_variable_attribute_enum(long);

    /** Convert SgInitializedName::gnu_variable_attribute_enum enum constant to a string. */
    std::string gnu_variable_attribute_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgInitializedName_gnu_variable_attribute_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 82490
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::excess_specifier_enum enum constant to a string. */
    const char* excess_specifier_enum(long);

    /** Convert SgInitializedName::excess_specifier_enum enum constant to a string. */
    std::string excess_specifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgInitializedName_excess_specifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85463
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_default_option_enum enum constant to a string. */
    const char* omp_default_option_enum(long);

    /** Convert SgOmpClause::omp_default_option_enum enum constant to a string. */
    std::string omp_default_option_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_default_option_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85475
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_schedule_kind_enum enum constant to a string. */
    const char* omp_schedule_kind_enum(long);

    /** Convert SgOmpClause::omp_schedule_kind_enum enum constant to a string. */
    std::string omp_schedule_kind_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_schedule_kind_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85485
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_reduction_operator_enum enum constant to a string. */
    const char* omp_reduction_operator_enum(long);

    /** Convert SgOmpClause::omp_reduction_operator_enum enum constant to a string. */
    std::string omp_reduction_operator_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_reduction_operator_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85513
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_dependence_type_enum enum constant to a string. */
    const char* omp_dependence_type_enum(long);

    /** Convert SgOmpClause::omp_dependence_type_enum enum constant to a string. */
    std::string omp_dependence_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_dependence_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85523
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_map_operator_enum enum constant to a string. */
    const char* omp_map_operator_enum(long);

    /** Convert SgOmpClause::omp_map_operator_enum enum constant to a string. */
    std::string omp_map_operator_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_map_operator_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85534
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_map_dist_data_enum enum constant to a string. */
    const char* omp_map_dist_data_enum(long);

    /** Convert SgOmpClause::omp_map_dist_data_enum enum constant to a string. */
    std::string omp_map_dist_data_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_map_dist_data_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85544
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_proc_bind_policy_enum enum constant to a string. */
    const char* omp_proc_bind_policy_enum(long);

    /** Convert SgOmpClause::omp_proc_bind_policy_enum enum constant to a string. */
    std::string omp_proc_bind_policy_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_proc_bind_policy_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 85553
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_atomic_clause_enum enum constant to a string. */
    const char* omp_atomic_clause_enum(long);

    /** Convert SgOmpClause::omp_atomic_clause_enum enum constant to a string. */
    std::string omp_atomic_clause_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_atomic_clause_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 135902
namespace stringify { namespace SgUntypedType {
    /** Convert SgUntypedType::type_enum enum constant to a string. */
    const char* type_enum(long);

    /** Convert SgUntypedType::type_enum enum constant to a string. */
    std::string type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgUntypedType_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 159231
namespace stringify { namespace SgDeclarationStatement {
    /** Convert SgDeclarationStatement::template_specialization_enum enum constant to a string. */
    const char* template_specialization_enum(long);

    /** Convert SgDeclarationStatement::template_specialization_enum enum constant to a string. */
    std::string template_specialization_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgDeclarationStatement_template_specialization_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 159246
namespace stringify { namespace SgDeclarationStatement {
    /** Convert SgDeclarationStatement::gnu_extension_visability_attribute_enum enum constant to a string. */
    const char* gnu_extension_visability_attribute_enum(long);

    /** Convert SgDeclarationStatement::gnu_extension_visability_attribute_enum enum constant to a string. */
    std::string gnu_extension_visability_attribute_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgDeclarationStatement_gnu_extension_visability_attribute_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 160699
namespace stringify { namespace SgVariableDeclaration {
    /** Convert SgVariableDeclaration::gnu_extension_declaration_attributes_enum enum constant to a string. */
    const char* gnu_extension_declaration_attributes_enum(long);

    /** Convert SgVariableDeclaration::gnu_extension_declaration_attributes_enum enum constant to a string. */
    std::string gnu_extension_declaration_attributes_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgVariableDeclaration_gnu_extension_declaration_attributes_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 165125
namespace stringify { namespace SgAttributeSpecificationStatement {
    /** Convert SgAttributeSpecificationStatement::attribute_spec_enum enum constant to a string. */
    const char* attribute_spec_enum(long);

    /** Convert SgAttributeSpecificationStatement::attribute_spec_enum enum constant to a string. */
    std::string attribute_spec_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAttributeSpecificationStatement_attribute_spec_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 166187
namespace stringify { namespace SgTemplateDeclaration {
    /** Convert SgTemplateDeclaration::template_type_enum enum constant to a string. */
    const char* template_type_enum(long);

    /** Convert SgTemplateDeclaration::template_type_enum enum constant to a string. */
    std::string template_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateDeclaration_template_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 169271
namespace stringify { namespace SgInterfaceStatement {
    /** Convert SgInterfaceStatement::generic_spec_enum enum constant to a string. */
    const char* generic_spec_enum(long);

    /** Convert SgInterfaceStatement::generic_spec_enum enum constant to a string. */
    std::string generic_spec_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgInterfaceStatement_generic_spec_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 174531
namespace stringify { namespace SgClassDeclaration {
    /** Convert SgClassDeclaration::class_types enum constant to a string. */
    const char* class_types(long);

    /** Convert SgClassDeclaration::class_types enum constant to a string. */
    std::string class_types(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgClassDeclaration_class_types(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 175225
namespace stringify { namespace SgTemplateClassDeclaration {
    /** Convert SgTemplateClassDeclaration::class_types enum constant to a string. */
    const char* class_types(long);

    /** Convert SgTemplateClassDeclaration::class_types enum constant to a string. */
    std::string class_types(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateClassDeclaration_class_types(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 175762
namespace stringify { namespace SgTemplateInstantiationDecl {
    /** Convert SgTemplateInstantiationDecl::template_type_enum enum constant to a string. */
    const char* template_type_enum(long);

    /** Convert SgTemplateInstantiationDecl::template_type_enum enum constant to a string. */
    std::string template_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateInstantiationDecl_template_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 182257
namespace stringify { namespace SgTemplateInstantiationMemberFunctionDecl {
    /** Convert SgTemplateInstantiationMemberFunctionDecl::template_type_enum enum constant to a string. */
    const char* template_type_enum(long);

    /** Convert SgTemplateInstantiationMemberFunctionDecl::template_type_enum enum constant to a string. */
    std::string template_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateInstantiationMemberFunctionDecl_template_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 182826
namespace stringify { namespace SgTemplateInstantiationFunctionDecl {
    /** Convert SgTemplateInstantiationFunctionDecl::template_type_enum enum constant to a string. */
    const char* template_type_enum(long);

    /** Convert SgTemplateInstantiationFunctionDecl::template_type_enum enum constant to a string. */
    std::string template_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgTemplateInstantiationFunctionDecl_template_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 183913
namespace stringify { namespace SgProcedureHeaderStatement {
    /** Convert SgProcedureHeaderStatement::subprogram_kind_enum enum constant to a string. */
    const char* subprogram_kind_enum(long);

    /** Convert SgProcedureHeaderStatement::subprogram_kind_enum enum constant to a string. */
    std::string subprogram_kind_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgProcedureHeaderStatement_subprogram_kind_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 205004
namespace stringify { namespace SgStopOrPauseStatement {
    /** Convert SgStopOrPauseStatement::stop_or_pause_enum enum constant to a string. */
    const char* stop_or_pause_enum(long);

    /** Convert SgStopOrPauseStatement::stop_or_pause_enum enum constant to a string. */
    std::string stop_or_pause_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgStopOrPauseStatement_stop_or_pause_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 205517
namespace stringify { namespace SgIOStatement {
    /** Convert SgIOStatement::io_statement_enum enum constant to a string. */
    const char* io_statement_enum(long);

    /** Convert SgIOStatement::io_statement_enum enum constant to a string. */
    std::string io_statement_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgIOStatement_io_statement_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 235703
namespace stringify { namespace SgUnaryOp {
    /** Convert SgUnaryOp::Sgop_mode enum constant to a string. */
    const char* Sgop_mode(long);

    /** Convert SgUnaryOp::Sgop_mode enum constant to a string. */
    std::string Sgop_mode(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgUnaryOpSgop_mode(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 240600
namespace stringify { namespace SgCastExp {
    /** Convert SgCastExp::cast_type_enum enum constant to a string. */
    const char* cast_type_enum(long);

    /** Convert SgCastExp::cast_type_enum enum constant to a string. */
    std::string cast_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgCastExp_cast_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 241177
namespace stringify { namespace SgThrowOp {
    /** Convert SgThrowOp::e_throw_kind enum constant to a string. */
    const char* e_throw_kind(long);

    /** Convert SgThrowOp::e_throw_kind enum constant to a string. */
    std::string e_throw_kind(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgThrowOp_e_throw_kind(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 308414
namespace stringify { namespace SgAsmOp {
    /** Convert SgAsmOp::asm_operand_modifier_enum enum constant to a string. */
    const char* asm_operand_modifier_enum(long);

    /** Convert SgAsmOp::asm_operand_modifier_enum enum constant to a string. */
    std::string asm_operand_modifier_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmOp_asm_operand_modifier_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 308433
namespace stringify { namespace SgAsmOp {
    /** Convert SgAsmOp::asm_operand_constraint_enum enum constant to a string. */
    const char* asm_operand_constraint_enum(long);

    /** Convert SgAsmOp::asm_operand_constraint_enum enum constant to a string. */
    std::string asm_operand_constraint_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmOp_asm_operand_constraint_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 336018
namespace stringify { namespace SgLabelSymbol {
    /** Convert SgLabelSymbol::label_type_enum enum constant to a string. */
    const char* label_type_enum(long);

    /** Convert SgLabelSymbol::label_type_enum enum constant to a string. */
    std::string label_type_enum(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgLabelSymbol_label_type_enum(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 375814
namespace stringify { namespace SgAsmLEFileHeader {
    /** Convert SgAsmLEFileHeader::LEFileHeaderFlags enum constant to a string. */
    const char* LEFileHeaderFlags(long);

    /** Convert SgAsmLEFileHeader::LEFileHeaderFlags enum constant to a string. */
    std::string LEFileHeaderFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmLEFileHeaderLEFileHeaderFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 376798
namespace stringify { namespace SgAsmNEFileHeader {
    /** Convert SgAsmNEFileHeader::HeaderFlags1 enum constant to a string. */
    const char* HeaderFlags1(long);

    /** Convert SgAsmNEFileHeader::HeaderFlags1 enum constant to a string. */
    std::string HeaderFlags1(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNEFileHeaderHeaderFlags1(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 376809
namespace stringify { namespace SgAsmNEFileHeader {
    /** Convert SgAsmNEFileHeader::HeaderFlags2 enum constant to a string. */
    const char* HeaderFlags2(long);

    /** Convert SgAsmNEFileHeader::HeaderFlags2 enum constant to a string. */
    std::string HeaderFlags2(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNEFileHeaderHeaderFlags2(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 418615
namespace stringify { namespace SgAsmNEEntryPoint {
    /** Convert SgAsmNEEntryPoint::NEEntryFlags enum constant to a string. */
    const char* NEEntryFlags(long);

    /** Convert SgAsmNEEntryPoint::NEEntryFlags enum constant to a string. */
    std::string NEEntryFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNEEntryPointNEEntryFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 419137
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocSrcType enum constant to a string. */
    const char* NERelocSrcType(long);

    /** Convert SgAsmNERelocEntry::NERelocSrcType enum constant to a string. */
    std::string NERelocSrcType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocSrcType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 419149
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocTgtType enum constant to a string. */
    const char* NERelocTgtType(long);

    /** Convert SgAsmNERelocEntry::NERelocTgtType enum constant to a string. */
    std::string NERelocTgtType(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocTgtType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 419156
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocModifiers enum constant to a string. */
    const char* NERelocModifiers(long);

    /** Convert SgAsmNERelocEntry::NERelocModifiers enum constant to a string. */
    std::string NERelocModifiers(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocModifiers(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 419161
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocFlags enum constant to a string. */
    const char* NERelocFlags(long);

    /** Convert SgAsmNERelocEntry::NERelocFlags enum constant to a string. */
    std::string NERelocFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 419795
namespace stringify { namespace SgAsmNESectionTableEntry {
    /** Convert SgAsmNESectionTableEntry::NESectionFlags enum constant to a string. */
    const char* NESectionFlags(long);

    /** Convert SgAsmNESectionTableEntry::NESectionFlags enum constant to a string. */
    std::string NESectionFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmNESectionTableEntryNESectionFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 421919
namespace stringify { namespace SgAsmLESectionTableEntry {
    /** Convert SgAsmLESectionTableEntry::LESectionFlags enum constant to a string. */
    const char* LESectionFlags(long);

    /** Convert SgAsmLESectionTableEntry::LESectionFlags enum constant to a string. */
    std::string LESectionFlags(long, const std::string &strip);
}}

namespace Rose {
    std::string stringifySgAsmLESectionTableEntryLESectionFlags(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 3
namespace stringify {
    /** Convert E_SgSourceFile enum constant to a string. */
    const char* E_SgSourceFile(long);

    /** Convert E_SgSourceFile enum constant to a string. */
    std::string E_SgSourceFile(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSourceFile(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 6
namespace stringify {
    /** Convert E_SgBinaryComposite enum constant to a string. */
    const char* E_SgBinaryComposite(long);

    /** Convert E_SgBinaryComposite enum constant to a string. */
    std::string E_SgBinaryComposite(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBinaryComposite(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 9
namespace stringify {
    /** Convert E_SgUnknownFile enum constant to a string. */
    const char* E_SgUnknownFile(long);

    /** Convert E_SgUnknownFile enum constant to a string. */
    std::string E_SgUnknownFile(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUnknownFile(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 12
namespace stringify {
    /** Convert E_SgProject enum constant to a string. */
    const char* E_SgProject(long);

    /** Convert E_SgProject enum constant to a string. */
    std::string E_SgProject(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgProject(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 15
namespace stringify {
    /** Convert E_SgExpBaseClass enum constant to a string. */
    const char* E_SgExpBaseClass(long);

    /** Convert E_SgExpBaseClass enum constant to a string. */
    std::string E_SgExpBaseClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExpBaseClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 18
namespace stringify {
    /** Convert E_SgBaseClass enum constant to a string. */
    const char* E_SgBaseClass(long);

    /** Convert E_SgBaseClass enum constant to a string. */
    std::string E_SgBaseClass(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBaseClass(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 21
namespace stringify {
    /** Convert E_SgTemplateParameter enum constant to a string. */
    const char* E_SgTemplateParameter(long);

    /** Convert E_SgTemplateParameter enum constant to a string. */
    std::string E_SgTemplateParameter(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateParameter(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 24
namespace stringify {
    /** Convert E_SgTemplateArgument enum constant to a string. */
    const char* E_SgTemplateArgument(long);

    /** Convert E_SgTemplateArgument enum constant to a string. */
    std::string E_SgTemplateArgument(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateArgument(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 27
namespace stringify {
    /** Convert E_SgDirectory enum constant to a string. */
    const char* E_SgDirectory(long);

    /** Convert E_SgDirectory enum constant to a string. */
    std::string E_SgDirectory(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDirectory(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 30
namespace stringify {
    /** Convert E_SgFileList enum constant to a string. */
    const char* E_SgFileList(long);

    /** Convert E_SgFileList enum constant to a string. */
    std::string E_SgFileList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFileList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 33
namespace stringify {
    /** Convert E_SgDirectoryList enum constant to a string. */
    const char* E_SgDirectoryList(long);

    /** Convert E_SgDirectoryList enum constant to a string. */
    std::string E_SgDirectoryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDirectoryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 36
namespace stringify {
    /** Convert E_SgTemplateArgumentList enum constant to a string. */
    const char* E_SgTemplateArgumentList(long);

    /** Convert E_SgTemplateArgumentList enum constant to a string. */
    std::string E_SgTemplateArgumentList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateArgumentList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 39
namespace stringify {
    /** Convert E_SgTemplateParameterList enum constant to a string. */
    const char* E_SgTemplateParameterList(long);

    /** Convert E_SgTemplateParameterList enum constant to a string. */
    std::string E_SgTemplateParameterList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateParameterList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 42
namespace stringify {
    /** Convert E_SgJavaImportStatementList enum constant to a string. */
    const char* E_SgJavaImportStatementList(long);

    /** Convert E_SgJavaImportStatementList enum constant to a string. */
    std::string E_SgJavaImportStatementList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaImportStatementList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 45
namespace stringify {
    /** Convert E_SgJavaClassDeclarationList enum constant to a string. */
    const char* E_SgJavaClassDeclarationList(long);

    /** Convert E_SgJavaClassDeclarationList enum constant to a string. */
    std::string E_SgJavaClassDeclarationList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaClassDeclarationList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 48
namespace stringify {
    /** Convert E_SgTypeUnknown enum constant to a string. */
    const char* E_SgTypeUnknown(long);

    /** Convert E_SgTypeUnknown enum constant to a string. */
    std::string E_SgTypeUnknown(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnknown(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 51
namespace stringify {
    /** Convert E_SgTypeChar enum constant to a string. */
    const char* E_SgTypeChar(long);

    /** Convert E_SgTypeChar enum constant to a string. */
    std::string E_SgTypeChar(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeChar(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 54
namespace stringify {
    /** Convert E_SgTypeSignedChar enum constant to a string. */
    const char* E_SgTypeSignedChar(long);

    /** Convert E_SgTypeSignedChar enum constant to a string. */
    std::string E_SgTypeSignedChar(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeSignedChar(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 57
namespace stringify {
    /** Convert E_SgTypeUnsignedChar enum constant to a string. */
    const char* E_SgTypeUnsignedChar(long);

    /** Convert E_SgTypeUnsignedChar enum constant to a string. */
    std::string E_SgTypeUnsignedChar(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedChar(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 60
namespace stringify {
    /** Convert E_SgTypeShort enum constant to a string. */
    const char* E_SgTypeShort(long);

    /** Convert E_SgTypeShort enum constant to a string. */
    std::string E_SgTypeShort(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeShort(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 63
namespace stringify {
    /** Convert E_SgTypeSignedShort enum constant to a string. */
    const char* E_SgTypeSignedShort(long);

    /** Convert E_SgTypeSignedShort enum constant to a string. */
    std::string E_SgTypeSignedShort(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeSignedShort(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 66
namespace stringify {
    /** Convert E_SgTypeUnsignedShort enum constant to a string. */
    const char* E_SgTypeUnsignedShort(long);

    /** Convert E_SgTypeUnsignedShort enum constant to a string. */
    std::string E_SgTypeUnsignedShort(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedShort(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 69
namespace stringify {
    /** Convert E_SgTypeInt enum constant to a string. */
    const char* E_SgTypeInt(long);

    /** Convert E_SgTypeInt enum constant to a string. */
    std::string E_SgTypeInt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeInt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 72
namespace stringify {
    /** Convert E_SgTypeSignedInt enum constant to a string. */
    const char* E_SgTypeSignedInt(long);

    /** Convert E_SgTypeSignedInt enum constant to a string. */
    std::string E_SgTypeSignedInt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeSignedInt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 75
namespace stringify {
    /** Convert E_SgTypeUnsignedInt enum constant to a string. */
    const char* E_SgTypeUnsignedInt(long);

    /** Convert E_SgTypeUnsignedInt enum constant to a string. */
    std::string E_SgTypeUnsignedInt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedInt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 78
namespace stringify {
    /** Convert E_SgTypeLong enum constant to a string. */
    const char* E_SgTypeLong(long);

    /** Convert E_SgTypeLong enum constant to a string. */
    std::string E_SgTypeLong(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeLong(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 81
namespace stringify {
    /** Convert E_SgTypeSignedLong enum constant to a string. */
    const char* E_SgTypeSignedLong(long);

    /** Convert E_SgTypeSignedLong enum constant to a string. */
    std::string E_SgTypeSignedLong(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeSignedLong(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 84
namespace stringify {
    /** Convert E_SgTypeUnsignedLong enum constant to a string. */
    const char* E_SgTypeUnsignedLong(long);

    /** Convert E_SgTypeUnsignedLong enum constant to a string. */
    std::string E_SgTypeUnsignedLong(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedLong(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 87
namespace stringify {
    /** Convert E_SgTypeVoid enum constant to a string. */
    const char* E_SgTypeVoid(long);

    /** Convert E_SgTypeVoid enum constant to a string. */
    std::string E_SgTypeVoid(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeVoid(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 90
namespace stringify {
    /** Convert E_SgTypeGlobalVoid enum constant to a string. */
    const char* E_SgTypeGlobalVoid(long);

    /** Convert E_SgTypeGlobalVoid enum constant to a string. */
    std::string E_SgTypeGlobalVoid(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeGlobalVoid(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 93
namespace stringify {
    /** Convert E_SgTypeWchar enum constant to a string. */
    const char* E_SgTypeWchar(long);

    /** Convert E_SgTypeWchar enum constant to a string. */
    std::string E_SgTypeWchar(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeWchar(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 96
namespace stringify {
    /** Convert E_SgTypeFloat enum constant to a string. */
    const char* E_SgTypeFloat(long);

    /** Convert E_SgTypeFloat enum constant to a string. */
    std::string E_SgTypeFloat(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeFloat(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 99
namespace stringify {
    /** Convert E_SgTypeDouble enum constant to a string. */
    const char* E_SgTypeDouble(long);

    /** Convert E_SgTypeDouble enum constant to a string. */
    std::string E_SgTypeDouble(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeDouble(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 102
namespace stringify {
    /** Convert E_SgTypeLongLong enum constant to a string. */
    const char* E_SgTypeLongLong(long);

    /** Convert E_SgTypeLongLong enum constant to a string. */
    std::string E_SgTypeLongLong(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeLongLong(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 105
namespace stringify {
    /** Convert E_SgTypeSignedLongLong enum constant to a string. */
    const char* E_SgTypeSignedLongLong(long);

    /** Convert E_SgTypeSignedLongLong enum constant to a string. */
    std::string E_SgTypeSignedLongLong(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeSignedLongLong(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 108
namespace stringify {
    /** Convert E_SgTypeUnsignedLongLong enum constant to a string. */
    const char* E_SgTypeUnsignedLongLong(long);

    /** Convert E_SgTypeUnsignedLongLong enum constant to a string. */
    std::string E_SgTypeUnsignedLongLong(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedLongLong(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 111
namespace stringify {
    /** Convert E_SgTypeSigned128bitInteger enum constant to a string. */
    const char* E_SgTypeSigned128bitInteger(long);

    /** Convert E_SgTypeSigned128bitInteger enum constant to a string. */
    std::string E_SgTypeSigned128bitInteger(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeSigned128bitInteger(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 114
namespace stringify {
    /** Convert E_SgTypeUnsigned128bitInteger enum constant to a string. */
    const char* E_SgTypeUnsigned128bitInteger(long);

    /** Convert E_SgTypeUnsigned128bitInteger enum constant to a string. */
    std::string E_SgTypeUnsigned128bitInteger(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeUnsigned128bitInteger(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 117
namespace stringify {
    /** Convert E_SgTypeLongDouble enum constant to a string. */
    const char* E_SgTypeLongDouble(long);

    /** Convert E_SgTypeLongDouble enum constant to a string. */
    std::string E_SgTypeLongDouble(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeLongDouble(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 120
namespace stringify {
    /** Convert E_SgTypeString enum constant to a string. */
    const char* E_SgTypeString(long);

    /** Convert E_SgTypeString enum constant to a string. */
    std::string E_SgTypeString(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeString(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 123
namespace stringify {
    /** Convert E_SgTypeBool enum constant to a string. */
    const char* E_SgTypeBool(long);

    /** Convert E_SgTypeBool enum constant to a string. */
    std::string E_SgTypeBool(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeBool(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 126
namespace stringify {
    /** Convert E_SgPointerMemberType enum constant to a string. */
    const char* E_SgPointerMemberType(long);

    /** Convert E_SgPointerMemberType enum constant to a string. */
    std::string E_SgPointerMemberType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPointerMemberType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 129
namespace stringify {
    /** Convert E_SgPointerType enum constant to a string. */
    const char* E_SgPointerType(long);

    /** Convert E_SgPointerType enum constant to a string. */
    std::string E_SgPointerType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPointerType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 132
namespace stringify {
    /** Convert E_SgReferenceType enum constant to a string. */
    const char* E_SgReferenceType(long);

    /** Convert E_SgReferenceType enum constant to a string. */
    std::string E_SgReferenceType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgReferenceType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 135
namespace stringify {
    /** Convert E_SgJavaParameterType enum constant to a string. */
    const char* E_SgJavaParameterType(long);

    /** Convert E_SgJavaParameterType enum constant to a string. */
    std::string E_SgJavaParameterType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaParameterType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 138
namespace stringify {
    /** Convert E_SgClassType enum constant to a string. */
    const char* E_SgClassType(long);

    /** Convert E_SgClassType enum constant to a string. */
    std::string E_SgClassType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgClassType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 141
namespace stringify {
    /** Convert E_SgJavaParameterizedType enum constant to a string. */
    const char* E_SgJavaParameterizedType(long);

    /** Convert E_SgJavaParameterizedType enum constant to a string. */
    std::string E_SgJavaParameterizedType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaParameterizedType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 144
namespace stringify {
    /** Convert E_SgJavaQualifiedType enum constant to a string. */
    const char* E_SgJavaQualifiedType(long);

    /** Convert E_SgJavaQualifiedType enum constant to a string. */
    std::string E_SgJavaQualifiedType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaQualifiedType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 147
namespace stringify {
    /** Convert E_SgEnumType enum constant to a string. */
    const char* E_SgEnumType(long);

    /** Convert E_SgEnumType enum constant to a string. */
    std::string E_SgEnumType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgEnumType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 150
namespace stringify {
    /** Convert E_SgTypedefType enum constant to a string. */
    const char* E_SgTypedefType(long);

    /** Convert E_SgTypedefType enum constant to a string. */
    std::string E_SgTypedefType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypedefType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 153
namespace stringify {
    /** Convert E_SgJavaWildcardType enum constant to a string. */
    const char* E_SgJavaWildcardType(long);

    /** Convert E_SgJavaWildcardType enum constant to a string. */
    std::string E_SgJavaWildcardType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaWildcardType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 156
namespace stringify {
    /** Convert E_SgNamedType enum constant to a string. */
    const char* E_SgNamedType(long);

    /** Convert E_SgNamedType enum constant to a string. */
    std::string E_SgNamedType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNamedType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 159
namespace stringify {
    /** Convert E_SgModifierType enum constant to a string. */
    const char* E_SgModifierType(long);

    /** Convert E_SgModifierType enum constant to a string. */
    std::string E_SgModifierType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgModifierType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 162
namespace stringify {
    /** Convert E_SgPartialFunctionModifierType enum constant to a string. */
    const char* E_SgPartialFunctionModifierType(long);

    /** Convert E_SgPartialFunctionModifierType enum constant to a string. */
    std::string E_SgPartialFunctionModifierType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPartialFunctionModifierType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 165
namespace stringify {
    /** Convert E_SgPartialFunctionType enum constant to a string. */
    const char* E_SgPartialFunctionType(long);

    /** Convert E_SgPartialFunctionType enum constant to a string. */
    std::string E_SgPartialFunctionType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPartialFunctionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 168
namespace stringify {
    /** Convert E_SgMemberFunctionType enum constant to a string. */
    const char* E_SgMemberFunctionType(long);

    /** Convert E_SgMemberFunctionType enum constant to a string. */
    std::string E_SgMemberFunctionType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 171
namespace stringify {
    /** Convert E_SgFunctionType enum constant to a string. */
    const char* E_SgFunctionType(long);

    /** Convert E_SgFunctionType enum constant to a string. */
    std::string E_SgFunctionType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 174
namespace stringify {
    /** Convert E_SgArrayType enum constant to a string. */
    const char* E_SgArrayType(long);

    /** Convert E_SgArrayType enum constant to a string. */
    std::string E_SgArrayType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgArrayType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 177
namespace stringify {
    /** Convert E_SgTypeEllipse enum constant to a string. */
    const char* E_SgTypeEllipse(long);

    /** Convert E_SgTypeEllipse enum constant to a string. */
    std::string E_SgTypeEllipse(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeEllipse(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 180
namespace stringify {
    /** Convert E_SgTemplateType enum constant to a string. */
    const char* E_SgTemplateType(long);

    /** Convert E_SgTemplateType enum constant to a string. */
    std::string E_SgTemplateType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 183
namespace stringify {
    /** Convert E_SgQualifiedNameType enum constant to a string. */
    const char* E_SgQualifiedNameType(long);

    /** Convert E_SgQualifiedNameType enum constant to a string. */
    std::string E_SgQualifiedNameType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgQualifiedNameType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 186
namespace stringify {
    /** Convert E_SgTypeComplex enum constant to a string. */
    const char* E_SgTypeComplex(long);

    /** Convert E_SgTypeComplex enum constant to a string. */
    std::string E_SgTypeComplex(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeComplex(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 189
namespace stringify {
    /** Convert E_SgTypeImaginary enum constant to a string. */
    const char* E_SgTypeImaginary(long);

    /** Convert E_SgTypeImaginary enum constant to a string. */
    std::string E_SgTypeImaginary(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeImaginary(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 192
namespace stringify {
    /** Convert E_SgTypeDefault enum constant to a string. */
    const char* E_SgTypeDefault(long);

    /** Convert E_SgTypeDefault enum constant to a string. */
    std::string E_SgTypeDefault(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeDefault(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 195
namespace stringify {
    /** Convert E_SgTypeCAFTeam enum constant to a string. */
    const char* E_SgTypeCAFTeam(long);

    /** Convert E_SgTypeCAFTeam enum constant to a string. */
    std::string E_SgTypeCAFTeam(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeCAFTeam(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 198
namespace stringify {
    /** Convert E_SgTypeCrayPointer enum constant to a string. */
    const char* E_SgTypeCrayPointer(long);

    /** Convert E_SgTypeCrayPointer enum constant to a string. */
    std::string E_SgTypeCrayPointer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeCrayPointer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 201
namespace stringify {
    /** Convert E_SgTypeLabel enum constant to a string. */
    const char* E_SgTypeLabel(long);

    /** Convert E_SgTypeLabel enum constant to a string. */
    std::string E_SgTypeLabel(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeLabel(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 204
namespace stringify {
    /** Convert E_SgJavaUnionType enum constant to a string. */
    const char* E_SgJavaUnionType(long);

    /** Convert E_SgJavaUnionType enum constant to a string. */
    std::string E_SgJavaUnionType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaUnionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 207
namespace stringify {
    /** Convert E_SgRvalueReferenceType enum constant to a string. */
    const char* E_SgRvalueReferenceType(long);

    /** Convert E_SgRvalueReferenceType enum constant to a string. */
    std::string E_SgRvalueReferenceType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRvalueReferenceType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 210
namespace stringify {
    /** Convert E_SgTypeNullptr enum constant to a string. */
    const char* E_SgTypeNullptr(long);

    /** Convert E_SgTypeNullptr enum constant to a string. */
    std::string E_SgTypeNullptr(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeNullptr(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 213
namespace stringify {
    /** Convert E_SgDeclType enum constant to a string. */
    const char* E_SgDeclType(long);

    /** Convert E_SgDeclType enum constant to a string. */
    std::string E_SgDeclType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDeclType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 216
namespace stringify {
    /** Convert E_SgTypeOfType enum constant to a string. */
    const char* E_SgTypeOfType(long);

    /** Convert E_SgTypeOfType enum constant to a string. */
    std::string E_SgTypeOfType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeOfType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 219
namespace stringify {
    /** Convert E_SgTypeMatrix enum constant to a string. */
    const char* E_SgTypeMatrix(long);

    /** Convert E_SgTypeMatrix enum constant to a string. */
    std::string E_SgTypeMatrix(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeMatrix(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 222
namespace stringify {
    /** Convert E_SgTypeTuple enum constant to a string. */
    const char* E_SgTypeTuple(long);

    /** Convert E_SgTypeTuple enum constant to a string. */
    std::string E_SgTypeTuple(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeTuple(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 225
namespace stringify {
    /** Convert E_SgTypeChar16 enum constant to a string. */
    const char* E_SgTypeChar16(long);

    /** Convert E_SgTypeChar16 enum constant to a string. */
    std::string E_SgTypeChar16(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeChar16(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 228
namespace stringify {
    /** Convert E_SgTypeChar32 enum constant to a string. */
    const char* E_SgTypeChar32(long);

    /** Convert E_SgTypeChar32 enum constant to a string. */
    std::string E_SgTypeChar32(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeChar32(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 231
namespace stringify {
    /** Convert E_SgType enum constant to a string. */
    const char* E_SgType(long);

    /** Convert E_SgType enum constant to a string. */
    std::string E_SgType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 234
namespace stringify {
    /** Convert E_SgCommonBlockObject enum constant to a string. */
    const char* E_SgCommonBlockObject(long);

    /** Convert E_SgCommonBlockObject enum constant to a string. */
    std::string E_SgCommonBlockObject(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCommonBlockObject(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 237
namespace stringify {
    /** Convert E_SgInitializedName enum constant to a string. */
    const char* E_SgInitializedName(long);

    /** Convert E_SgInitializedName enum constant to a string. */
    std::string E_SgInitializedName(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgInitializedName(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 240
namespace stringify {
    /** Convert E_SgJavaMemberValuePair enum constant to a string. */
    const char* E_SgJavaMemberValuePair(long);

    /** Convert E_SgJavaMemberValuePair enum constant to a string. */
    std::string E_SgJavaMemberValuePair(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaMemberValuePair(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 243
namespace stringify {
    /** Convert E_SgOmpOrderedClause enum constant to a string. */
    const char* E_SgOmpOrderedClause(long);

    /** Convert E_SgOmpOrderedClause enum constant to a string. */
    std::string E_SgOmpOrderedClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpOrderedClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 246
namespace stringify {
    /** Convert E_SgOmpCollapseClause enum constant to a string. */
    const char* E_SgOmpCollapseClause(long);

    /** Convert E_SgOmpCollapseClause enum constant to a string. */
    std::string E_SgOmpCollapseClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpCollapseClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 249
namespace stringify {
    /** Convert E_SgOmpIfClause enum constant to a string. */
    const char* E_SgOmpIfClause(long);

    /** Convert E_SgOmpIfClause enum constant to a string. */
    std::string E_SgOmpIfClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpIfClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 252
namespace stringify {
    /** Convert E_SgOmpNumThreadsClause enum constant to a string. */
    const char* E_SgOmpNumThreadsClause(long);

    /** Convert E_SgOmpNumThreadsClause enum constant to a string. */
    std::string E_SgOmpNumThreadsClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpNumThreadsClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 255
namespace stringify {
    /** Convert E_SgOmpDeviceClause enum constant to a string. */
    const char* E_SgOmpDeviceClause(long);

    /** Convert E_SgOmpDeviceClause enum constant to a string. */
    std::string E_SgOmpDeviceClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpDeviceClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 258
namespace stringify {
    /** Convert E_SgOmpSafelenClause enum constant to a string. */
    const char* E_SgOmpSafelenClause(long);

    /** Convert E_SgOmpSafelenClause enum constant to a string. */
    std::string E_SgOmpSafelenClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSafelenClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 261
namespace stringify {
    /** Convert E_SgOmpSimdlenClause enum constant to a string. */
    const char* E_SgOmpSimdlenClause(long);

    /** Convert E_SgOmpSimdlenClause enum constant to a string. */
    std::string E_SgOmpSimdlenClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSimdlenClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 264
namespace stringify {
    /** Convert E_SgOmpFinalClause enum constant to a string. */
    const char* E_SgOmpFinalClause(long);

    /** Convert E_SgOmpFinalClause enum constant to a string. */
    std::string E_SgOmpFinalClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpFinalClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 267
namespace stringify {
    /** Convert E_SgOmpPriorityClause enum constant to a string. */
    const char* E_SgOmpPriorityClause(long);

    /** Convert E_SgOmpPriorityClause enum constant to a string. */
    std::string E_SgOmpPriorityClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpPriorityClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 270
namespace stringify {
    /** Convert E_SgOmpExpressionClause enum constant to a string. */
    const char* E_SgOmpExpressionClause(long);

    /** Convert E_SgOmpExpressionClause enum constant to a string. */
    std::string E_SgOmpExpressionClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpExpressionClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 273
namespace stringify {
    /** Convert E_SgOmpCopyprivateClause enum constant to a string. */
    const char* E_SgOmpCopyprivateClause(long);

    /** Convert E_SgOmpCopyprivateClause enum constant to a string. */
    std::string E_SgOmpCopyprivateClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpCopyprivateClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 276
namespace stringify {
    /** Convert E_SgOmpPrivateClause enum constant to a string. */
    const char* E_SgOmpPrivateClause(long);

    /** Convert E_SgOmpPrivateClause enum constant to a string. */
    std::string E_SgOmpPrivateClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpPrivateClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 279
namespace stringify {
    /** Convert E_SgOmpFirstprivateClause enum constant to a string. */
    const char* E_SgOmpFirstprivateClause(long);

    /** Convert E_SgOmpFirstprivateClause enum constant to a string. */
    std::string E_SgOmpFirstprivateClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpFirstprivateClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 282
namespace stringify {
    /** Convert E_SgOmpSharedClause enum constant to a string. */
    const char* E_SgOmpSharedClause(long);

    /** Convert E_SgOmpSharedClause enum constant to a string. */
    std::string E_SgOmpSharedClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSharedClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 285
namespace stringify {
    /** Convert E_SgOmpCopyinClause enum constant to a string. */
    const char* E_SgOmpCopyinClause(long);

    /** Convert E_SgOmpCopyinClause enum constant to a string. */
    std::string E_SgOmpCopyinClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpCopyinClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 288
namespace stringify {
    /** Convert E_SgOmpLastprivateClause enum constant to a string. */
    const char* E_SgOmpLastprivateClause(long);

    /** Convert E_SgOmpLastprivateClause enum constant to a string. */
    std::string E_SgOmpLastprivateClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpLastprivateClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 291
namespace stringify {
    /** Convert E_SgOmpReductionClause enum constant to a string. */
    const char* E_SgOmpReductionClause(long);

    /** Convert E_SgOmpReductionClause enum constant to a string. */
    std::string E_SgOmpReductionClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpReductionClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 294
namespace stringify {
    /** Convert E_SgOmpMapClause enum constant to a string. */
    const char* E_SgOmpMapClause(long);

    /** Convert E_SgOmpMapClause enum constant to a string. */
    std::string E_SgOmpMapClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpMapClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 297
namespace stringify {
    /** Convert E_SgOmpUniformClause enum constant to a string. */
    const char* E_SgOmpUniformClause(long);

    /** Convert E_SgOmpUniformClause enum constant to a string. */
    std::string E_SgOmpUniformClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpUniformClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 300
namespace stringify {
    /** Convert E_SgOmpAlignedClause enum constant to a string. */
    const char* E_SgOmpAlignedClause(long);

    /** Convert E_SgOmpAlignedClause enum constant to a string. */
    std::string E_SgOmpAlignedClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpAlignedClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 303
namespace stringify {
    /** Convert E_SgOmpLinearClause enum constant to a string. */
    const char* E_SgOmpLinearClause(long);

    /** Convert E_SgOmpLinearClause enum constant to a string. */
    std::string E_SgOmpLinearClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpLinearClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 306
namespace stringify {
    /** Convert E_SgOmpDependClause enum constant to a string. */
    const char* E_SgOmpDependClause(long);

    /** Convert E_SgOmpDependClause enum constant to a string. */
    std::string E_SgOmpDependClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpDependClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 309
namespace stringify {
    /** Convert E_SgOmpVariablesClause enum constant to a string. */
    const char* E_SgOmpVariablesClause(long);

    /** Convert E_SgOmpVariablesClause enum constant to a string. */
    std::string E_SgOmpVariablesClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpVariablesClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 312
namespace stringify {
    /** Convert E_SgOmpScheduleClause enum constant to a string. */
    const char* E_SgOmpScheduleClause(long);

    /** Convert E_SgOmpScheduleClause enum constant to a string. */
    std::string E_SgOmpScheduleClause(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpScheduleClause(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 315
namespace stringify {
    /** Convert E_SgUntypedUnaryOperator enum constant to a string. */
    const char* E_SgUntypedUnaryOperator(long);

    /** Convert E_SgUntypedUnaryOperator enum constant to a string. */
    std::string E_SgUntypedUnaryOperator(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedUnaryOperator(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 318
namespace stringify {
    /** Convert E_SgUntypedBinaryOperator enum constant to a string. */
    const char* E_SgUntypedBinaryOperator(long);

    /** Convert E_SgUntypedBinaryOperator enum constant to a string. */
    std::string E_SgUntypedBinaryOperator(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedBinaryOperator(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 321
namespace stringify {
    /** Convert E_SgUntypedExprListExpression enum constant to a string. */
    const char* E_SgUntypedExprListExpression(long);

    /** Convert E_SgUntypedExprListExpression enum constant to a string. */
    std::string E_SgUntypedExprListExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedExprListExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 324
namespace stringify {
    /** Convert E_SgUntypedSubscriptExpression enum constant to a string. */
    const char* E_SgUntypedSubscriptExpression(long);

    /** Convert E_SgUntypedSubscriptExpression enum constant to a string. */
    std::string E_SgUntypedSubscriptExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedSubscriptExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 327
namespace stringify {
    /** Convert E_SgUntypedNameListDeclaration enum constant to a string. */
    const char* E_SgUntypedNameListDeclaration(long);

    /** Convert E_SgUntypedNameListDeclaration enum constant to a string. */
    std::string E_SgUntypedNameListDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedNameListDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 330
namespace stringify {
    /** Convert E_SgUntypedUseStatement enum constant to a string. */
    const char* E_SgUntypedUseStatement(long);

    /** Convert E_SgUntypedUseStatement enum constant to a string. */
    std::string E_SgUntypedUseStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedUseStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 333
namespace stringify {
    /** Convert E_SgUntypedVariableDeclaration enum constant to a string. */
    const char* E_SgUntypedVariableDeclaration(long);

    /** Convert E_SgUntypedVariableDeclaration enum constant to a string. */
    std::string E_SgUntypedVariableDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedVariableDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 336
namespace stringify {
    /** Convert E_SgUntypedProgramHeaderDeclaration enum constant to a string. */
    const char* E_SgUntypedProgramHeaderDeclaration(long);

    /** Convert E_SgUntypedProgramHeaderDeclaration enum constant to a string. */
    std::string E_SgUntypedProgramHeaderDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedProgramHeaderDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 339
namespace stringify {
    /** Convert E_SgUntypedSubroutineDeclaration enum constant to a string. */
    const char* E_SgUntypedSubroutineDeclaration(long);

    /** Convert E_SgUntypedSubroutineDeclaration enum constant to a string. */
    std::string E_SgUntypedSubroutineDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedSubroutineDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 342
namespace stringify {
    /** Convert E_SgUntypedInterfaceDeclaration enum constant to a string. */
    const char* E_SgUntypedInterfaceDeclaration(long);

    /** Convert E_SgUntypedInterfaceDeclaration enum constant to a string. */
    std::string E_SgUntypedInterfaceDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedInterfaceDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 345
namespace stringify {
    /** Convert E_SgUntypedFunctionDeclaration enum constant to a string. */
    const char* E_SgUntypedFunctionDeclaration(long);

    /** Convert E_SgUntypedFunctionDeclaration enum constant to a string. */
    std::string E_SgUntypedFunctionDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 348
namespace stringify {
    /** Convert E_SgUntypedModuleDeclaration enum constant to a string. */
    const char* E_SgUntypedModuleDeclaration(long);

    /** Convert E_SgUntypedModuleDeclaration enum constant to a string. */
    std::string E_SgUntypedModuleDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedModuleDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 351
namespace stringify {
    /** Convert E_SgUntypedSubmoduleDeclaration enum constant to a string. */
    const char* E_SgUntypedSubmoduleDeclaration(long);

    /** Convert E_SgUntypedSubmoduleDeclaration enum constant to a string. */
    std::string E_SgUntypedSubmoduleDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedSubmoduleDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 354
namespace stringify {
    /** Convert E_SgUntypedBlockDataDeclaration enum constant to a string. */
    const char* E_SgUntypedBlockDataDeclaration(long);

    /** Convert E_SgUntypedBlockDataDeclaration enum constant to a string. */
    std::string E_SgUntypedBlockDataDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedBlockDataDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 357
namespace stringify {
    /** Convert E_SgUntypedPackageDeclaration enum constant to a string. */
    const char* E_SgUntypedPackageDeclaration(long);

    /** Convert E_SgUntypedPackageDeclaration enum constant to a string. */
    std::string E_SgUntypedPackageDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedPackageDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 360
namespace stringify {
    /** Convert E_SgUntypedStructureDeclaration enum constant to a string. */
    const char* E_SgUntypedStructureDeclaration(long);

    /** Convert E_SgUntypedStructureDeclaration enum constant to a string. */
    std::string E_SgUntypedStructureDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedStructureDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 363
namespace stringify {
    /** Convert E_SgUntypedExceptionHandlerDeclaration enum constant to a string. */
    const char* E_SgUntypedExceptionHandlerDeclaration(long);

    /** Convert E_SgUntypedExceptionHandlerDeclaration enum constant to a string. */
    std::string E_SgUntypedExceptionHandlerDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedExceptionHandlerDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 366
namespace stringify {
    /** Convert E_SgUntypedExceptionDeclaration enum constant to a string. */
    const char* E_SgUntypedExceptionDeclaration(long);

    /** Convert E_SgUntypedExceptionDeclaration enum constant to a string. */
    std::string E_SgUntypedExceptionDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedExceptionDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 369
namespace stringify {
    /** Convert E_SgUntypedTaskDeclaration enum constant to a string. */
    const char* E_SgUntypedTaskDeclaration(long);

    /** Convert E_SgUntypedTaskDeclaration enum constant to a string. */
    std::string E_SgUntypedTaskDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedTaskDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 372
namespace stringify {
    /** Convert E_SgUntypedUnitDeclaration enum constant to a string. */
    const char* E_SgUntypedUnitDeclaration(long);

    /** Convert E_SgUntypedUnitDeclaration enum constant to a string. */
    std::string E_SgUntypedUnitDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedUnitDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 375
namespace stringify {
    /** Convert E_SgUntypedAssignmentStatement enum constant to a string. */
    const char* E_SgUntypedAssignmentStatement(long);

    /** Convert E_SgUntypedAssignmentStatement enum constant to a string. */
    std::string E_SgUntypedAssignmentStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedAssignmentStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 378
namespace stringify {
    /** Convert E_SgUntypedBlockStatement enum constant to a string. */
    const char* E_SgUntypedBlockStatement(long);

    /** Convert E_SgUntypedBlockStatement enum constant to a string. */
    std::string E_SgUntypedBlockStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedBlockStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 381
namespace stringify {
    /** Convert E_SgUntypedExpressionStatement enum constant to a string. */
    const char* E_SgUntypedExpressionStatement(long);

    /** Convert E_SgUntypedExpressionStatement enum constant to a string. */
    std::string E_SgUntypedExpressionStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedExpressionStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 384
namespace stringify {
    /** Convert E_SgUntypedFunctionScope enum constant to a string. */
    const char* E_SgUntypedFunctionScope(long);

    /** Convert E_SgUntypedFunctionScope enum constant to a string. */
    std::string E_SgUntypedFunctionScope(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionScope(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 387
namespace stringify {
    /** Convert E_SgUntypedModuleScope enum constant to a string. */
    const char* E_SgUntypedModuleScope(long);

    /** Convert E_SgUntypedModuleScope enum constant to a string. */
    std::string E_SgUntypedModuleScope(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedModuleScope(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 390
namespace stringify {
    /** Convert E_SgUntypedGlobalScope enum constant to a string. */
    const char* E_SgUntypedGlobalScope(long);

    /** Convert E_SgUntypedGlobalScope enum constant to a string. */
    std::string E_SgUntypedGlobalScope(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedGlobalScope(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 393
namespace stringify {
    /** Convert E_SgUntypedScope enum constant to a string. */
    const char* E_SgUntypedScope(long);

    /** Convert E_SgUntypedScope enum constant to a string. */
    std::string E_SgUntypedScope(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedScope(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 396
namespace stringify {
    /** Convert E_SgUntypedIfStatement enum constant to a string. */
    const char* E_SgUntypedIfStatement(long);

    /** Convert E_SgUntypedIfStatement enum constant to a string. */
    std::string E_SgUntypedIfStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedIfStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 399
namespace stringify {
    /** Convert E_SgUntypedLabelStatement enum constant to a string. */
    const char* E_SgUntypedLabelStatement(long);

    /** Convert E_SgUntypedLabelStatement enum constant to a string. */
    std::string E_SgUntypedLabelStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedLabelStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 402
namespace stringify {
    /** Convert E_SgUntypedReturnStatement enum constant to a string. */
    const char* E_SgUntypedReturnStatement(long);

    /** Convert E_SgUntypedReturnStatement enum constant to a string. */
    std::string E_SgUntypedReturnStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedReturnStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 405
namespace stringify {
    /** Convert E_SgUntypedStopStatement enum constant to a string. */
    const char* E_SgUntypedStopStatement(long);

    /** Convert E_SgUntypedStopStatement enum constant to a string. */
    std::string E_SgUntypedStopStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedStopStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 408
namespace stringify {
    /** Convert E_SgUntypedArrayType enum constant to a string. */
    const char* E_SgUntypedArrayType(long);

    /** Convert E_SgUntypedArrayType enum constant to a string. */
    std::string E_SgUntypedArrayType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedArrayType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 411
namespace stringify {
    /** Convert E_SgUntypedType enum constant to a string. */
    const char* E_SgUntypedType(long);

    /** Convert E_SgUntypedType enum constant to a string. */
    std::string E_SgUntypedType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 414
namespace stringify {
    /** Convert E_SgUntypedFile enum constant to a string. */
    const char* E_SgUntypedFile(long);

    /** Convert E_SgUntypedFile enum constant to a string. */
    std::string E_SgUntypedFile(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedFile(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 417
namespace stringify {
    /** Convert E_SgUntypedStatementList enum constant to a string. */
    const char* E_SgUntypedStatementList(long);

    /** Convert E_SgUntypedStatementList enum constant to a string. */
    std::string E_SgUntypedStatementList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedStatementList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 420
namespace stringify {
    /** Convert E_SgUntypedDeclarationStatementList enum constant to a string. */
    const char* E_SgUntypedDeclarationStatementList(long);

    /** Convert E_SgUntypedDeclarationStatementList enum constant to a string. */
    std::string E_SgUntypedDeclarationStatementList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedDeclarationStatementList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 423
namespace stringify {
    /** Convert E_SgUntypedFunctionDeclarationList enum constant to a string. */
    const char* E_SgUntypedFunctionDeclarationList(long);

    /** Convert E_SgUntypedFunctionDeclarationList enum constant to a string. */
    std::string E_SgUntypedFunctionDeclarationList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionDeclarationList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 426
namespace stringify {
    /** Convert E_SgUntypedInitializedNameList enum constant to a string. */
    const char* E_SgUntypedInitializedNameList(long);

    /** Convert E_SgUntypedInitializedNameList enum constant to a string. */
    std::string E_SgUntypedInitializedNameList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedInitializedNameList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 429
namespace stringify {
    /** Convert E_SgUntypedNameList enum constant to a string. */
    const char* E_SgUntypedNameList(long);

    /** Convert E_SgUntypedNameList enum constant to a string. */
    std::string E_SgUntypedNameList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedNameList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 432
namespace stringify {
    /** Convert E_SgUntypedTokenList enum constant to a string. */
    const char* E_SgUntypedTokenList(long);

    /** Convert E_SgUntypedTokenList enum constant to a string. */
    std::string E_SgUntypedTokenList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedTokenList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 435
namespace stringify {
    /** Convert E_SgUntypedTokenPairList enum constant to a string. */
    const char* E_SgUntypedTokenPairList(long);

    /** Convert E_SgUntypedTokenPairList enum constant to a string. */
    std::string E_SgUntypedTokenPairList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUntypedTokenPairList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 438
namespace stringify {
    /** Convert E_SgLambdaCapture enum constant to a string. */
    const char* E_SgLambdaCapture(long);

    /** Convert E_SgLambdaCapture enum constant to a string. */
    std::string E_SgLambdaCapture(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLambdaCapture(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 441
namespace stringify {
    /** Convert E_SgLambdaCaptureList enum constant to a string. */
    const char* E_SgLambdaCaptureList(long);

    /** Convert E_SgLambdaCaptureList enum constant to a string. */
    std::string E_SgLambdaCaptureList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLambdaCaptureList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 444
namespace stringify {
    /** Convert E_SgGlobal enum constant to a string. */
    const char* E_SgGlobal(long);

    /** Convert E_SgGlobal enum constant to a string. */
    std::string E_SgGlobal(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgGlobal(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 447
namespace stringify {
    /** Convert E_SgBasicBlock enum constant to a string. */
    const char* E_SgBasicBlock(long);

    /** Convert E_SgBasicBlock enum constant to a string. */
    std::string E_SgBasicBlock(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBasicBlock(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 450
namespace stringify {
    /** Convert E_SgIfStmt enum constant to a string. */
    const char* E_SgIfStmt(long);

    /** Convert E_SgIfStmt enum constant to a string. */
    std::string E_SgIfStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIfStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 453
namespace stringify {
    /** Convert E_SgForStatement enum constant to a string. */
    const char* E_SgForStatement(long);

    /** Convert E_SgForStatement enum constant to a string. */
    std::string E_SgForStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgForStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 456
namespace stringify {
    /** Convert E_SgTemplateFunctionDefinition enum constant to a string. */
    const char* E_SgTemplateFunctionDefinition(long);

    /** Convert E_SgTemplateFunctionDefinition enum constant to a string. */
    std::string E_SgTemplateFunctionDefinition(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionDefinition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 459
namespace stringify {
    /** Convert E_SgFunctionDefinition enum constant to a string. */
    const char* E_SgFunctionDefinition(long);

    /** Convert E_SgFunctionDefinition enum constant to a string. */
    std::string E_SgFunctionDefinition(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionDefinition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 462
namespace stringify {
    /** Convert E_SgTemplateInstantiationDefn enum constant to a string. */
    const char* E_SgTemplateInstantiationDefn(long);

    /** Convert E_SgTemplateInstantiationDefn enum constant to a string. */
    std::string E_SgTemplateInstantiationDefn(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDefn(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 465
namespace stringify {
    /** Convert E_SgTemplateClassDefinition enum constant to a string. */
    const char* E_SgTemplateClassDefinition(long);

    /** Convert E_SgTemplateClassDefinition enum constant to a string. */
    std::string E_SgTemplateClassDefinition(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateClassDefinition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 468
namespace stringify {
    /** Convert E_SgClassDefinition enum constant to a string. */
    const char* E_SgClassDefinition(long);

    /** Convert E_SgClassDefinition enum constant to a string. */
    std::string E_SgClassDefinition(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgClassDefinition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 471
namespace stringify {
    /** Convert E_SgWhileStmt enum constant to a string. */
    const char* E_SgWhileStmt(long);

    /** Convert E_SgWhileStmt enum constant to a string. */
    std::string E_SgWhileStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgWhileStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 474
namespace stringify {
    /** Convert E_SgDoWhileStmt enum constant to a string. */
    const char* E_SgDoWhileStmt(long);

    /** Convert E_SgDoWhileStmt enum constant to a string. */
    std::string E_SgDoWhileStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDoWhileStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 477
namespace stringify {
    /** Convert E_SgSwitchStatement enum constant to a string. */
    const char* E_SgSwitchStatement(long);

    /** Convert E_SgSwitchStatement enum constant to a string. */
    std::string E_SgSwitchStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSwitchStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 480
namespace stringify {
    /** Convert E_SgCatchOptionStmt enum constant to a string. */
    const char* E_SgCatchOptionStmt(long);

    /** Convert E_SgCatchOptionStmt enum constant to a string. */
    std::string E_SgCatchOptionStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCatchOptionStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 483
namespace stringify {
    /** Convert E_SgNamespaceDefinitionStatement enum constant to a string. */
    const char* E_SgNamespaceDefinitionStatement(long);

    /** Convert E_SgNamespaceDefinitionStatement enum constant to a string. */
    std::string E_SgNamespaceDefinitionStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNamespaceDefinitionStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 486
namespace stringify {
    /** Convert E_SgAssociateStatement enum constant to a string. */
    const char* E_SgAssociateStatement(long);

    /** Convert E_SgAssociateStatement enum constant to a string. */
    std::string E_SgAssociateStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAssociateStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 489
namespace stringify {
    /** Convert E_SgFortranNonblockedDo enum constant to a string. */
    const char* E_SgFortranNonblockedDo(long);

    /** Convert E_SgFortranNonblockedDo enum constant to a string. */
    std::string E_SgFortranNonblockedDo(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFortranNonblockedDo(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 492
namespace stringify {
    /** Convert E_SgFortranDo enum constant to a string. */
    const char* E_SgFortranDo(long);

    /** Convert E_SgFortranDo enum constant to a string. */
    std::string E_SgFortranDo(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFortranDo(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 495
namespace stringify {
    /** Convert E_SgForAllStatement enum constant to a string. */
    const char* E_SgForAllStatement(long);

    /** Convert E_SgForAllStatement enum constant to a string. */
    std::string E_SgForAllStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgForAllStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 498
namespace stringify {
    /** Convert E_SgUpcForAllStatement enum constant to a string. */
    const char* E_SgUpcForAllStatement(long);

    /** Convert E_SgUpcForAllStatement enum constant to a string. */
    std::string E_SgUpcForAllStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcForAllStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 501
namespace stringify {
    /** Convert E_SgCAFWithTeamStatement enum constant to a string. */
    const char* E_SgCAFWithTeamStatement(long);

    /** Convert E_SgCAFWithTeamStatement enum constant to a string. */
    std::string E_SgCAFWithTeamStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCAFWithTeamStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 504
namespace stringify {
    /** Convert E_SgJavaForEachStatement enum constant to a string. */
    const char* E_SgJavaForEachStatement(long);

    /** Convert E_SgJavaForEachStatement enum constant to a string. */
    std::string E_SgJavaForEachStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaForEachStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 507
namespace stringify {
    /** Convert E_SgJavaLabelStatement enum constant to a string. */
    const char* E_SgJavaLabelStatement(long);

    /** Convert E_SgJavaLabelStatement enum constant to a string. */
    std::string E_SgJavaLabelStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaLabelStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 510
namespace stringify {
    /** Convert E_SgMatlabForStatement enum constant to a string. */
    const char* E_SgMatlabForStatement(long);

    /** Convert E_SgMatlabForStatement enum constant to a string. */
    std::string E_SgMatlabForStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMatlabForStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 513
namespace stringify {
    /** Convert E_SgRangeBasedForStatement enum constant to a string. */
    const char* E_SgRangeBasedForStatement(long);

    /** Convert E_SgRangeBasedForStatement enum constant to a string. */
    std::string E_SgRangeBasedForStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRangeBasedForStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 516
namespace stringify {
    /** Convert E_SgFunctionParameterList enum constant to a string. */
    const char* E_SgFunctionParameterList(long);

    /** Convert E_SgFunctionParameterList enum constant to a string. */
    std::string E_SgFunctionParameterList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 519
namespace stringify {
    /** Convert E_SgTemplateVariableDeclaration enum constant to a string. */
    const char* E_SgTemplateVariableDeclaration(long);

    /** Convert E_SgTemplateVariableDeclaration enum constant to a string. */
    std::string E_SgTemplateVariableDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateVariableDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 522
namespace stringify {
    /** Convert E_SgVariableDeclaration enum constant to a string. */
    const char* E_SgVariableDeclaration(long);

    /** Convert E_SgVariableDeclaration enum constant to a string. */
    std::string E_SgVariableDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVariableDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 525
namespace stringify {
    /** Convert E_SgVariableDefinition enum constant to a string. */
    const char* E_SgVariableDefinition(long);

    /** Convert E_SgVariableDefinition enum constant to a string. */
    std::string E_SgVariableDefinition(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVariableDefinition(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 528
namespace stringify {
    /** Convert E_SgEnumDeclaration enum constant to a string. */
    const char* E_SgEnumDeclaration(long);

    /** Convert E_SgEnumDeclaration enum constant to a string. */
    std::string E_SgEnumDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgEnumDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 531
namespace stringify {
    /** Convert E_SgAsmStmt enum constant to a string. */
    const char* E_SgAsmStmt(long);

    /** Convert E_SgAsmStmt enum constant to a string. */
    std::string E_SgAsmStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 534
namespace stringify {
    /** Convert E_SgTemplateInstantiationDirectiveStatement enum constant to a string. */
    const char* E_SgTemplateInstantiationDirectiveStatement(long);

    /** Convert E_SgTemplateInstantiationDirectiveStatement enum constant to a string. */
    std::string E_SgTemplateInstantiationDirectiveStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDirectiveStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 537
namespace stringify {
    /** Convert E_SgUseStatement enum constant to a string. */
    const char* E_SgUseStatement(long);

    /** Convert E_SgUseStatement enum constant to a string. */
    std::string E_SgUseStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUseStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 540
namespace stringify {
    /** Convert E_SgNamespaceDeclarationStatement enum constant to a string. */
    const char* E_SgNamespaceDeclarationStatement(long);

    /** Convert E_SgNamespaceDeclarationStatement enum constant to a string. */
    std::string E_SgNamespaceDeclarationStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNamespaceDeclarationStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 543
namespace stringify {
    /** Convert E_SgInterfaceStatement enum constant to a string. */
    const char* E_SgInterfaceStatement(long);

    /** Convert E_SgInterfaceStatement enum constant to a string. */
    std::string E_SgInterfaceStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgInterfaceStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 546
namespace stringify {
    /** Convert E_SgCommonBlock enum constant to a string. */
    const char* E_SgCommonBlock(long);

    /** Convert E_SgCommonBlock enum constant to a string. */
    std::string E_SgCommonBlock(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCommonBlock(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 549
namespace stringify {
    /** Convert E_SgTemplateTypedefDeclaration enum constant to a string. */
    const char* E_SgTemplateTypedefDeclaration(long);

    /** Convert E_SgTemplateTypedefDeclaration enum constant to a string. */
    std::string E_SgTemplateTypedefDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateTypedefDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 552
namespace stringify {
    /** Convert E_SgTemplateInstantiationTypedefDeclaration enum constant to a string. */
    const char* E_SgTemplateInstantiationTypedefDeclaration(long);

    /** Convert E_SgTemplateInstantiationTypedefDeclaration enum constant to a string. */
    std::string E_SgTemplateInstantiationTypedefDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationTypedefDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 555
namespace stringify {
    /** Convert E_SgTypedefDeclaration enum constant to a string. */
    const char* E_SgTypedefDeclaration(long);

    /** Convert E_SgTypedefDeclaration enum constant to a string. */
    std::string E_SgTypedefDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypedefDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 558
namespace stringify {
    /** Convert E_SgStatementFunctionStatement enum constant to a string. */
    const char* E_SgStatementFunctionStatement(long);

    /** Convert E_SgStatementFunctionStatement enum constant to a string. */
    std::string E_SgStatementFunctionStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgStatementFunctionStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 561
namespace stringify {
    /** Convert E_SgCtorInitializerList enum constant to a string. */
    const char* E_SgCtorInitializerList(long);

    /** Convert E_SgCtorInitializerList enum constant to a string. */
    std::string E_SgCtorInitializerList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCtorInitializerList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 564
namespace stringify {
    /** Convert E_SgPragmaDeclaration enum constant to a string. */
    const char* E_SgPragmaDeclaration(long);

    /** Convert E_SgPragmaDeclaration enum constant to a string. */
    std::string E_SgPragmaDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPragmaDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 567
namespace stringify {
    /** Convert E_SgTemplateClassDeclaration enum constant to a string. */
    const char* E_SgTemplateClassDeclaration(long);

    /** Convert E_SgTemplateClassDeclaration enum constant to a string. */
    std::string E_SgTemplateClassDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateClassDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 570
namespace stringify {
    /** Convert E_SgTemplateInstantiationDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationDecl(long);

    /** Convert E_SgTemplateInstantiationDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationDecl(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDecl(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 573
namespace stringify {
    /** Convert E_SgDerivedTypeStatement enum constant to a string. */
    const char* E_SgDerivedTypeStatement(long);

    /** Convert E_SgDerivedTypeStatement enum constant to a string. */
    std::string E_SgDerivedTypeStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDerivedTypeStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 576
namespace stringify {
    /** Convert E_SgModuleStatement enum constant to a string. */
    const char* E_SgModuleStatement(long);

    /** Convert E_SgModuleStatement enum constant to a string. */
    std::string E_SgModuleStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgModuleStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 579
namespace stringify {
    /** Convert E_SgJavaPackageDeclaration enum constant to a string. */
    const char* E_SgJavaPackageDeclaration(long);

    /** Convert E_SgJavaPackageDeclaration enum constant to a string. */
    std::string E_SgJavaPackageDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaPackageDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 582
namespace stringify {
    /** Convert E_SgClassDeclaration enum constant to a string. */
    const char* E_SgClassDeclaration(long);

    /** Convert E_SgClassDeclaration enum constant to a string. */
    std::string E_SgClassDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgClassDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 585
namespace stringify {
    /** Convert E_SgImplicitStatement enum constant to a string. */
    const char* E_SgImplicitStatement(long);

    /** Convert E_SgImplicitStatement enum constant to a string. */
    std::string E_SgImplicitStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgImplicitStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 588
namespace stringify {
    /** Convert E_SgTemplateFunctionDeclaration enum constant to a string. */
    const char* E_SgTemplateFunctionDeclaration(long);

    /** Convert E_SgTemplateFunctionDeclaration enum constant to a string. */
    std::string E_SgTemplateFunctionDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 591
namespace stringify {
    /** Convert E_SgTemplateMemberFunctionDeclaration enum constant to a string. */
    const char* E_SgTemplateMemberFunctionDeclaration(long);

    /** Convert E_SgTemplateMemberFunctionDeclaration enum constant to a string. */
    std::string E_SgTemplateMemberFunctionDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateMemberFunctionDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 594
namespace stringify {
    /** Convert E_SgTemplateInstantiationMemberFunctionDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationMemberFunctionDecl(long);

    /** Convert E_SgTemplateInstantiationMemberFunctionDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationMemberFunctionDecl(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationMemberFunctionDecl(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 597
namespace stringify {
    /** Convert E_SgMemberFunctionDeclaration enum constant to a string. */
    const char* E_SgMemberFunctionDeclaration(long);

    /** Convert E_SgMemberFunctionDeclaration enum constant to a string. */
    std::string E_SgMemberFunctionDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 600
namespace stringify {
    /** Convert E_SgTemplateInstantiationFunctionDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationFunctionDecl(long);

    /** Convert E_SgTemplateInstantiationFunctionDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationFunctionDecl(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationFunctionDecl(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 603
namespace stringify {
    /** Convert E_SgProgramHeaderStatement enum constant to a string. */
    const char* E_SgProgramHeaderStatement(long);

    /** Convert E_SgProgramHeaderStatement enum constant to a string. */
    std::string E_SgProgramHeaderStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgProgramHeaderStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 606
namespace stringify {
    /** Convert E_SgProcedureHeaderStatement enum constant to a string. */
    const char* E_SgProcedureHeaderStatement(long);

    /** Convert E_SgProcedureHeaderStatement enum constant to a string. */
    std::string E_SgProcedureHeaderStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgProcedureHeaderStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 609
namespace stringify {
    /** Convert E_SgEntryStatement enum constant to a string. */
    const char* E_SgEntryStatement(long);

    /** Convert E_SgEntryStatement enum constant to a string. */
    std::string E_SgEntryStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgEntryStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 612
namespace stringify {
    /** Convert E_SgFunctionDeclaration enum constant to a string. */
    const char* E_SgFunctionDeclaration(long);

    /** Convert E_SgFunctionDeclaration enum constant to a string. */
    std::string E_SgFunctionDeclaration(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionDeclaration(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 615
namespace stringify {
    /** Convert E_SgIncludeDirectiveStatement enum constant to a string. */
    const char* E_SgIncludeDirectiveStatement(long);

    /** Convert E_SgIncludeDirectiveStatement enum constant to a string. */
    std::string E_SgIncludeDirectiveStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIncludeDirectiveStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 618
namespace stringify {
    /** Convert E_SgOmpThreadprivateStatement enum constant to a string. */
    const char* E_SgOmpThreadprivateStatement(long);

    /** Convert E_SgOmpThreadprivateStatement enum constant to a string. */
    std::string E_SgOmpThreadprivateStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpThreadprivateStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 621
namespace stringify {
    /** Convert E_SgStmtDeclarationStatement enum constant to a string. */
    const char* E_SgStmtDeclarationStatement(long);

    /** Convert E_SgStmtDeclarationStatement enum constant to a string. */
    std::string E_SgStmtDeclarationStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgStmtDeclarationStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 624
namespace stringify {
    /** Convert E_SgOmpDeclareSimdStatement enum constant to a string. */
    const char* E_SgOmpDeclareSimdStatement(long);

    /** Convert E_SgOmpDeclareSimdStatement enum constant to a string. */
    std::string E_SgOmpDeclareSimdStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpDeclareSimdStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 627
namespace stringify {
    /** Convert E_SgExprStatement enum constant to a string. */
    const char* E_SgExprStatement(long);

    /** Convert E_SgExprStatement enum constant to a string. */
    std::string E_SgExprStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExprStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 630
namespace stringify {
    /** Convert E_SgLabelStatement enum constant to a string. */
    const char* E_SgLabelStatement(long);

    /** Convert E_SgLabelStatement enum constant to a string. */
    std::string E_SgLabelStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLabelStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 633
namespace stringify {
    /** Convert E_SgCaseOptionStmt enum constant to a string. */
    const char* E_SgCaseOptionStmt(long);

    /** Convert E_SgCaseOptionStmt enum constant to a string. */
    std::string E_SgCaseOptionStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCaseOptionStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 636
namespace stringify {
    /** Convert E_SgTryStmt enum constant to a string. */
    const char* E_SgTryStmt(long);

    /** Convert E_SgTryStmt enum constant to a string. */
    std::string E_SgTryStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTryStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 639
namespace stringify {
    /** Convert E_SgDefaultOptionStmt enum constant to a string. */
    const char* E_SgDefaultOptionStmt(long);

    /** Convert E_SgDefaultOptionStmt enum constant to a string. */
    std::string E_SgDefaultOptionStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDefaultOptionStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 642
namespace stringify {
    /** Convert E_SgReturnStmt enum constant to a string. */
    const char* E_SgReturnStmt(long);

    /** Convert E_SgReturnStmt enum constant to a string. */
    std::string E_SgReturnStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgReturnStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 645
namespace stringify {
    /** Convert E_SgSpawnStmt enum constant to a string. */
    const char* E_SgSpawnStmt(long);

    /** Convert E_SgSpawnStmt enum constant to a string. */
    std::string E_SgSpawnStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSpawnStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 648
namespace stringify {
    /** Convert E_SgForInitStatement enum constant to a string. */
    const char* E_SgForInitStatement(long);

    /** Convert E_SgForInitStatement enum constant to a string. */
    std::string E_SgForInitStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgForInitStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 651
namespace stringify {
    /** Convert E_SgCatchStatementSeq enum constant to a string. */
    const char* E_SgCatchStatementSeq(long);

    /** Convert E_SgCatchStatementSeq enum constant to a string. */
    std::string E_SgCatchStatementSeq(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCatchStatementSeq(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 654
namespace stringify {
    /** Convert E_SgPrintStatement enum constant to a string. */
    const char* E_SgPrintStatement(long);

    /** Convert E_SgPrintStatement enum constant to a string. */
    std::string E_SgPrintStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPrintStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 657
namespace stringify {
    /** Convert E_SgReadStatement enum constant to a string. */
    const char* E_SgReadStatement(long);

    /** Convert E_SgReadStatement enum constant to a string. */
    std::string E_SgReadStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgReadStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 660
namespace stringify {
    /** Convert E_SgWriteStatement enum constant to a string. */
    const char* E_SgWriteStatement(long);

    /** Convert E_SgWriteStatement enum constant to a string. */
    std::string E_SgWriteStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgWriteStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 663
namespace stringify {
    /** Convert E_SgOpenStatement enum constant to a string. */
    const char* E_SgOpenStatement(long);

    /** Convert E_SgOpenStatement enum constant to a string. */
    std::string E_SgOpenStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOpenStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 666
namespace stringify {
    /** Convert E_SgCloseStatement enum constant to a string. */
    const char* E_SgCloseStatement(long);

    /** Convert E_SgCloseStatement enum constant to a string. */
    std::string E_SgCloseStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCloseStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 669
namespace stringify {
    /** Convert E_SgInquireStatement enum constant to a string. */
    const char* E_SgInquireStatement(long);

    /** Convert E_SgInquireStatement enum constant to a string. */
    std::string E_SgInquireStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgInquireStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 672
namespace stringify {
    /** Convert E_SgFlushStatement enum constant to a string. */
    const char* E_SgFlushStatement(long);

    /** Convert E_SgFlushStatement enum constant to a string. */
    std::string E_SgFlushStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFlushStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 675
namespace stringify {
    /** Convert E_SgBackspaceStatement enum constant to a string. */
    const char* E_SgBackspaceStatement(long);

    /** Convert E_SgBackspaceStatement enum constant to a string. */
    std::string E_SgBackspaceStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBackspaceStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 678
namespace stringify {
    /** Convert E_SgRewindStatement enum constant to a string. */
    const char* E_SgRewindStatement(long);

    /** Convert E_SgRewindStatement enum constant to a string. */
    std::string E_SgRewindStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRewindStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 681
namespace stringify {
    /** Convert E_SgEndfileStatement enum constant to a string. */
    const char* E_SgEndfileStatement(long);

    /** Convert E_SgEndfileStatement enum constant to a string. */
    std::string E_SgEndfileStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgEndfileStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 684
namespace stringify {
    /** Convert E_SgWaitStatement enum constant to a string. */
    const char* E_SgWaitStatement(long);

    /** Convert E_SgWaitStatement enum constant to a string. */
    std::string E_SgWaitStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgWaitStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 687
namespace stringify {
    /** Convert E_SgIOStatement enum constant to a string. */
    const char* E_SgIOStatement(long);

    /** Convert E_SgIOStatement enum constant to a string. */
    std::string E_SgIOStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIOStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 690
namespace stringify {
    /** Convert E_SgWhereStatement enum constant to a string. */
    const char* E_SgWhereStatement(long);

    /** Convert E_SgWhereStatement enum constant to a string. */
    std::string E_SgWhereStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgWhereStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 693
namespace stringify {
    /** Convert E_SgElseWhereStatement enum constant to a string. */
    const char* E_SgElseWhereStatement(long);

    /** Convert E_SgElseWhereStatement enum constant to a string. */
    std::string E_SgElseWhereStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElseWhereStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 696
namespace stringify {
    /** Convert E_SgNullifyStatement enum constant to a string. */
    const char* E_SgNullifyStatement(long);

    /** Convert E_SgNullifyStatement enum constant to a string. */
    std::string E_SgNullifyStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNullifyStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 699
namespace stringify {
    /** Convert E_SgArithmeticIfStatement enum constant to a string. */
    const char* E_SgArithmeticIfStatement(long);

    /** Convert E_SgArithmeticIfStatement enum constant to a string. */
    std::string E_SgArithmeticIfStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgArithmeticIfStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 702
namespace stringify {
    /** Convert E_SgAssignStatement enum constant to a string. */
    const char* E_SgAssignStatement(long);

    /** Convert E_SgAssignStatement enum constant to a string. */
    std::string E_SgAssignStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAssignStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 705
namespace stringify {
    /** Convert E_SgComputedGotoStatement enum constant to a string. */
    const char* E_SgComputedGotoStatement(long);

    /** Convert E_SgComputedGotoStatement enum constant to a string. */
    std::string E_SgComputedGotoStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgComputedGotoStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 708
namespace stringify {
    /** Convert E_SgAssignedGotoStatement enum constant to a string. */
    const char* E_SgAssignedGotoStatement(long);

    /** Convert E_SgAssignedGotoStatement enum constant to a string. */
    std::string E_SgAssignedGotoStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAssignedGotoStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 711
namespace stringify {
    /** Convert E_SgAllocateStatement enum constant to a string. */
    const char* E_SgAllocateStatement(long);

    /** Convert E_SgAllocateStatement enum constant to a string. */
    std::string E_SgAllocateStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAllocateStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 714
namespace stringify {
    /** Convert E_SgDeallocateStatement enum constant to a string. */
    const char* E_SgDeallocateStatement(long);

    /** Convert E_SgDeallocateStatement enum constant to a string. */
    std::string E_SgDeallocateStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDeallocateStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 717
namespace stringify {
    /** Convert E_SgUpcNotifyStatement enum constant to a string. */
    const char* E_SgUpcNotifyStatement(long);

    /** Convert E_SgUpcNotifyStatement enum constant to a string. */
    std::string E_SgUpcNotifyStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcNotifyStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 720
namespace stringify {
    /** Convert E_SgUpcWaitStatement enum constant to a string. */
    const char* E_SgUpcWaitStatement(long);

    /** Convert E_SgUpcWaitStatement enum constant to a string. */
    std::string E_SgUpcWaitStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcWaitStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 723
namespace stringify {
    /** Convert E_SgUpcBarrierStatement enum constant to a string. */
    const char* E_SgUpcBarrierStatement(long);

    /** Convert E_SgUpcBarrierStatement enum constant to a string. */
    std::string E_SgUpcBarrierStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcBarrierStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 726
namespace stringify {
    /** Convert E_SgOmpFlushStatement enum constant to a string. */
    const char* E_SgOmpFlushStatement(long);

    /** Convert E_SgOmpFlushStatement enum constant to a string. */
    std::string E_SgOmpFlushStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpFlushStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 729
namespace stringify {
    /** Convert E_SgOmpMasterStatement enum constant to a string. */
    const char* E_SgOmpMasterStatement(long);

    /** Convert E_SgOmpMasterStatement enum constant to a string. */
    std::string E_SgOmpMasterStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpMasterStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 732
namespace stringify {
    /** Convert E_SgOmpOrderedStatement enum constant to a string. */
    const char* E_SgOmpOrderedStatement(long);

    /** Convert E_SgOmpOrderedStatement enum constant to a string. */
    std::string E_SgOmpOrderedStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpOrderedStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 735
namespace stringify {
    /** Convert E_SgOmpCriticalStatement enum constant to a string. */
    const char* E_SgOmpCriticalStatement(long);

    /** Convert E_SgOmpCriticalStatement enum constant to a string. */
    std::string E_SgOmpCriticalStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpCriticalStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 738
namespace stringify {
    /** Convert E_SgOmpSectionStatement enum constant to a string. */
    const char* E_SgOmpSectionStatement(long);

    /** Convert E_SgOmpSectionStatement enum constant to a string. */
    std::string E_SgOmpSectionStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSectionStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 741
namespace stringify {
    /** Convert E_SgOmpWorkshareStatement enum constant to a string. */
    const char* E_SgOmpWorkshareStatement(long);

    /** Convert E_SgOmpWorkshareStatement enum constant to a string. */
    std::string E_SgOmpWorkshareStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpWorkshareStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 744
namespace stringify {
    /** Convert E_SgOmpParallelStatement enum constant to a string. */
    const char* E_SgOmpParallelStatement(long);

    /** Convert E_SgOmpParallelStatement enum constant to a string. */
    std::string E_SgOmpParallelStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpParallelStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 747
namespace stringify {
    /** Convert E_SgOmpSingleStatement enum constant to a string. */
    const char* E_SgOmpSingleStatement(long);

    /** Convert E_SgOmpSingleStatement enum constant to a string. */
    std::string E_SgOmpSingleStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSingleStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 750
namespace stringify {
    /** Convert E_SgOmpAtomicStatement enum constant to a string. */
    const char* E_SgOmpAtomicStatement(long);

    /** Convert E_SgOmpAtomicStatement enum constant to a string. */
    std::string E_SgOmpAtomicStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpAtomicStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 753
namespace stringify {
    /** Convert E_SgOmpTaskStatement enum constant to a string. */
    const char* E_SgOmpTaskStatement(long);

    /** Convert E_SgOmpTaskStatement enum constant to a string. */
    std::string E_SgOmpTaskStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpTaskStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 756
namespace stringify {
    /** Convert E_SgOmpForStatement enum constant to a string. */
    const char* E_SgOmpForStatement(long);

    /** Convert E_SgOmpForStatement enum constant to a string. */
    std::string E_SgOmpForStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpForStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 759
namespace stringify {
    /** Convert E_SgOmpDoStatement enum constant to a string. */
    const char* E_SgOmpDoStatement(long);

    /** Convert E_SgOmpDoStatement enum constant to a string. */
    std::string E_SgOmpDoStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpDoStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 762
namespace stringify {
    /** Convert E_SgOmpSectionsStatement enum constant to a string. */
    const char* E_SgOmpSectionsStatement(long);

    /** Convert E_SgOmpSectionsStatement enum constant to a string. */
    std::string E_SgOmpSectionsStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSectionsStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 765
namespace stringify {
    /** Convert E_SgOmpTargetStatement enum constant to a string. */
    const char* E_SgOmpTargetStatement(long);

    /** Convert E_SgOmpTargetStatement enum constant to a string. */
    std::string E_SgOmpTargetStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpTargetStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 768
namespace stringify {
    /** Convert E_SgOmpTargetDataStatement enum constant to a string. */
    const char* E_SgOmpTargetDataStatement(long);

    /** Convert E_SgOmpTargetDataStatement enum constant to a string. */
    std::string E_SgOmpTargetDataStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpTargetDataStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 771
namespace stringify {
    /** Convert E_SgOmpSimdStatement enum constant to a string. */
    const char* E_SgOmpSimdStatement(long);

    /** Convert E_SgOmpSimdStatement enum constant to a string. */
    std::string E_SgOmpSimdStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpSimdStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 774
namespace stringify {
    /** Convert E_SgOmpForSimdStatement enum constant to a string. */
    const char* E_SgOmpForSimdStatement(long);

    /** Convert E_SgOmpForSimdStatement enum constant to a string. */
    std::string E_SgOmpForSimdStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpForSimdStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 777
namespace stringify {
    /** Convert E_SgOmpClauseBodyStatement enum constant to a string. */
    const char* E_SgOmpClauseBodyStatement(long);

    /** Convert E_SgOmpClauseBodyStatement enum constant to a string. */
    std::string E_SgOmpClauseBodyStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpClauseBodyStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 780
namespace stringify {
    /** Convert E_SgOmpBodyStatement enum constant to a string. */
    const char* E_SgOmpBodyStatement(long);

    /** Convert E_SgOmpBodyStatement enum constant to a string. */
    std::string E_SgOmpBodyStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOmpBodyStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 783
namespace stringify {
    /** Convert E_SgWithStatement enum constant to a string. */
    const char* E_SgWithStatement(long);

    /** Convert E_SgWithStatement enum constant to a string. */
    std::string E_SgWithStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgWithStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 786
namespace stringify {
    /** Convert E_SgPythonPrintStmt enum constant to a string. */
    const char* E_SgPythonPrintStmt(long);

    /** Convert E_SgPythonPrintStmt enum constant to a string. */
    std::string E_SgPythonPrintStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPythonPrintStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 789
namespace stringify {
    /** Convert E_SgAssertStmt enum constant to a string. */
    const char* E_SgAssertStmt(long);

    /** Convert E_SgAssertStmt enum constant to a string. */
    std::string E_SgAssertStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAssertStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 792
namespace stringify {
    /** Convert E_SgExecStatement enum constant to a string. */
    const char* E_SgExecStatement(long);

    /** Convert E_SgExecStatement enum constant to a string. */
    std::string E_SgExecStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExecStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 795
namespace stringify {
    /** Convert E_SgPythonGlobalStmt enum constant to a string. */
    const char* E_SgPythonGlobalStmt(long);

    /** Convert E_SgPythonGlobalStmt enum constant to a string. */
    std::string E_SgPythonGlobalStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPythonGlobalStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 798
namespace stringify {
    /** Convert E_SgJavaSynchronizedStatement enum constant to a string. */
    const char* E_SgJavaSynchronizedStatement(long);

    /** Convert E_SgJavaSynchronizedStatement enum constant to a string. */
    std::string E_SgJavaSynchronizedStatement(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaSynchronizedStatement(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 801
namespace stringify {
    /** Convert E_SgAsyncStmt enum constant to a string. */
    const char* E_SgAsyncStmt(long);

    /** Convert E_SgAsyncStmt enum constant to a string. */
    std::string E_SgAsyncStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsyncStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 804
namespace stringify {
    /** Convert E_SgFinishStmt enum constant to a string. */
    const char* E_SgFinishStmt(long);

    /** Convert E_SgFinishStmt enum constant to a string. */
    std::string E_SgFinishStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFinishStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 807
namespace stringify {
    /** Convert E_SgAtStmt enum constant to a string. */
    const char* E_SgAtStmt(long);

    /** Convert E_SgAtStmt enum constant to a string. */
    std::string E_SgAtStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAtStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 810
namespace stringify {
    /** Convert E_SgAtomicStmt enum constant to a string. */
    const char* E_SgAtomicStmt(long);

    /** Convert E_SgAtomicStmt enum constant to a string. */
    std::string E_SgAtomicStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAtomicStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 813
namespace stringify {
    /** Convert E_SgWhenStmt enum constant to a string. */
    const char* E_SgWhenStmt(long);

    /** Convert E_SgWhenStmt enum constant to a string. */
    std::string E_SgWhenStmt(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgWhenStmt(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 816
namespace stringify {
    /** Convert E_SgExpressionRoot enum constant to a string. */
    const char* E_SgExpressionRoot(long);

    /** Convert E_SgExpressionRoot enum constant to a string. */
    std::string E_SgExpressionRoot(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExpressionRoot(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 819
namespace stringify {
    /** Convert E_SgMinusOp enum constant to a string. */
    const char* E_SgMinusOp(long);

    /** Convert E_SgMinusOp enum constant to a string. */
    std::string E_SgMinusOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMinusOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 822
namespace stringify {
    /** Convert E_SgUnaryAddOp enum constant to a string. */
    const char* E_SgUnaryAddOp(long);

    /** Convert E_SgUnaryAddOp enum constant to a string. */
    std::string E_SgUnaryAddOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUnaryAddOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 825
namespace stringify {
    /** Convert E_SgNotOp enum constant to a string. */
    const char* E_SgNotOp(long);

    /** Convert E_SgNotOp enum constant to a string. */
    std::string E_SgNotOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNotOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 828
namespace stringify {
    /** Convert E_SgPointerDerefExp enum constant to a string. */
    const char* E_SgPointerDerefExp(long);

    /** Convert E_SgPointerDerefExp enum constant to a string. */
    std::string E_SgPointerDerefExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPointerDerefExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 831
namespace stringify {
    /** Convert E_SgAddressOfOp enum constant to a string. */
    const char* E_SgAddressOfOp(long);

    /** Convert E_SgAddressOfOp enum constant to a string. */
    std::string E_SgAddressOfOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAddressOfOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 834
namespace stringify {
    /** Convert E_SgMinusMinusOp enum constant to a string. */
    const char* E_SgMinusMinusOp(long);

    /** Convert E_SgMinusMinusOp enum constant to a string. */
    std::string E_SgMinusMinusOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMinusMinusOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 837
namespace stringify {
    /** Convert E_SgPlusPlusOp enum constant to a string. */
    const char* E_SgPlusPlusOp(long);

    /** Convert E_SgPlusPlusOp enum constant to a string. */
    std::string E_SgPlusPlusOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPlusPlusOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 840
namespace stringify {
    /** Convert E_SgBitComplementOp enum constant to a string. */
    const char* E_SgBitComplementOp(long);

    /** Convert E_SgBitComplementOp enum constant to a string. */
    std::string E_SgBitComplementOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBitComplementOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 843
namespace stringify {
    /** Convert E_SgCastExp enum constant to a string. */
    const char* E_SgCastExp(long);

    /** Convert E_SgCastExp enum constant to a string. */
    std::string E_SgCastExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCastExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 846
namespace stringify {
    /** Convert E_SgThrowOp enum constant to a string. */
    const char* E_SgThrowOp(long);

    /** Convert E_SgThrowOp enum constant to a string. */
    std::string E_SgThrowOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgThrowOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 849
namespace stringify {
    /** Convert E_SgRealPartOp enum constant to a string. */
    const char* E_SgRealPartOp(long);

    /** Convert E_SgRealPartOp enum constant to a string. */
    std::string E_SgRealPartOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRealPartOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 852
namespace stringify {
    /** Convert E_SgImagPartOp enum constant to a string. */
    const char* E_SgImagPartOp(long);

    /** Convert E_SgImagPartOp enum constant to a string. */
    std::string E_SgImagPartOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgImagPartOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 855
namespace stringify {
    /** Convert E_SgConjugateOp enum constant to a string. */
    const char* E_SgConjugateOp(long);

    /** Convert E_SgConjugateOp enum constant to a string. */
    std::string E_SgConjugateOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgConjugateOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 858
namespace stringify {
    /** Convert E_SgUserDefinedUnaryOp enum constant to a string. */
    const char* E_SgUserDefinedUnaryOp(long);

    /** Convert E_SgUserDefinedUnaryOp enum constant to a string. */
    std::string E_SgUserDefinedUnaryOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUserDefinedUnaryOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 861
namespace stringify {
    /** Convert E_SgMatrixTransposeOp enum constant to a string. */
    const char* E_SgMatrixTransposeOp(long);

    /** Convert E_SgMatrixTransposeOp enum constant to a string. */
    std::string E_SgMatrixTransposeOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMatrixTransposeOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 864
namespace stringify {
    /** Convert E_SgUnaryOp enum constant to a string. */
    const char* E_SgUnaryOp(long);

    /** Convert E_SgUnaryOp enum constant to a string. */
    std::string E_SgUnaryOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUnaryOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 867
namespace stringify {
    /** Convert E_SgArrowExp enum constant to a string. */
    const char* E_SgArrowExp(long);

    /** Convert E_SgArrowExp enum constant to a string. */
    std::string E_SgArrowExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgArrowExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 870
namespace stringify {
    /** Convert E_SgDotExp enum constant to a string. */
    const char* E_SgDotExp(long);

    /** Convert E_SgDotExp enum constant to a string. */
    std::string E_SgDotExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDotExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 873
namespace stringify {
    /** Convert E_SgDotStarOp enum constant to a string. */
    const char* E_SgDotStarOp(long);

    /** Convert E_SgDotStarOp enum constant to a string. */
    std::string E_SgDotStarOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDotStarOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 876
namespace stringify {
    /** Convert E_SgArrowStarOp enum constant to a string. */
    const char* E_SgArrowStarOp(long);

    /** Convert E_SgArrowStarOp enum constant to a string. */
    std::string E_SgArrowStarOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgArrowStarOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 879
namespace stringify {
    /** Convert E_SgEqualityOp enum constant to a string. */
    const char* E_SgEqualityOp(long);

    /** Convert E_SgEqualityOp enum constant to a string. */
    std::string E_SgEqualityOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgEqualityOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 882
namespace stringify {
    /** Convert E_SgLessThanOp enum constant to a string. */
    const char* E_SgLessThanOp(long);

    /** Convert E_SgLessThanOp enum constant to a string. */
    std::string E_SgLessThanOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLessThanOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 885
namespace stringify {
    /** Convert E_SgGreaterThanOp enum constant to a string. */
    const char* E_SgGreaterThanOp(long);

    /** Convert E_SgGreaterThanOp enum constant to a string. */
    std::string E_SgGreaterThanOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgGreaterThanOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 888
namespace stringify {
    /** Convert E_SgNotEqualOp enum constant to a string. */
    const char* E_SgNotEqualOp(long);

    /** Convert E_SgNotEqualOp enum constant to a string. */
    std::string E_SgNotEqualOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNotEqualOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 891
namespace stringify {
    /** Convert E_SgLessOrEqualOp enum constant to a string. */
    const char* E_SgLessOrEqualOp(long);

    /** Convert E_SgLessOrEqualOp enum constant to a string. */
    std::string E_SgLessOrEqualOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLessOrEqualOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 894
namespace stringify {
    /** Convert E_SgGreaterOrEqualOp enum constant to a string. */
    const char* E_SgGreaterOrEqualOp(long);

    /** Convert E_SgGreaterOrEqualOp enum constant to a string. */
    std::string E_SgGreaterOrEqualOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgGreaterOrEqualOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 897
namespace stringify {
    /** Convert E_SgAddOp enum constant to a string. */
    const char* E_SgAddOp(long);

    /** Convert E_SgAddOp enum constant to a string. */
    std::string E_SgAddOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAddOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 900
namespace stringify {
    /** Convert E_SgSubtractOp enum constant to a string. */
    const char* E_SgSubtractOp(long);

    /** Convert E_SgSubtractOp enum constant to a string. */
    std::string E_SgSubtractOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSubtractOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 903
namespace stringify {
    /** Convert E_SgMultiplyOp enum constant to a string. */
    const char* E_SgMultiplyOp(long);

    /** Convert E_SgMultiplyOp enum constant to a string. */
    std::string E_SgMultiplyOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMultiplyOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 906
namespace stringify {
    /** Convert E_SgDivideOp enum constant to a string. */
    const char* E_SgDivideOp(long);

    /** Convert E_SgDivideOp enum constant to a string. */
    std::string E_SgDivideOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDivideOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 909
namespace stringify {
    /** Convert E_SgIntegerDivideOp enum constant to a string. */
    const char* E_SgIntegerDivideOp(long);

    /** Convert E_SgIntegerDivideOp enum constant to a string. */
    std::string E_SgIntegerDivideOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIntegerDivideOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 912
namespace stringify {
    /** Convert E_SgModOp enum constant to a string. */
    const char* E_SgModOp(long);

    /** Convert E_SgModOp enum constant to a string. */
    std::string E_SgModOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgModOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 915
namespace stringify {
    /** Convert E_SgAndOp enum constant to a string. */
    const char* E_SgAndOp(long);

    /** Convert E_SgAndOp enum constant to a string. */
    std::string E_SgAndOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAndOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 918
namespace stringify {
    /** Convert E_SgOrOp enum constant to a string. */
    const char* E_SgOrOp(long);

    /** Convert E_SgOrOp enum constant to a string. */
    std::string E_SgOrOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgOrOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 921
namespace stringify {
    /** Convert E_SgBitXorOp enum constant to a string. */
    const char* E_SgBitXorOp(long);

    /** Convert E_SgBitXorOp enum constant to a string. */
    std::string E_SgBitXorOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBitXorOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 924
namespace stringify {
    /** Convert E_SgBitAndOp enum constant to a string. */
    const char* E_SgBitAndOp(long);

    /** Convert E_SgBitAndOp enum constant to a string. */
    std::string E_SgBitAndOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBitAndOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 927
namespace stringify {
    /** Convert E_SgBitOrOp enum constant to a string. */
    const char* E_SgBitOrOp(long);

    /** Convert E_SgBitOrOp enum constant to a string. */
    std::string E_SgBitOrOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBitOrOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 930
namespace stringify {
    /** Convert E_SgCommaOpExp enum constant to a string. */
    const char* E_SgCommaOpExp(long);

    /** Convert E_SgCommaOpExp enum constant to a string. */
    std::string E_SgCommaOpExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCommaOpExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 933
namespace stringify {
    /** Convert E_SgLshiftOp enum constant to a string. */
    const char* E_SgLshiftOp(long);

    /** Convert E_SgLshiftOp enum constant to a string. */
    std::string E_SgLshiftOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLshiftOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 936
namespace stringify {
    /** Convert E_SgRshiftOp enum constant to a string. */
    const char* E_SgRshiftOp(long);

    /** Convert E_SgRshiftOp enum constant to a string. */
    std::string E_SgRshiftOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRshiftOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 939
namespace stringify {
    /** Convert E_SgPntrArrRefExp enum constant to a string. */
    const char* E_SgPntrArrRefExp(long);

    /** Convert E_SgPntrArrRefExp enum constant to a string. */
    std::string E_SgPntrArrRefExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPntrArrRefExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 942
namespace stringify {
    /** Convert E_SgScopeOp enum constant to a string. */
    const char* E_SgScopeOp(long);

    /** Convert E_SgScopeOp enum constant to a string. */
    std::string E_SgScopeOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgScopeOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 945
namespace stringify {
    /** Convert E_SgAssignOp enum constant to a string. */
    const char* E_SgAssignOp(long);

    /** Convert E_SgAssignOp enum constant to a string. */
    std::string E_SgAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 948
namespace stringify {
    /** Convert E_SgExponentiationOp enum constant to a string. */
    const char* E_SgExponentiationOp(long);

    /** Convert E_SgExponentiationOp enum constant to a string. */
    std::string E_SgExponentiationOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExponentiationOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 951
namespace stringify {
    /** Convert E_SgJavaUnsignedRshiftOp enum constant to a string. */
    const char* E_SgJavaUnsignedRshiftOp(long);

    /** Convert E_SgJavaUnsignedRshiftOp enum constant to a string. */
    std::string E_SgJavaUnsignedRshiftOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaUnsignedRshiftOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 954
namespace stringify {
    /** Convert E_SgConcatenationOp enum constant to a string. */
    const char* E_SgConcatenationOp(long);

    /** Convert E_SgConcatenationOp enum constant to a string. */
    std::string E_SgConcatenationOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgConcatenationOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 957
namespace stringify {
    /** Convert E_SgPointerAssignOp enum constant to a string. */
    const char* E_SgPointerAssignOp(long);

    /** Convert E_SgPointerAssignOp enum constant to a string. */
    std::string E_SgPointerAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPointerAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 960
namespace stringify {
    /** Convert E_SgUserDefinedBinaryOp enum constant to a string. */
    const char* E_SgUserDefinedBinaryOp(long);

    /** Convert E_SgUserDefinedBinaryOp enum constant to a string. */
    std::string E_SgUserDefinedBinaryOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUserDefinedBinaryOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 963
namespace stringify {
    /** Convert E_SgPlusAssignOp enum constant to a string. */
    const char* E_SgPlusAssignOp(long);

    /** Convert E_SgPlusAssignOp enum constant to a string. */
    std::string E_SgPlusAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPlusAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 966
namespace stringify {
    /** Convert E_SgMinusAssignOp enum constant to a string. */
    const char* E_SgMinusAssignOp(long);

    /** Convert E_SgMinusAssignOp enum constant to a string. */
    std::string E_SgMinusAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMinusAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 969
namespace stringify {
    /** Convert E_SgAndAssignOp enum constant to a string. */
    const char* E_SgAndAssignOp(long);

    /** Convert E_SgAndAssignOp enum constant to a string. */
    std::string E_SgAndAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAndAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 972
namespace stringify {
    /** Convert E_SgIorAssignOp enum constant to a string. */
    const char* E_SgIorAssignOp(long);

    /** Convert E_SgIorAssignOp enum constant to a string. */
    std::string E_SgIorAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIorAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 975
namespace stringify {
    /** Convert E_SgMultAssignOp enum constant to a string. */
    const char* E_SgMultAssignOp(long);

    /** Convert E_SgMultAssignOp enum constant to a string. */
    std::string E_SgMultAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMultAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 978
namespace stringify {
    /** Convert E_SgDivAssignOp enum constant to a string. */
    const char* E_SgDivAssignOp(long);

    /** Convert E_SgDivAssignOp enum constant to a string. */
    std::string E_SgDivAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDivAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 981
namespace stringify {
    /** Convert E_SgModAssignOp enum constant to a string. */
    const char* E_SgModAssignOp(long);

    /** Convert E_SgModAssignOp enum constant to a string. */
    std::string E_SgModAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgModAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 984
namespace stringify {
    /** Convert E_SgXorAssignOp enum constant to a string. */
    const char* E_SgXorAssignOp(long);

    /** Convert E_SgXorAssignOp enum constant to a string. */
    std::string E_SgXorAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgXorAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 987
namespace stringify {
    /** Convert E_SgLshiftAssignOp enum constant to a string. */
    const char* E_SgLshiftAssignOp(long);

    /** Convert E_SgLshiftAssignOp enum constant to a string. */
    std::string E_SgLshiftAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLshiftAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 990
namespace stringify {
    /** Convert E_SgRshiftAssignOp enum constant to a string. */
    const char* E_SgRshiftAssignOp(long);

    /** Convert E_SgRshiftAssignOp enum constant to a string. */
    std::string E_SgRshiftAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRshiftAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 993
namespace stringify {
    /** Convert E_SgJavaUnsignedRshiftAssignOp enum constant to a string. */
    const char* E_SgJavaUnsignedRshiftAssignOp(long);

    /** Convert E_SgJavaUnsignedRshiftAssignOp enum constant to a string. */
    std::string E_SgJavaUnsignedRshiftAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaUnsignedRshiftAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 996
namespace stringify {
    /** Convert E_SgIntegerDivideAssignOp enum constant to a string. */
    const char* E_SgIntegerDivideAssignOp(long);

    /** Convert E_SgIntegerDivideAssignOp enum constant to a string. */
    std::string E_SgIntegerDivideAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIntegerDivideAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 999
namespace stringify {
    /** Convert E_SgExponentiationAssignOp enum constant to a string. */
    const char* E_SgExponentiationAssignOp(long);

    /** Convert E_SgExponentiationAssignOp enum constant to a string. */
    std::string E_SgExponentiationAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExponentiationAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1002
namespace stringify {
    /** Convert E_SgCompoundAssignOp enum constant to a string. */
    const char* E_SgCompoundAssignOp(long);

    /** Convert E_SgCompoundAssignOp enum constant to a string. */
    std::string E_SgCompoundAssignOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCompoundAssignOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1005
namespace stringify {
    /** Convert E_SgMembershipOp enum constant to a string. */
    const char* E_SgMembershipOp(long);

    /** Convert E_SgMembershipOp enum constant to a string. */
    std::string E_SgMembershipOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMembershipOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1008
namespace stringify {
    /** Convert E_SgNonMembershipOp enum constant to a string. */
    const char* E_SgNonMembershipOp(long);

    /** Convert E_SgNonMembershipOp enum constant to a string. */
    std::string E_SgNonMembershipOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNonMembershipOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1011
namespace stringify {
    /** Convert E_SgIsOp enum constant to a string. */
    const char* E_SgIsOp(long);

    /** Convert E_SgIsOp enum constant to a string. */
    std::string E_SgIsOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIsOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1014
namespace stringify {
    /** Convert E_SgIsNotOp enum constant to a string. */
    const char* E_SgIsNotOp(long);

    /** Convert E_SgIsNotOp enum constant to a string. */
    std::string E_SgIsNotOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIsNotOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1017
namespace stringify {
    /** Convert E_SgDotDotExp enum constant to a string. */
    const char* E_SgDotDotExp(long);

    /** Convert E_SgDotDotExp enum constant to a string. */
    std::string E_SgDotDotExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDotDotExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1020
namespace stringify {
    /** Convert E_SgElementwiseMultiplyOp enum constant to a string. */
    const char* E_SgElementwiseMultiplyOp(long);

    /** Convert E_SgElementwiseMultiplyOp enum constant to a string. */
    std::string E_SgElementwiseMultiplyOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwiseMultiplyOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1023
namespace stringify {
    /** Convert E_SgElementwisePowerOp enum constant to a string. */
    const char* E_SgElementwisePowerOp(long);

    /** Convert E_SgElementwisePowerOp enum constant to a string. */
    std::string E_SgElementwisePowerOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwisePowerOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1026
namespace stringify {
    /** Convert E_SgElementwiseLeftDivideOp enum constant to a string. */
    const char* E_SgElementwiseLeftDivideOp(long);

    /** Convert E_SgElementwiseLeftDivideOp enum constant to a string. */
    std::string E_SgElementwiseLeftDivideOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwiseLeftDivideOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1029
namespace stringify {
    /** Convert E_SgElementwiseDivideOp enum constant to a string. */
    const char* E_SgElementwiseDivideOp(long);

    /** Convert E_SgElementwiseDivideOp enum constant to a string. */
    std::string E_SgElementwiseDivideOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwiseDivideOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1032
namespace stringify {
    /** Convert E_SgElementwiseAddOp enum constant to a string. */
    const char* E_SgElementwiseAddOp(long);

    /** Convert E_SgElementwiseAddOp enum constant to a string. */
    std::string E_SgElementwiseAddOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwiseAddOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1035
namespace stringify {
    /** Convert E_SgElementwiseSubtractOp enum constant to a string. */
    const char* E_SgElementwiseSubtractOp(long);

    /** Convert E_SgElementwiseSubtractOp enum constant to a string. */
    std::string E_SgElementwiseSubtractOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwiseSubtractOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1038
namespace stringify {
    /** Convert E_SgElementwiseOp enum constant to a string. */
    const char* E_SgElementwiseOp(long);

    /** Convert E_SgElementwiseOp enum constant to a string. */
    std::string E_SgElementwiseOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgElementwiseOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1041
namespace stringify {
    /** Convert E_SgPowerOp enum constant to a string. */
    const char* E_SgPowerOp(long);

    /** Convert E_SgPowerOp enum constant to a string. */
    std::string E_SgPowerOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgPowerOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1044
namespace stringify {
    /** Convert E_SgLeftDivideOp enum constant to a string. */
    const char* E_SgLeftDivideOp(long);

    /** Convert E_SgLeftDivideOp enum constant to a string. */
    std::string E_SgLeftDivideOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLeftDivideOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1047
namespace stringify {
    /** Convert E_SgBinaryOp enum constant to a string. */
    const char* E_SgBinaryOp(long);

    /** Convert E_SgBinaryOp enum constant to a string. */
    std::string E_SgBinaryOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBinaryOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1050
namespace stringify {
    /** Convert E_SgListExp enum constant to a string. */
    const char* E_SgListExp(long);

    /** Convert E_SgListExp enum constant to a string. */
    std::string E_SgListExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgListExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1053
namespace stringify {
    /** Convert E_SgTupleExp enum constant to a string. */
    const char* E_SgTupleExp(long);

    /** Convert E_SgTupleExp enum constant to a string. */
    std::string E_SgTupleExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTupleExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1056
namespace stringify {
    /** Convert E_SgMatrixExp enum constant to a string. */
    const char* E_SgMatrixExp(long);

    /** Convert E_SgMatrixExp enum constant to a string. */
    std::string E_SgMatrixExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMatrixExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1059
namespace stringify {
    /** Convert E_SgExprListExp enum constant to a string. */
    const char* E_SgExprListExp(long);

    /** Convert E_SgExprListExp enum constant to a string. */
    std::string E_SgExprListExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgExprListExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1062
namespace stringify {
    /** Convert E_SgComplexVal enum constant to a string. */
    const char* E_SgComplexVal(long);

    /** Convert E_SgComplexVal enum constant to a string. */
    std::string E_SgComplexVal(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgComplexVal(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1065
namespace stringify {
    /** Convert E_SgCudaKernelCallExp enum constant to a string. */
    const char* E_SgCudaKernelCallExp(long);

    /** Convert E_SgCudaKernelCallExp enum constant to a string. */
    std::string E_SgCudaKernelCallExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCudaKernelCallExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1068
namespace stringify {
    /** Convert E_SgFunctionCallExp enum constant to a string. */
    const char* E_SgFunctionCallExp(long);

    /** Convert E_SgFunctionCallExp enum constant to a string. */
    std::string E_SgFunctionCallExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionCallExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1071
namespace stringify {
    /** Convert E_SgCallExpression enum constant to a string. */
    const char* E_SgCallExpression(long);

    /** Convert E_SgCallExpression enum constant to a string. */
    std::string E_SgCallExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCallExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1074
namespace stringify {
    /** Convert E_SgSizeOfOp enum constant to a string. */
    const char* E_SgSizeOfOp(long);

    /** Convert E_SgSizeOfOp enum constant to a string. */
    std::string E_SgSizeOfOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSizeOfOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1077
namespace stringify {
    /** Convert E_SgUpcLocalsizeofExpression enum constant to a string. */
    const char* E_SgUpcLocalsizeofExpression(long);

    /** Convert E_SgUpcLocalsizeofExpression enum constant to a string. */
    std::string E_SgUpcLocalsizeofExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcLocalsizeofExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1080
namespace stringify {
    /** Convert E_SgUpcBlocksizeofExpression enum constant to a string. */
    const char* E_SgUpcBlocksizeofExpression(long);

    /** Convert E_SgUpcBlocksizeofExpression enum constant to a string. */
    std::string E_SgUpcBlocksizeofExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcBlocksizeofExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1083
namespace stringify {
    /** Convert E_SgUpcElemsizeofExpression enum constant to a string. */
    const char* E_SgUpcElemsizeofExpression(long);

    /** Convert E_SgUpcElemsizeofExpression enum constant to a string. */
    std::string E_SgUpcElemsizeofExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUpcElemsizeofExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1086
namespace stringify {
    /** Convert E_SgJavaInstanceOfOp enum constant to a string. */
    const char* E_SgJavaInstanceOfOp(long);

    /** Convert E_SgJavaInstanceOfOp enum constant to a string. */
    std::string E_SgJavaInstanceOfOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaInstanceOfOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1089
namespace stringify {
    /** Convert E_SgTypeIdOp enum constant to a string. */
    const char* E_SgTypeIdOp(long);

    /** Convert E_SgTypeIdOp enum constant to a string. */
    std::string E_SgTypeIdOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypeIdOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1092
namespace stringify {
    /** Convert E_SgConditionalExp enum constant to a string. */
    const char* E_SgConditionalExp(long);

    /** Convert E_SgConditionalExp enum constant to a string. */
    std::string E_SgConditionalExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgConditionalExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1095
namespace stringify {
    /** Convert E_SgNewExp enum constant to a string. */
    const char* E_SgNewExp(long);

    /** Convert E_SgNewExp enum constant to a string. */
    std::string E_SgNewExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNewExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1098
namespace stringify {
    /** Convert E_SgDeleteExp enum constant to a string. */
    const char* E_SgDeleteExp(long);

    /** Convert E_SgDeleteExp enum constant to a string. */
    std::string E_SgDeleteExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDeleteExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1101
namespace stringify {
    /** Convert E_SgAggregateInitializer enum constant to a string. */
    const char* E_SgAggregateInitializer(long);

    /** Convert E_SgAggregateInitializer enum constant to a string. */
    std::string E_SgAggregateInitializer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAggregateInitializer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1104
namespace stringify {
    /** Convert E_SgCompoundInitializer enum constant to a string. */
    const char* E_SgCompoundInitializer(long);

    /** Convert E_SgCompoundInitializer enum constant to a string. */
    std::string E_SgCompoundInitializer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCompoundInitializer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1107
namespace stringify {
    /** Convert E_SgConstructorInitializer enum constant to a string. */
    const char* E_SgConstructorInitializer(long);

    /** Convert E_SgConstructorInitializer enum constant to a string. */
    std::string E_SgConstructorInitializer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgConstructorInitializer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1110
namespace stringify {
    /** Convert E_SgAssignInitializer enum constant to a string. */
    const char* E_SgAssignInitializer(long);

    /** Convert E_SgAssignInitializer enum constant to a string. */
    std::string E_SgAssignInitializer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAssignInitializer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1113
namespace stringify {
    /** Convert E_SgDesignatedInitializer enum constant to a string. */
    const char* E_SgDesignatedInitializer(long);

    /** Convert E_SgDesignatedInitializer enum constant to a string. */
    std::string E_SgDesignatedInitializer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDesignatedInitializer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1116
namespace stringify {
    /** Convert E_SgBracedInitializer enum constant to a string. */
    const char* E_SgBracedInitializer(long);

    /** Convert E_SgBracedInitializer enum constant to a string. */
    std::string E_SgBracedInitializer(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgBracedInitializer(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1119
namespace stringify {
    /** Convert E_SgVarArgStartOp enum constant to a string. */
    const char* E_SgVarArgStartOp(long);

    /** Convert E_SgVarArgStartOp enum constant to a string. */
    std::string E_SgVarArgStartOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVarArgStartOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1122
namespace stringify {
    /** Convert E_SgVarArgOp enum constant to a string. */
    const char* E_SgVarArgOp(long);

    /** Convert E_SgVarArgOp enum constant to a string. */
    std::string E_SgVarArgOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVarArgOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1125
namespace stringify {
    /** Convert E_SgVarArgEndOp enum constant to a string. */
    const char* E_SgVarArgEndOp(long);

    /** Convert E_SgVarArgEndOp enum constant to a string. */
    std::string E_SgVarArgEndOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVarArgEndOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1128
namespace stringify {
    /** Convert E_SgVarArgCopyOp enum constant to a string. */
    const char* E_SgVarArgCopyOp(long);

    /** Convert E_SgVarArgCopyOp enum constant to a string. */
    std::string E_SgVarArgCopyOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVarArgCopyOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1131
namespace stringify {
    /** Convert E_SgVarArgStartOneOperandOp enum constant to a string. */
    const char* E_SgVarArgStartOneOperandOp(long);

    /** Convert E_SgVarArgStartOneOperandOp enum constant to a string. */
    std::string E_SgVarArgStartOneOperandOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgVarArgStartOneOperandOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1134
namespace stringify {
    /** Convert E_SgSubscriptExpression enum constant to a string. */
    const char* E_SgSubscriptExpression(long);

    /** Convert E_SgSubscriptExpression enum constant to a string. */
    std::string E_SgSubscriptExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSubscriptExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1137
namespace stringify {
    /** Convert E_SgImpliedDo enum constant to a string. */
    const char* E_SgImpliedDo(long);

    /** Convert E_SgImpliedDo enum constant to a string. */
    std::string E_SgImpliedDo(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgImpliedDo(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1140
namespace stringify {
    /** Convert E_SgIOItemExpression enum constant to a string. */
    const char* E_SgIOItemExpression(long);

    /** Convert E_SgIOItemExpression enum constant to a string. */
    std::string E_SgIOItemExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgIOItemExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1143
namespace stringify {
    /** Convert E_SgStatementExpression enum constant to a string. */
    const char* E_SgStatementExpression(long);

    /** Convert E_SgStatementExpression enum constant to a string. */
    std::string E_SgStatementExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgStatementExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1146
namespace stringify {
    /** Convert E_SgAsmOp enum constant to a string. */
    const char* E_SgAsmOp(long);

    /** Convert E_SgAsmOp enum constant to a string. */
    std::string E_SgAsmOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1149
namespace stringify {
    /** Convert E_SgActualArgumentExpression enum constant to a string. */
    const char* E_SgActualArgumentExpression(long);

    /** Convert E_SgActualArgumentExpression enum constant to a string. */
    std::string E_SgActualArgumentExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgActualArgumentExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1152
namespace stringify {
    /** Convert E_SgUnknownArrayOrFunctionReference enum constant to a string. */
    const char* E_SgUnknownArrayOrFunctionReference(long);

    /** Convert E_SgUnknownArrayOrFunctionReference enum constant to a string. */
    std::string E_SgUnknownArrayOrFunctionReference(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgUnknownArrayOrFunctionReference(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1155
namespace stringify {
    /** Convert E_SgCAFCoExpression enum constant to a string. */
    const char* E_SgCAFCoExpression(long);

    /** Convert E_SgCAFCoExpression enum constant to a string. */
    std::string E_SgCAFCoExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCAFCoExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1158
namespace stringify {
    /** Convert E_SgCudaKernelExecConfig enum constant to a string. */
    const char* E_SgCudaKernelExecConfig(long);

    /** Convert E_SgCudaKernelExecConfig enum constant to a string. */
    std::string E_SgCudaKernelExecConfig(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgCudaKernelExecConfig(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1161
namespace stringify {
    /** Convert E_SgLambdaRefExp enum constant to a string. */
    const char* E_SgLambdaRefExp(long);

    /** Convert E_SgLambdaRefExp enum constant to a string. */
    std::string E_SgLambdaRefExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLambdaRefExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1164
namespace stringify {
    /** Convert E_SgDictionaryExp enum constant to a string. */
    const char* E_SgDictionaryExp(long);

    /** Convert E_SgDictionaryExp enum constant to a string. */
    std::string E_SgDictionaryExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDictionaryExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1167
namespace stringify {
    /** Convert E_SgKeyDatumPair enum constant to a string. */
    const char* E_SgKeyDatumPair(long);

    /** Convert E_SgKeyDatumPair enum constant to a string. */
    std::string E_SgKeyDatumPair(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgKeyDatumPair(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1170
namespace stringify {
    /** Convert E_SgComprehension enum constant to a string. */
    const char* E_SgComprehension(long);

    /** Convert E_SgComprehension enum constant to a string. */
    std::string E_SgComprehension(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgComprehension(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1173
namespace stringify {
    /** Convert E_SgListComprehension enum constant to a string. */
    const char* E_SgListComprehension(long);

    /** Convert E_SgListComprehension enum constant to a string. */
    std::string E_SgListComprehension(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgListComprehension(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1176
namespace stringify {
    /** Convert E_SgSetComprehension enum constant to a string. */
    const char* E_SgSetComprehension(long);

    /** Convert E_SgSetComprehension enum constant to a string. */
    std::string E_SgSetComprehension(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgSetComprehension(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1179
namespace stringify {
    /** Convert E_SgDictionaryComprehension enum constant to a string. */
    const char* E_SgDictionaryComprehension(long);

    /** Convert E_SgDictionaryComprehension enum constant to a string. */
    std::string E_SgDictionaryComprehension(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgDictionaryComprehension(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1182
namespace stringify {
    /** Convert E_SgNaryBooleanOp enum constant to a string. */
    const char* E_SgNaryBooleanOp(long);

    /** Convert E_SgNaryBooleanOp enum constant to a string. */
    std::string E_SgNaryBooleanOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNaryBooleanOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1185
namespace stringify {
    /** Convert E_SgNaryComparisonOp enum constant to a string. */
    const char* E_SgNaryComparisonOp(long);

    /** Convert E_SgNaryComparisonOp enum constant to a string. */
    std::string E_SgNaryComparisonOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNaryComparisonOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1188
namespace stringify {
    /** Convert E_SgNaryOp enum constant to a string. */
    const char* E_SgNaryOp(long);

    /** Convert E_SgNaryOp enum constant to a string. */
    std::string E_SgNaryOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNaryOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1191
namespace stringify {
    /** Convert E_SgStringConversion enum constant to a string. */
    const char* E_SgStringConversion(long);

    /** Convert E_SgStringConversion enum constant to a string. */
    std::string E_SgStringConversion(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgStringConversion(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1194
namespace stringify {
    /** Convert E_SgYieldExpression enum constant to a string. */
    const char* E_SgYieldExpression(long);

    /** Convert E_SgYieldExpression enum constant to a string. */
    std::string E_SgYieldExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgYieldExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1197
namespace stringify {
    /** Convert E_SgAlignOfOp enum constant to a string. */
    const char* E_SgAlignOfOp(long);

    /** Convert E_SgAlignOfOp enum constant to a string. */
    std::string E_SgAlignOfOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAlignOfOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1200
namespace stringify {
    /** Convert E_SgRangeExp enum constant to a string. */
    const char* E_SgRangeExp(long);

    /** Convert E_SgRangeExp enum constant to a string. */
    std::string E_SgRangeExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRangeExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1203
namespace stringify {
    /** Convert E_SgJavaSingleMemberAnnotation enum constant to a string. */
    const char* E_SgJavaSingleMemberAnnotation(long);

    /** Convert E_SgJavaSingleMemberAnnotation enum constant to a string. */
    std::string E_SgJavaSingleMemberAnnotation(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaSingleMemberAnnotation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1206
namespace stringify {
    /** Convert E_SgJavaNormalAnnotation enum constant to a string. */
    const char* E_SgJavaNormalAnnotation(long);

    /** Convert E_SgJavaNormalAnnotation enum constant to a string. */
    std::string E_SgJavaNormalAnnotation(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaNormalAnnotation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1209
namespace stringify {
    /** Convert E_SgFunctionParameterRefExp enum constant to a string. */
    const char* E_SgFunctionParameterRefExp(long);

    /** Convert E_SgFunctionParameterRefExp enum constant to a string. */
    std::string E_SgFunctionParameterRefExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterRefExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1212
namespace stringify {
    /** Convert E_SgLambdaExp enum constant to a string. */
    const char* E_SgLambdaExp(long);

    /** Convert E_SgLambdaExp enum constant to a string. */
    std::string E_SgLambdaExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLambdaExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1215
namespace stringify {
    /** Convert E_SgHereExp enum constant to a string. */
    const char* E_SgHereExp(long);

    /** Convert E_SgHereExp enum constant to a string. */
    std::string E_SgHereExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgHereExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1218
namespace stringify {
    /** Convert E_SgAtExp enum constant to a string. */
    const char* E_SgAtExp(long);

    /** Convert E_SgAtExp enum constant to a string. */
    std::string E_SgAtExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAtExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1221
namespace stringify {
    /** Convert E_SgFinishExp enum constant to a string. */
    const char* E_SgFinishExp(long);

    /** Convert E_SgFinishExp enum constant to a string. */
    std::string E_SgFinishExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFinishExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1224
namespace stringify {
    /** Convert E_SgNoexceptOp enum constant to a string. */
    const char* E_SgNoexceptOp(long);

    /** Convert E_SgNoexceptOp enum constant to a string. */
    std::string E_SgNoexceptOp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNoexceptOp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1227
namespace stringify {
    /** Convert E_SgTemplateMemberFunctionSymbol enum constant to a string. */
    const char* E_SgTemplateMemberFunctionSymbol(long);

    /** Convert E_SgTemplateMemberFunctionSymbol enum constant to a string. */
    std::string E_SgTemplateMemberFunctionSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateMemberFunctionSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1230
namespace stringify {
    /** Convert E_SgMemberFunctionSymbol enum constant to a string. */
    const char* E_SgMemberFunctionSymbol(long);

    /** Convert E_SgMemberFunctionSymbol enum constant to a string. */
    std::string E_SgMemberFunctionSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1233
namespace stringify {
    /** Convert E_SgTemplateFunctionSymbol enum constant to a string. */
    const char* E_SgTemplateFunctionSymbol(long);

    /** Convert E_SgTemplateFunctionSymbol enum constant to a string. */
    std::string E_SgTemplateFunctionSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1236
namespace stringify {
    /** Convert E_SgRenameSymbol enum constant to a string. */
    const char* E_SgRenameSymbol(long);

    /** Convert E_SgRenameSymbol enum constant to a string. */
    std::string E_SgRenameSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgRenameSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1239
namespace stringify {
    /** Convert E_SgFunctionSymbol enum constant to a string. */
    const char* E_SgFunctionSymbol(long);

    /** Convert E_SgFunctionSymbol enum constant to a string. */
    std::string E_SgFunctionSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgFunctionSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1242
namespace stringify {
    /** Convert E_SgTemplateClassSymbol enum constant to a string. */
    const char* E_SgTemplateClassSymbol(long);

    /** Convert E_SgTemplateClassSymbol enum constant to a string. */
    std::string E_SgTemplateClassSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateClassSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1245
namespace stringify {
    /** Convert E_SgClassSymbol enum constant to a string. */
    const char* E_SgClassSymbol(long);

    /** Convert E_SgClassSymbol enum constant to a string. */
    std::string E_SgClassSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgClassSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1248
namespace stringify {
    /** Convert E_SgTemplateSymbol enum constant to a string. */
    const char* E_SgTemplateSymbol(long);

    /** Convert E_SgTemplateSymbol enum constant to a string. */
    std::string E_SgTemplateSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1251
namespace stringify {
    /** Convert E_SgEnumSymbol enum constant to a string. */
    const char* E_SgEnumSymbol(long);

    /** Convert E_SgEnumSymbol enum constant to a string. */
    std::string E_SgEnumSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgEnumSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1254
namespace stringify {
    /** Convert E_SgTemplateTypedefSymbol enum constant to a string. */
    const char* E_SgTemplateTypedefSymbol(long);

    /** Convert E_SgTemplateTypedefSymbol enum constant to a string. */
    std::string E_SgTemplateTypedefSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTemplateTypedefSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1257
namespace stringify {
    /** Convert E_SgTypedefSymbol enum constant to a string. */
    const char* E_SgTypedefSymbol(long);

    /** Convert E_SgTypedefSymbol enum constant to a string. */
    std::string E_SgTypedefSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgTypedefSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1260
namespace stringify {
    /** Convert E_SgLabelSymbol enum constant to a string. */
    const char* E_SgLabelSymbol(long);

    /** Convert E_SgLabelSymbol enum constant to a string. */
    std::string E_SgLabelSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgLabelSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1263
namespace stringify {
    /** Convert E_SgNamespaceSymbol enum constant to a string. */
    const char* E_SgNamespaceSymbol(long);

    /** Convert E_SgNamespaceSymbol enum constant to a string. */
    std::string E_SgNamespaceSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgNamespaceSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1266
namespace stringify {
    /** Convert E_SgModuleSymbol enum constant to a string. */
    const char* E_SgModuleSymbol(long);

    /** Convert E_SgModuleSymbol enum constant to a string. */
    std::string E_SgModuleSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgModuleSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1269
namespace stringify {
    /** Convert E_SgAliasSymbol enum constant to a string. */
    const char* E_SgAliasSymbol(long);

    /** Convert E_SgAliasSymbol enum constant to a string. */
    std::string E_SgAliasSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAliasSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1272
namespace stringify {
    /** Convert E_SgJavaLabelSymbol enum constant to a string. */
    const char* E_SgJavaLabelSymbol(long);

    /** Convert E_SgJavaLabelSymbol enum constant to a string. */
    std::string E_SgJavaLabelSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgJavaLabelSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1275
namespace stringify {
    /** Convert E_SgAsmFunction enum constant to a string. */
    const char* E_SgAsmFunction(long);

    /** Convert E_SgAsmFunction enum constant to a string. */
    std::string E_SgAsmFunction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmFunction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1278
namespace stringify {
    /** Convert E_SgAsmBlock enum constant to a string. */
    const char* E_SgAsmBlock(long);

    /** Convert E_SgAsmBlock enum constant to a string. */
    std::string E_SgAsmBlock(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBlock(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1281
namespace stringify {
    /** Convert E_SgAsmX86Instruction enum constant to a string. */
    const char* E_SgAsmX86Instruction(long);

    /** Convert E_SgAsmX86Instruction enum constant to a string. */
    std::string E_SgAsmX86Instruction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmX86Instruction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1284
namespace stringify {
    /** Convert E_SgAsmArmInstruction enum constant to a string. */
    const char* E_SgAsmArmInstruction(long);

    /** Convert E_SgAsmArmInstruction enum constant to a string. */
    std::string E_SgAsmArmInstruction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmArmInstruction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1287
namespace stringify {
    /** Convert E_SgAsmPowerpcInstruction enum constant to a string. */
    const char* E_SgAsmPowerpcInstruction(long);

    /** Convert E_SgAsmPowerpcInstruction enum constant to a string. */
    std::string E_SgAsmPowerpcInstruction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPowerpcInstruction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1290
namespace stringify {
    /** Convert E_SgAsmMipsInstruction enum constant to a string. */
    const char* E_SgAsmMipsInstruction(long);

    /** Convert E_SgAsmMipsInstruction enum constant to a string. */
    std::string E_SgAsmMipsInstruction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmMipsInstruction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1293
namespace stringify {
    /** Convert E_SgAsmM68kInstruction enum constant to a string. */
    const char* E_SgAsmM68kInstruction(long);

    /** Convert E_SgAsmM68kInstruction enum constant to a string. */
    std::string E_SgAsmM68kInstruction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmM68kInstruction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1296
namespace stringify {
    /** Convert E_SgAsmInstruction enum constant to a string. */
    const char* E_SgAsmInstruction(long);

    /** Convert E_SgAsmInstruction enum constant to a string. */
    std::string E_SgAsmInstruction(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmInstruction(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1299
namespace stringify {
    /** Convert E_SgAsmIntegerValueExpression enum constant to a string. */
    const char* E_SgAsmIntegerValueExpression(long);

    /** Convert E_SgAsmIntegerValueExpression enum constant to a string. */
    std::string E_SgAsmIntegerValueExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmIntegerValueExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1302
namespace stringify {
    /** Convert E_SgAsmFloatValueExpression enum constant to a string. */
    const char* E_SgAsmFloatValueExpression(long);

    /** Convert E_SgAsmFloatValueExpression enum constant to a string. */
    std::string E_SgAsmFloatValueExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmFloatValueExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1305
namespace stringify {
    /** Convert E_SgAsmConstantExpression enum constant to a string. */
    const char* E_SgAsmConstantExpression(long);

    /** Convert E_SgAsmConstantExpression enum constant to a string. */
    std::string E_SgAsmConstantExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmConstantExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1308
namespace stringify {
    /** Convert E_SgAsmValueExpression enum constant to a string. */
    const char* E_SgAsmValueExpression(long);

    /** Convert E_SgAsmValueExpression enum constant to a string. */
    std::string E_SgAsmValueExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmValueExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1311
namespace stringify {
    /** Convert E_SgAsmBinaryAdd enum constant to a string. */
    const char* E_SgAsmBinaryAdd(long);

    /** Convert E_SgAsmBinaryAdd enum constant to a string. */
    std::string E_SgAsmBinaryAdd(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAdd(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1314
namespace stringify {
    /** Convert E_SgAsmBinarySubtract enum constant to a string. */
    const char* E_SgAsmBinarySubtract(long);

    /** Convert E_SgAsmBinarySubtract enum constant to a string. */
    std::string E_SgAsmBinarySubtract(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinarySubtract(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1317
namespace stringify {
    /** Convert E_SgAsmBinaryMultiply enum constant to a string. */
    const char* E_SgAsmBinaryMultiply(long);

    /** Convert E_SgAsmBinaryMultiply enum constant to a string. */
    std::string E_SgAsmBinaryMultiply(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryMultiply(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1320
namespace stringify {
    /** Convert E_SgAsmBinaryDivide enum constant to a string. */
    const char* E_SgAsmBinaryDivide(long);

    /** Convert E_SgAsmBinaryDivide enum constant to a string. */
    std::string E_SgAsmBinaryDivide(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryDivide(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1323
namespace stringify {
    /** Convert E_SgAsmBinaryMod enum constant to a string. */
    const char* E_SgAsmBinaryMod(long);

    /** Convert E_SgAsmBinaryMod enum constant to a string. */
    std::string E_SgAsmBinaryMod(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryMod(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1326
namespace stringify {
    /** Convert E_SgAsmBinaryAddPreupdate enum constant to a string. */
    const char* E_SgAsmBinaryAddPreupdate(long);

    /** Convert E_SgAsmBinaryAddPreupdate enum constant to a string. */
    std::string E_SgAsmBinaryAddPreupdate(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAddPreupdate(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1329
namespace stringify {
    /** Convert E_SgAsmBinarySubtractPreupdate enum constant to a string. */
    const char* E_SgAsmBinarySubtractPreupdate(long);

    /** Convert E_SgAsmBinarySubtractPreupdate enum constant to a string. */
    std::string E_SgAsmBinarySubtractPreupdate(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinarySubtractPreupdate(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1332
namespace stringify {
    /** Convert E_SgAsmBinaryAddPostupdate enum constant to a string. */
    const char* E_SgAsmBinaryAddPostupdate(long);

    /** Convert E_SgAsmBinaryAddPostupdate enum constant to a string. */
    std::string E_SgAsmBinaryAddPostupdate(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAddPostupdate(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1335
namespace stringify {
    /** Convert E_SgAsmBinarySubtractPostupdate enum constant to a string. */
    const char* E_SgAsmBinarySubtractPostupdate(long);

    /** Convert E_SgAsmBinarySubtractPostupdate enum constant to a string. */
    std::string E_SgAsmBinarySubtractPostupdate(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinarySubtractPostupdate(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1338
namespace stringify {
    /** Convert E_SgAsmBinaryLsl enum constant to a string. */
    const char* E_SgAsmBinaryLsl(long);

    /** Convert E_SgAsmBinaryLsl enum constant to a string. */
    std::string E_SgAsmBinaryLsl(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryLsl(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1341
namespace stringify {
    /** Convert E_SgAsmBinaryLsr enum constant to a string. */
    const char* E_SgAsmBinaryLsr(long);

    /** Convert E_SgAsmBinaryLsr enum constant to a string. */
    std::string E_SgAsmBinaryLsr(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryLsr(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1344
namespace stringify {
    /** Convert E_SgAsmBinaryAsr enum constant to a string. */
    const char* E_SgAsmBinaryAsr(long);

    /** Convert E_SgAsmBinaryAsr enum constant to a string. */
    std::string E_SgAsmBinaryAsr(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAsr(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1347
namespace stringify {
    /** Convert E_SgAsmBinaryRor enum constant to a string. */
    const char* E_SgAsmBinaryRor(long);

    /** Convert E_SgAsmBinaryRor enum constant to a string. */
    std::string E_SgAsmBinaryRor(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryRor(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1350
namespace stringify {
    /** Convert E_SgAsmBinaryExpression enum constant to a string. */
    const char* E_SgAsmBinaryExpression(long);

    /** Convert E_SgAsmBinaryExpression enum constant to a string. */
    std::string E_SgAsmBinaryExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1353
namespace stringify {
    /** Convert E_SgAsmUnaryPlus enum constant to a string. */
    const char* E_SgAsmUnaryPlus(long);

    /** Convert E_SgAsmUnaryPlus enum constant to a string. */
    std::string E_SgAsmUnaryPlus(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryPlus(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1356
namespace stringify {
    /** Convert E_SgAsmUnaryMinus enum constant to a string. */
    const char* E_SgAsmUnaryMinus(long);

    /** Convert E_SgAsmUnaryMinus enum constant to a string. */
    std::string E_SgAsmUnaryMinus(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryMinus(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1359
namespace stringify {
    /** Convert E_SgAsmUnaryRrx enum constant to a string. */
    const char* E_SgAsmUnaryRrx(long);

    /** Convert E_SgAsmUnaryRrx enum constant to a string. */
    std::string E_SgAsmUnaryRrx(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryRrx(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1362
namespace stringify {
    /** Convert E_SgAsmUnaryArmSpecialRegisterList enum constant to a string. */
    const char* E_SgAsmUnaryArmSpecialRegisterList(long);

    /** Convert E_SgAsmUnaryArmSpecialRegisterList enum constant to a string. */
    std::string E_SgAsmUnaryArmSpecialRegisterList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryArmSpecialRegisterList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1365
namespace stringify {
    /** Convert E_SgAsmUnaryExpression enum constant to a string. */
    const char* E_SgAsmUnaryExpression(long);

    /** Convert E_SgAsmUnaryExpression enum constant to a string. */
    std::string E_SgAsmUnaryExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1368
namespace stringify {
    /** Convert E_SgAsmMemoryReferenceExpression enum constant to a string. */
    const char* E_SgAsmMemoryReferenceExpression(long);

    /** Convert E_SgAsmMemoryReferenceExpression enum constant to a string. */
    std::string E_SgAsmMemoryReferenceExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmMemoryReferenceExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1371
namespace stringify {
    /** Convert E_SgAsmCommonSubExpression enum constant to a string. */
    const char* E_SgAsmCommonSubExpression(long);

    /** Convert E_SgAsmCommonSubExpression enum constant to a string. */
    std::string E_SgAsmCommonSubExpression(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmCommonSubExpression(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1374
namespace stringify {
    /** Convert E_SgAsmExprListExp enum constant to a string. */
    const char* E_SgAsmExprListExp(long);

    /** Convert E_SgAsmExprListExp enum constant to a string. */
    std::string E_SgAsmExprListExp(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmExprListExp(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1377
namespace stringify {
    /** Convert E_SgAsmRegisterNames enum constant to a string. */
    const char* E_SgAsmRegisterNames(long);

    /** Convert E_SgAsmRegisterNames enum constant to a string. */
    std::string E_SgAsmRegisterNames(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmRegisterNames(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1380
namespace stringify {
    /** Convert E_SgAsmRiscOperation enum constant to a string. */
    const char* E_SgAsmRiscOperation(long);

    /** Convert E_SgAsmRiscOperation enum constant to a string. */
    std::string E_SgAsmRiscOperation(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmRiscOperation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1383
namespace stringify {
    /** Convert E_SgAsmInterpretation enum constant to a string. */
    const char* E_SgAsmInterpretation(long);

    /** Convert E_SgAsmInterpretation enum constant to a string. */
    std::string E_SgAsmInterpretation(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmInterpretation(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1386
namespace stringify {
    /** Convert E_SgAsmOperandList enum constant to a string. */
    const char* E_SgAsmOperandList(long);

    /** Convert E_SgAsmOperandList enum constant to a string. */
    std::string E_SgAsmOperandList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmOperandList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1389
namespace stringify {
    /** Convert E_SgAsmGenericDLL enum constant to a string. */
    const char* E_SgAsmGenericDLL(long);

    /** Convert E_SgAsmGenericDLL enum constant to a string. */
    std::string E_SgAsmGenericDLL(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericDLL(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1392
namespace stringify {
    /** Convert E_SgAsmGenericFile enum constant to a string. */
    const char* E_SgAsmGenericFile(long);

    /** Convert E_SgAsmGenericFile enum constant to a string. */
    std::string E_SgAsmGenericFile(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericFile(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1395
namespace stringify {
    /** Convert E_SgAsmPEFileHeader enum constant to a string. */
    const char* E_SgAsmPEFileHeader(long);

    /** Convert E_SgAsmPEFileHeader enum constant to a string. */
    std::string E_SgAsmPEFileHeader(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEFileHeader(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1398
namespace stringify {
    /** Convert E_SgAsmLEFileHeader enum constant to a string. */
    const char* E_SgAsmLEFileHeader(long);

    /** Convert E_SgAsmLEFileHeader enum constant to a string. */
    std::string E_SgAsmLEFileHeader(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmLEFileHeader(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1401
namespace stringify {
    /** Convert E_SgAsmNEFileHeader enum constant to a string. */
    const char* E_SgAsmNEFileHeader(long);

    /** Convert E_SgAsmNEFileHeader enum constant to a string. */
    std::string E_SgAsmNEFileHeader(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmNEFileHeader(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1404
namespace stringify {
    /** Convert E_SgAsmDOSFileHeader enum constant to a string. */
    const char* E_SgAsmDOSFileHeader(long);

    /** Convert E_SgAsmDOSFileHeader enum constant to a string. */
    std::string E_SgAsmDOSFileHeader(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDOSFileHeader(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1407
namespace stringify {
    /** Convert E_SgAsmElfFileHeader enum constant to a string. */
    const char* E_SgAsmElfFileHeader(long);

    /** Convert E_SgAsmElfFileHeader enum constant to a string. */
    std::string E_SgAsmElfFileHeader(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfFileHeader(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1410
namespace stringify {
    /** Convert E_SgAsmGenericHeader enum constant to a string. */
    const char* E_SgAsmGenericHeader(long);

    /** Convert E_SgAsmGenericHeader enum constant to a string. */
    std::string E_SgAsmGenericHeader(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericHeader(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1413
namespace stringify {
    /** Convert E_SgAsmElfSymbolSection enum constant to a string. */
    const char* E_SgAsmElfSymbolSection(long);

    /** Convert E_SgAsmElfSymbolSection enum constant to a string. */
    std::string E_SgAsmElfSymbolSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymbolSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1416
namespace stringify {
    /** Convert E_SgAsmElfRelocSection enum constant to a string. */
    const char* E_SgAsmElfRelocSection(long);

    /** Convert E_SgAsmElfRelocSection enum constant to a string. */
    std::string E_SgAsmElfRelocSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfRelocSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1419
namespace stringify {
    /** Convert E_SgAsmElfDynamicSection enum constant to a string. */
    const char* E_SgAsmElfDynamicSection(long);

    /** Convert E_SgAsmElfDynamicSection enum constant to a string. */
    std::string E_SgAsmElfDynamicSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfDynamicSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1422
namespace stringify {
    /** Convert E_SgAsmElfStringSection enum constant to a string. */
    const char* E_SgAsmElfStringSection(long);

    /** Convert E_SgAsmElfStringSection enum constant to a string. */
    std::string E_SgAsmElfStringSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfStringSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1425
namespace stringify {
    /** Convert E_SgAsmElfNoteSection enum constant to a string. */
    const char* E_SgAsmElfNoteSection(long);

    /** Convert E_SgAsmElfNoteSection enum constant to a string. */
    std::string E_SgAsmElfNoteSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfNoteSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1428
namespace stringify {
    /** Convert E_SgAsmElfEHFrameSection enum constant to a string. */
    const char* E_SgAsmElfEHFrameSection(long);

    /** Convert E_SgAsmElfEHFrameSection enum constant to a string. */
    std::string E_SgAsmElfEHFrameSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfEHFrameSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1431
namespace stringify {
    /** Convert E_SgAsmElfSymverSection enum constant to a string. */
    const char* E_SgAsmElfSymverSection(long);

    /** Convert E_SgAsmElfSymverSection enum constant to a string. */
    std::string E_SgAsmElfSymverSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1434
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedSection enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedSection(long);

    /** Convert E_SgAsmElfSymverDefinedSection enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1437
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededSection enum constant to a string. */
    const char* E_SgAsmElfSymverNeededSection(long);

    /** Convert E_SgAsmElfSymverNeededSection enum constant to a string. */
    std::string E_SgAsmElfSymverNeededSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1440
namespace stringify {
    /** Convert E_SgAsmElfSection enum constant to a string. */
    const char* E_SgAsmElfSection(long);

    /** Convert E_SgAsmElfSection enum constant to a string. */
    std::string E_SgAsmElfSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1443
namespace stringify {
    /** Convert E_SgAsmPEImportSection enum constant to a string. */
    const char* E_SgAsmPEImportSection(long);

    /** Convert E_SgAsmPEImportSection enum constant to a string. */
    std::string E_SgAsmPEImportSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1446
namespace stringify {
    /** Convert E_SgAsmPEExportSection enum constant to a string. */
    const char* E_SgAsmPEExportSection(long);

    /** Convert E_SgAsmPEExportSection enum constant to a string. */
    std::string E_SgAsmPEExportSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1449
namespace stringify {
    /** Convert E_SgAsmPEStringSection enum constant to a string. */
    const char* E_SgAsmPEStringSection(long);

    /** Convert E_SgAsmPEStringSection enum constant to a string. */
    std::string E_SgAsmPEStringSection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEStringSection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1452
namespace stringify {
    /** Convert E_SgAsmPESection enum constant to a string. */
    const char* E_SgAsmPESection(long);

    /** Convert E_SgAsmPESection enum constant to a string. */
    std::string E_SgAsmPESection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPESection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1455
namespace stringify {
    /** Convert E_SgAsmCoffSymbolTable enum constant to a string. */
    const char* E_SgAsmCoffSymbolTable(long);

    /** Convert E_SgAsmCoffSymbolTable enum constant to a string. */
    std::string E_SgAsmCoffSymbolTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmCoffSymbolTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1458
namespace stringify {
    /** Convert E_SgAsmNESection enum constant to a string. */
    const char* E_SgAsmNESection(long);

    /** Convert E_SgAsmNESection enum constant to a string. */
    std::string E_SgAsmNESection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmNESection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1461
namespace stringify {
    /** Convert E_SgAsmNEModuleTable enum constant to a string. */
    const char* E_SgAsmNEModuleTable(long);

    /** Convert E_SgAsmNEModuleTable enum constant to a string. */
    std::string E_SgAsmNEModuleTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmNEModuleTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1464
namespace stringify {
    /** Convert E_SgAsmNEEntryTable enum constant to a string. */
    const char* E_SgAsmNEEntryTable(long);

    /** Convert E_SgAsmNEEntryTable enum constant to a string. */
    std::string E_SgAsmNEEntryTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmNEEntryTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1467
namespace stringify {
    /** Convert E_SgAsmNERelocTable enum constant to a string. */
    const char* E_SgAsmNERelocTable(long);

    /** Convert E_SgAsmNERelocTable enum constant to a string. */
    std::string E_SgAsmNERelocTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmNERelocTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1470
namespace stringify {
    /** Convert E_SgAsmLESection enum constant to a string. */
    const char* E_SgAsmLESection(long);

    /** Convert E_SgAsmLESection enum constant to a string. */
    std::string E_SgAsmLESection(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmLESection(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1473
namespace stringify {
    /** Convert E_SgAsmLEPageTable enum constant to a string. */
    const char* E_SgAsmLEPageTable(long);

    /** Convert E_SgAsmLEPageTable enum constant to a string. */
    std::string E_SgAsmLEPageTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmLEPageTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1476
namespace stringify {
    /** Convert E_SgAsmLEEntryTable enum constant to a string. */
    const char* E_SgAsmLEEntryTable(long);

    /** Convert E_SgAsmLEEntryTable enum constant to a string. */
    std::string E_SgAsmLEEntryTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmLEEntryTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1479
namespace stringify {
    /** Convert E_SgAsmLERelocTable enum constant to a string. */
    const char* E_SgAsmLERelocTable(long);

    /** Convert E_SgAsmLERelocTable enum constant to a string. */
    std::string E_SgAsmLERelocTable(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmLERelocTable(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1482
namespace stringify {
    /** Convert E_SgAsmCoffSymbol enum constant to a string. */
    const char* E_SgAsmCoffSymbol(long);

    /** Convert E_SgAsmCoffSymbol enum constant to a string. */
    std::string E_SgAsmCoffSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmCoffSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1485
namespace stringify {
    /** Convert E_SgAsmElfSymbol enum constant to a string. */
    const char* E_SgAsmElfSymbol(long);

    /** Convert E_SgAsmElfSymbol enum constant to a string. */
    std::string E_SgAsmElfSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1488
namespace stringify {
    /** Convert E_SgAsmGenericSymbol enum constant to a string. */
    const char* E_SgAsmGenericSymbol(long);

    /** Convert E_SgAsmGenericSymbol enum constant to a string. */
    std::string E_SgAsmGenericSymbol(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericSymbol(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1491
namespace stringify {
    /** Convert E_SgAsmGenericSectionList enum constant to a string. */
    const char* E_SgAsmGenericSectionList(long);

    /** Convert E_SgAsmGenericSectionList enum constant to a string. */
    std::string E_SgAsmGenericSectionList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericSectionList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1494
namespace stringify {
    /** Convert E_SgAsmGenericHeaderList enum constant to a string. */
    const char* E_SgAsmGenericHeaderList(long);

    /** Convert E_SgAsmGenericHeaderList enum constant to a string. */
    std::string E_SgAsmGenericHeaderList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericHeaderList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1497
namespace stringify {
    /** Convert E_SgAsmElfSymbolList enum constant to a string. */
    const char* E_SgAsmElfSymbolList(long);

    /** Convert E_SgAsmElfSymbolList enum constant to a string. */
    std::string E_SgAsmElfSymbolList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymbolList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1500
namespace stringify {
    /** Convert E_SgAsmElfRelocEntryList enum constant to a string. */
    const char* E_SgAsmElfRelocEntryList(long);

    /** Convert E_SgAsmElfRelocEntryList enum constant to a string. */
    std::string E_SgAsmElfRelocEntryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfRelocEntryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1503
namespace stringify {
    /** Convert E_SgAsmPEExportEntry enum constant to a string. */
    const char* E_SgAsmPEExportEntry(long);

    /** Convert E_SgAsmPEExportEntry enum constant to a string. */
    std::string E_SgAsmPEExportEntry(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportEntry(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1506
namespace stringify {
    /** Convert E_SgAsmPEExportEntryList enum constant to a string. */
    const char* E_SgAsmPEExportEntryList(long);

    /** Convert E_SgAsmPEExportEntryList enum constant to a string. */
    std::string E_SgAsmPEExportEntryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportEntryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1509
namespace stringify {
    /** Convert E_SgAsmElfDynamicEntry enum constant to a string. */
    const char* E_SgAsmElfDynamicEntry(long);

    /** Convert E_SgAsmElfDynamicEntry enum constant to a string. */
    std::string E_SgAsmElfDynamicEntry(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfDynamicEntry(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1512
namespace stringify {
    /** Convert E_SgAsmElfSegmentTableEntryList enum constant to a string. */
    const char* E_SgAsmElfSegmentTableEntryList(long);

    /** Convert E_SgAsmElfSegmentTableEntryList enum constant to a string. */
    std::string E_SgAsmElfSegmentTableEntryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSegmentTableEntryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1515
namespace stringify {
    /** Convert E_SgAsmElfNoteEntry enum constant to a string. */
    const char* E_SgAsmElfNoteEntry(long);

    /** Convert E_SgAsmElfNoteEntry enum constant to a string. */
    std::string E_SgAsmElfNoteEntry(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfNoteEntry(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1518
namespace stringify {
    /** Convert E_SgAsmElfSymverEntryList enum constant to a string. */
    const char* E_SgAsmElfSymverEntryList(long);

    /** Convert E_SgAsmElfSymverEntryList enum constant to a string. */
    std::string E_SgAsmElfSymverEntryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverEntryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1521
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedEntry enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedEntry(long);

    /** Convert E_SgAsmElfSymverDefinedEntry enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedEntry(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedEntry(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1524
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedEntryList enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedEntryList(long);

    /** Convert E_SgAsmElfSymverDefinedEntryList enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedEntryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedEntryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1527
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedAux enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedAux(long);

    /** Convert E_SgAsmElfSymverDefinedAux enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedAux(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedAux(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1530
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedAuxList enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedAuxList(long);

    /** Convert E_SgAsmElfSymverDefinedAuxList enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedAuxList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedAuxList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1533
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededEntry enum constant to a string. */
    const char* E_SgAsmElfSymverNeededEntry(long);

    /** Convert E_SgAsmElfSymverNeededEntry enum constant to a string. */
    std::string E_SgAsmElfSymverNeededEntry(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededEntry(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1536
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededEntryList enum constant to a string. */
    const char* E_SgAsmElfSymverNeededEntryList(long);

    /** Convert E_SgAsmElfSymverNeededEntryList enum constant to a string. */
    std::string E_SgAsmElfSymverNeededEntryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededEntryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1539
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededAux enum constant to a string. */
    const char* E_SgAsmElfSymverNeededAux(long);

    /** Convert E_SgAsmElfSymverNeededAux enum constant to a string. */
    std::string E_SgAsmElfSymverNeededAux(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededAux(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1542
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededAuxList enum constant to a string. */
    const char* E_SgAsmElfSymverNeededAuxList(long);

    /** Convert E_SgAsmElfSymverNeededAuxList enum constant to a string. */
    std::string E_SgAsmElfSymverNeededAuxList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededAuxList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1545
namespace stringify {
    /** Convert E_SgAsmPEImportDirectory enum constant to a string. */
    const char* E_SgAsmPEImportDirectory(long);

    /** Convert E_SgAsmPEImportDirectory enum constant to a string. */
    std::string E_SgAsmPEImportDirectory(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportDirectory(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1548
namespace stringify {
    /** Convert E_SgAsmPEExportDirectory enum constant to a string. */
    const char* E_SgAsmPEExportDirectory(long);

    /** Convert E_SgAsmPEExportDirectory enum constant to a string. */
    std::string E_SgAsmPEExportDirectory(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportDirectory(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1551
namespace stringify {
    /** Convert E_SgAsmCoffSymbolList enum constant to a string. */
    const char* E_SgAsmCoffSymbolList(long);

    /** Convert E_SgAsmCoffSymbolList enum constant to a string. */
    std::string E_SgAsmCoffSymbolList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmCoffSymbolList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1554
namespace stringify {
    /** Convert E_SgAsmPERVASizePairList enum constant to a string. */
    const char* E_SgAsmPERVASizePairList(long);

    /** Convert E_SgAsmPERVASizePairList enum constant to a string. */
    std::string E_SgAsmPERVASizePairList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPERVASizePairList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1557
namespace stringify {
    /** Convert E_SgAsmElfEHFrameEntryCI enum constant to a string. */
    const char* E_SgAsmElfEHFrameEntryCI(long);

    /** Convert E_SgAsmElfEHFrameEntryCI enum constant to a string. */
    std::string E_SgAsmElfEHFrameEntryCI(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmElfEHFrameEntryCI(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1560
namespace stringify {
    /** Convert E_SgAsmPEImportDirectoryList enum constant to a string. */
    const char* E_SgAsmPEImportDirectoryList(long);

    /** Convert E_SgAsmPEImportDirectoryList enum constant to a string. */
    std::string E_SgAsmPEImportDirectoryList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportDirectoryList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1563
namespace stringify {
    /** Convert E_SgAsmLEEntryPoint enum constant to a string. */
    const char* E_SgAsmLEEntryPoint(long);

    /** Convert E_SgAsmLEEntryPoint enum constant to a string. */
    std::string E_SgAsmLEEntryPoint(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmLEEntryPoint(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1566
namespace stringify {
    /** Convert E_SgAsmDwarfMacroList enum constant to a string. */
    const char* E_SgAsmDwarfMacroList(long);

    /** Convert E_SgAsmDwarfMacroList enum constant to a string. */
    std::string E_SgAsmDwarfMacroList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfMacroList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1569
namespace stringify {
    /** Convert E_SgAsmDwarfLineList enum constant to a string. */
    const char* E_SgAsmDwarfLineList(long);

    /** Convert E_SgAsmDwarfLineList enum constant to a string. */
    std::string E_SgAsmDwarfLineList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfLineList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1572
namespace stringify {
    /** Convert E_SgAsmDwarfCompilationUnitList enum constant to a string. */
    const char* E_SgAsmDwarfCompilationUnitList(long);

    /** Convert E_SgAsmDwarfCompilationUnitList enum constant to a string. */
    std::string E_SgAsmDwarfCompilationUnitList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfCompilationUnitList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1575
namespace stringify {
    /** Convert E_SgAsmDwarfArrayType enum constant to a string. */
    const char* E_SgAsmDwarfArrayType(long);

    /** Convert E_SgAsmDwarfArrayType enum constant to a string. */
    std::string E_SgAsmDwarfArrayType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfArrayType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1578
namespace stringify {
    /** Convert E_SgAsmDwarfClassType enum constant to a string. */
    const char* E_SgAsmDwarfClassType(long);

    /** Convert E_SgAsmDwarfClassType enum constant to a string. */
    std::string E_SgAsmDwarfClassType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfClassType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1581
namespace stringify {
    /** Convert E_SgAsmDwarfEnumerationType enum constant to a string. */
    const char* E_SgAsmDwarfEnumerationType(long);

    /** Convert E_SgAsmDwarfEnumerationType enum constant to a string. */
    std::string E_SgAsmDwarfEnumerationType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfEnumerationType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1584
namespace stringify {
    /** Convert E_SgAsmDwarfLexicalBlock enum constant to a string. */
    const char* E_SgAsmDwarfLexicalBlock(long);

    /** Convert E_SgAsmDwarfLexicalBlock enum constant to a string. */
    std::string E_SgAsmDwarfLexicalBlock(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfLexicalBlock(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1587
namespace stringify {
    /** Convert E_SgAsmDwarfCompilationUnit enum constant to a string. */
    const char* E_SgAsmDwarfCompilationUnit(long);

    /** Convert E_SgAsmDwarfCompilationUnit enum constant to a string. */
    std::string E_SgAsmDwarfCompilationUnit(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfCompilationUnit(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1590
namespace stringify {
    /** Convert E_SgAsmDwarfStructureType enum constant to a string. */
    const char* E_SgAsmDwarfStructureType(long);

    /** Convert E_SgAsmDwarfStructureType enum constant to a string. */
    std::string E_SgAsmDwarfStructureType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfStructureType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1593
namespace stringify {
    /** Convert E_SgAsmDwarfSubroutineType enum constant to a string. */
    const char* E_SgAsmDwarfSubroutineType(long);

    /** Convert E_SgAsmDwarfSubroutineType enum constant to a string. */
    std::string E_SgAsmDwarfSubroutineType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfSubroutineType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1596
namespace stringify {
    /** Convert E_SgAsmDwarfUnionType enum constant to a string. */
    const char* E_SgAsmDwarfUnionType(long);

    /** Convert E_SgAsmDwarfUnionType enum constant to a string. */
    std::string E_SgAsmDwarfUnionType(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfUnionType(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1599
namespace stringify {
    /** Convert E_SgAsmDwarfCommonBlock enum constant to a string. */
    const char* E_SgAsmDwarfCommonBlock(long);

    /** Convert E_SgAsmDwarfCommonBlock enum constant to a string. */
    std::string E_SgAsmDwarfCommonBlock(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfCommonBlock(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1602
namespace stringify {
    /** Convert E_SgAsmDwarfInlinedSubroutine enum constant to a string. */
    const char* E_SgAsmDwarfInlinedSubroutine(long);

    /** Convert E_SgAsmDwarfInlinedSubroutine enum constant to a string. */
    std::string E_SgAsmDwarfInlinedSubroutine(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfInlinedSubroutine(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1605
namespace stringify {
    /** Convert E_SgAsmDwarfSubprogram enum constant to a string. */
    const char* E_SgAsmDwarfSubprogram(long);

    /** Convert E_SgAsmDwarfSubprogram enum constant to a string. */
    std::string E_SgAsmDwarfSubprogram(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfSubprogram(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1608
namespace stringify {
    /** Convert E_SgAsmDwarfNamespace enum constant to a string. */
    const char* E_SgAsmDwarfNamespace(long);

    /** Convert E_SgAsmDwarfNamespace enum constant to a string. */
    std::string E_SgAsmDwarfNamespace(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfNamespace(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1611
namespace stringify {
    /** Convert E_SgAsmDwarfConstructList enum constant to a string. */
    const char* E_SgAsmDwarfConstructList(long);

    /** Convert E_SgAsmDwarfConstructList enum constant to a string. */
    std::string E_SgAsmDwarfConstructList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfConstructList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1614
namespace stringify {
    /** Convert E_SgAsmPEImportItem enum constant to a string. */
    const char* E_SgAsmPEImportItem(long);

    /** Convert E_SgAsmPEImportItem enum constant to a string. */
    std::string E_SgAsmPEImportItem(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportItem(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1617
namespace stringify {
    /** Convert E_SgAsmPEImportItemList enum constant to a string. */
    const char* E_SgAsmPEImportItemList(long);

    /** Convert E_SgAsmPEImportItemList enum constant to a string. */
    std::string E_SgAsmPEImportItemList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportItemList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1620
namespace stringify {
    /** Convert E_SgAsmInterpretationList enum constant to a string. */
    const char* E_SgAsmInterpretationList(long);

    /** Convert E_SgAsmInterpretationList enum constant to a string. */
    std::string E_SgAsmInterpretationList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmInterpretationList(long int n, const char *strip=NULL, bool canonic=false);
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1623
namespace stringify {
    /** Convert E_SgAsmGenericFileList enum constant to a string. */
    const char* E_SgAsmGenericFileList(long);

    /** Convert E_SgAsmGenericFileList enum constant to a string. */
    std::string E_SgAsmGenericFileList(long, const std::string &strip);
}

namespace Rose {
    std::string stringifyE_SgAsmGenericFileList(long int n, const char *strip=NULL, bool canonic=false);
}

/** Stringification. */
namespace stringify {
    /** Stringification. */
    namespace Rose {
        /** Stringification. */
        namespace BinaryAnalysis {
            /** Stringification. */
            namespace AsmUnparser {
            }
            /** Stringification. */
            namespace SerialIo {
            }
            /** Stringification. */
            namespace TaintedFlow {
            }
            /** Stringification. */
            namespace SymbolicExprParser {
                /** Stringification. */
                namespace Token {
                }
            }
            /** Stringification. */
            namespace Reachability {
            }
            /** Stringification. */
            namespace SymbolicExpr {
                /** Stringification. */
                namespace Formatter {
                }
                /** Stringification. */
                namespace Leaf {
                }
            }
            /** Stringification. */
            namespace FunctionSimilarity {
            }
            /** Stringification. */
            namespace FeasiblePath {
                /** Stringification. */
                namespace PathProcessor {
                }
            }
            /** Stringification. */
            namespace Strings {
            }
            /** Stringification. */
            namespace SmtSolver {
            }
            /** Stringification. */
            namespace CallingConvention {
                /** Stringification. */
                namespace ParameterLocation {
                }
            }
            /** Stringification. */
            namespace Commit {
            }
            /** Stringification. */
            namespace CodeInserter {
            }
            /** Stringification. */
            namespace DwarfLineMapper {
            }
            /** Stringification. */
            namespace InstructionSemantics2 {
                /** Stringification. */
                namespace BaseSemantics {
                }
                /** Stringification. */
                namespace DataFlowSemantics {
                    /** Stringification. */
                    namespace DataFlowEdge {
                    }
                }
                /** Stringification. */
                namespace SymbolicSemantics {
                }
                /** Stringification. */
                namespace IntervalSemantics {
                }
                /** Stringification. */
                namespace DispatcherX86 {
                }
            }
            /** Stringification. */
            namespace MagicNumber {
            }
            /** Stringification. */
            namespace SRecord {
            }
            /** Stringification. */
            namespace MemoryMap {
                /** Stringification. */
                namespace Attach {
                }
            }
            /** Stringification. */
            namespace BinaryLoader {
            }
            /** Stringification. */
            namespace Partitioner2 {
                /** Stringification. */
                namespace Function {
                }
                /** Stringification. */
                namespace Partitioner {
                    /** Stringification. */
                    namespace MayReturnVertexInfo {
                    }
                }
                /** Stringification. */
                namespace ModulesElf {
                    /** Stringification. */
                    namespace FixUndefinedSymbols {
                    }
                }
                /** Stringification. */
                namespace Precision {
                }
                /** Stringification. */
                namespace DataFlow {
                    /** Stringification. */
                    namespace DfCfgVertex {
                    }
                }
                /** Stringification. */
                namespace BasicBlockCallback {
                }
                /** Stringification. */
                namespace Reference {
                }
                /** Stringification. */
                namespace Inliner {
                }
            }
            /** Stringification. */
            namespace BinaryDebugger {
            }
            /** Stringification. */
            namespace DisassemblerX86 {
            }
            /** Stringification. */
            namespace DisassemblerMips {
                /** Stringification. */
                namespace Mips32 {
                }
            }
        }
        /** Stringification. */
        namespace EditDistance {
            /** Stringification. */
            namespace TreeEditDistance {
            }
        }
        /** Stringification. */
        namespace Snippet {
        }
        /** Stringification. */
        namespace StringUtility {
        }
        /** Stringification. */
        namespace CommandLine {
            /** Stringification. */
            namespace FailedAssertionBehaviorAdjuster {
            }
        }
    }
    /** Stringification. */
    namespace UnparseLanguageIndependentConstructs {
    }
    /** Stringification. */
    namespace Unparser {
    }
    /** Stringification. */
    namespace Unparse_ExprStmt {
    }
    /** Stringification. */
    namespace AstUnparseAttribute {
    }
    /** Stringification. */
    namespace DOTGeneration {
    }
    /** Stringification. */
    namespace qrs {
        /** Stringification. */
        namespace QRButtons {
        }
        /** Stringification. */
        namespace QRSelect {
        }
        /** Stringification. */
        namespace QREdit {
        }
        /** Stringification. */
        namespace QEditor {
        }
        /** Stringification. */
        namespace QSourceColorizer {
        }
        /** Stringification. */
        namespace Paren {
        }
        /** Stringification. */
        namespace ParenMatcher {
        }
        /** Stringification. */
        namespace Symbol {
        }
        /** Stringification. */
        namespace QRSourceBox {
        }
        /** Stringification. */
        namespace Q3TextStringChar {
        }
        /** Stringification. */
        namespace Q3TextCursor {
        }
        /** Stringification. */
        namespace Q3TextCommand {
        }
        /** Stringification. */
        namespace Q3TextCustomItem {
        }
        /** Stringification. */
        namespace Q3TextDocument {
        }
        /** Stringification. */
        namespace Q3TextPreProcessor {
        }
        /** Stringification. */
        namespace Q3TextFormat {
        }
        /** Stringification. */
        namespace QRTreeBox {
        }
    }
    /** Stringification. */
    namespace SgNodeHelper {
        /** Stringification. */
        namespace Pattern {
            /** Stringification. */
            namespace OutputTarget {
            }
        }
    }
    /** Stringification. */
    namespace SPRAY {
        /** Stringification. */
        namespace LabelProperty {
        }
    }
    /** Stringification. */
    namespace MDCG {
        /** Stringification. */
        namespace Model {
            /** Stringification. */
            namespace element_t {
            }
        }
    }
    /** Stringification. */
    namespace NameQuery {
    }
    /** Stringification. */
    namespace BooleanQuery {
    }
    /** Stringification. */
    namespace AstQueryNamespace {
    }
    /** Stringification. */
    namespace NumberQuery {
    }
    /** Stringification. */
    namespace NodeQuery {
    }
    /** Stringification. */
    namespace AbstractMemoryObject {
        /** Stringification. */
        namespace IndexSet {
        }
    }
    /** Stringification. */
    namespace OmpSupport {
    }
    /** Stringification. */
    namespace FunctionCallInfo {
    }
    /** Stringification. */
    namespace SDG {
        /** Stringification. */
        namespace SDGNode {
        }
        /** Stringification. */
        namespace SDGEdge {
        }
        /** Stringification. */
        namespace PDGEdge {
        }
    }
    /** Stringification. */
    namespace PtrAliasAnalysis {
    }
    /** Stringification. */
    namespace CollectAliasRelations {
    }
    /** Stringification. */
    namespace DominatorTreesAndDominanceFrontiers {
        /** Stringification. */
        namespace DominatorTree {
        }
    }
    /** Stringification. */
    namespace ssa_unfiltered_cfg {
        /** Stringification. */
        namespace ReachingDef {
        }
    }
    /** Stringification. */
    namespace CGFunction {
        /** Stringification. */
        namespace iterator {
        }
    }
    /** Stringification. */
    namespace TaintLattice {
    }
    /** Stringification. */
    namespace ConstrGraph {
    }
    /** Stringification. */
    namespace BaseGraph {
        /** Stringification. */
        namespace BiDirNodesIterator {
        }
    }
    /** Stringification. */
    namespace RIFG {
    }
    /** Stringification. */
    namespace CFG {
    }
    /** Stringification. */
    namespace CallGraph {
    }
    /** Stringification. */
    namespace ReachingDef {
    }
    /** Stringification. */
    namespace MidLevelCollectionTypedefs {
    }
    /** Stringification. */
    namespace HighLevelCollectionTypedefs {
    }
    /** Stringification. */
    namespace klt_tile_desc_t {
    }
    /** Stringification. */
    namespace KLT {
        /** Stringification. */
        namespace LoopTree {
        }
        /** Stringification. */
        namespace Descriptor {
        }
    }
    /** Stringification. */
    namespace AstAttribute {
    }
    /** Stringification. */
    namespace MatchStatus {
    }
    /** Stringification. */
    namespace AstNodeClass {
    }
    /** Stringification. */
    namespace SgAsmRiscOperation {
    }
    /** Stringification. */
    namespace SgAsmFunction {
    }
    /** Stringification. */
    namespace SgAsmBlock {
    }
    /** Stringification. */
    namespace SgAsmElfFileHeader {
    }
    /** Stringification. */
    namespace SgAsmElfSectionTableEntry {
    }
    /** Stringification. */
    namespace SgAsmElfSegmentTableEntry {
    }
    /** Stringification. */
    namespace SgAsmElfSymbol {
    }
    /** Stringification. */
    namespace SgAsmElfRelocEntry {
    }
    /** Stringification. */
    namespace SgAsmElfDynamicEntry {
    }
    /** Stringification. */
    namespace SgAsmPEFileHeader {
    }
    /** Stringification. */
    namespace SgAsmPESectionTableEntry {
    }
    /** Stringification. */
    namespace SgAsmGenericSymbol {
    }
    /** Stringification. */
    namespace SgAsmGenericSection {
    }
    /** Stringification. */
    namespace SgAsmGenericFile {
    }
    /** Stringification. */
    namespace SgAsmExecutableFileFormat {
    }
    /** Stringification. */
    namespace Sawyer {
        /** Stringification. */
        namespace Container {
            /** Stringification. */
            namespace Algorithm {
            }
            /** Stringification. */
            namespace Graph {
            }
        }
        /** Stringification. */
        namespace Access {
        }
        /** Stringification. */
        namespace CommandLine {
            /** Stringification. */
            namespace Parser {
            }
        }
        /** Stringification. */
        namespace Document {
            /** Stringification. */
            namespace Markup {
            }
        }
        /** Stringification. */
        namespace Language {
            /** Stringification. */
            namespace Clexer {
            }
        }
        /** Stringification. */
        namespace Message {
            /** Stringification. */
            namespace Prefix {
            }
        }
    }
    /** Stringification. */
    namespace SageBuilder {
    }
    /** Stringification. */
    namespace AstAttributeDOT {
    }
    /** Stringification. */
    namespace DOTGraphNode {
    }
    /** Stringification. */
    namespace DOTGraphEdge {
    }
    /** Stringification. */
    namespace AST_Graph {
    }
    /** Stringification. */
    namespace PreprocessingInfo {
    }
    /** Stringification. */
    namespace ROSEAttributesList {
    }
    /** Stringification. */
    namespace VirtualCFG {
    }
    /** Stringification. */
    namespace VirtualBinCFG {
    }
    /** Stringification. */
    namespace ROSE_token_ids {
    }
    /** Stringification. */
    namespace Cobol_ROSE_Translation {
    }
    /** Stringification. */
    namespace a_type_wrapper {
    }
    /** Stringification. */
    namespace a_class_type_wrapper {
    }
    /** Stringification. */
    namespace a_type_indirection {
    }
    /** Stringification. */
    namespace an_array_type_wrapper {
    }
    /** Stringification. */
    namespace an_accessibility {
    }
    /** Stringification. */
    namespace a_type_definition {
    }
    /** Stringification. */
    namespace __cxxabiv1 {
        /** Stringification. */
        namespace __base_class_type_info {
        }
        /** Stringification. */
        namespace __vmi_class_type_info {
        }
        /** Stringification. */
        namespace __pbase_type_info {
        }
    }
    /** Stringification. */
    namespace ClangToSageTranslator {
    }
    /** Stringification. */
    namespace Jovial_ROSE_Translation {
    }
    /** Stringification. */
    namespace ByteOrder {
    }
    /** Stringification. */
    namespace Ada_ROSE_Translation {
    }
    /** Stringification. */
    namespace General_Language_Translation {
    }
    /** Stringification. */
    namespace FAST {
        /** Stringification. */
        namespace TypeSpec {
        }
        /** Stringification. */
        namespace AttrSpec {
        }
        /** Stringification. */
        namespace UseStmt {
        }
        /** Stringification. */
        namespace PrefixSpec {
        }
    }
    /** Stringification. */
    namespace ROSE_Fortran_defs {
    }
    /** Stringification. */
    namespace AssemblerX86 {
    }
    /** Stringification. */
    namespace RegisterDictionary {
        /** Stringification. */
        namespace SortBySize {
        }
    }
    /** Stringification. */
    namespace Assembler {
    }
    /** Stringification. */
    namespace Fortran_ROSE_Translation {
    }
    /** Stringification. */
    namespace DisplayEdge {
    }
    /** Stringification. */
    namespace Task {
    }
    /** Stringification. */
    namespace CompilerOutputWidget {
    }
    /** Stringification. */
    namespace QtColorLine {
    }
    /** Stringification. */
    namespace QtGradientWidgetPrivate {
    }
    /** Stringification. */
    namespace AstDisplayInfo {
    }
    /** Stringification. */
    namespace QEditor {
    }
    /** Stringification. */
    namespace QLanguageDefinition {
    }
    /** Stringification. */
    namespace QNFAAction {
    }
    /** Stringification. */
    namespace QNFADefinition {
        /** Stringification. */
        namespace PMatch {
        }
    }
    /** Stringification. */
    namespace QDocumentCursor {
    }
    /** Stringification. */
    namespace QDocumentCursorHandle {
    }
    /** Stringification. */
    namespace QDocumentCommand {
    }
    /** Stringification. */
    namespace QParenthesis {
    }
    /** Stringification. */
    namespace QDocumentLine {
    }
    /** Stringification. */
    namespace QDocument {
    }
    /** Stringification. */
    namespace QDocumentSearch {
    }
    /** Stringification. */
    namespace QPanelLayout {
    }
    /** Stringification. */
    namespace QReliableFileWatch {
    }
    /** Stringification. */
    namespace QCodeEdit {
    }
    /** Stringification. */
    namespace DependencyInfo {
    }
    /** Stringification. */
    namespace GenRepresentation {
    }
    /** Stringification. */
    namespace FailSafe {
    }
    /** Stringification. */
    namespace ROSE_Callbacks {
    }
    /** Stringification. */
    namespace SqlDatabase {
    }
    /** Stringification. */
    namespace TransformationSupport {
    }
    /** Stringification. */
    namespace SgConstVolatileModifier {
    }
    /** Stringification. */
    namespace SgStorageModifier {
    }
    /** Stringification. */
    namespace SgAccessModifier {
    }
    /** Stringification. */
    namespace SgFunctionModifier {
    }
    /** Stringification. */
    namespace SgUPC_AccessModifier {
    }
    /** Stringification. */
    namespace SgSpecialFunctionModifier {
    }
    /** Stringification. */
    namespace SgElaboratedTypeModifier {
    }
    /** Stringification. */
    namespace SgLinkageModifier {
    }
    /** Stringification. */
    namespace SgBaseClassModifier {
    }
    /** Stringification. */
    namespace SgTypeModifier {
    }
    /** Stringification. */
    namespace SgDeclarationModifier {
    }
    /** Stringification. */
    namespace SgOpenclAccessModeModifier {
    }
    /** Stringification. */
    namespace Sg_File_Info {
    }
    /** Stringification. */
    namespace SgFile {
    }
    /** Stringification. */
    namespace SgProject {
    }
    /** Stringification. */
    namespace SgUnparse_Info {
    }
    /** Stringification. */
    namespace SgTemplateParameter {
    }
    /** Stringification. */
    namespace SgTemplateArgument {
    }
    /** Stringification. */
    namespace SgGraph {
    }
    /** Stringification. */
    namespace SgDataStatementValue {
    }
    /** Stringification. */
    namespace SgType {
    }
    /** Stringification. */
    namespace SgModifierType {
    }
    /** Stringification. */
    namespace SgMemberFunctionType {
    }
    /** Stringification. */
    namespace SgLocatedNode {
    }
    /** Stringification. */
    namespace SgToken {
    }
    /** Stringification. */
    namespace SgInitializedName {
    }
    /** Stringification. */
    namespace SgOmpClause {
    }
    /** Stringification. */
    namespace SgUntypedType {
    }
    /** Stringification. */
    namespace SgDeclarationStatement {
    }
    /** Stringification. */
    namespace SgVariableDeclaration {
    }
    /** Stringification. */
    namespace SgAttributeSpecificationStatement {
    }
    /** Stringification. */
    namespace SgTemplateDeclaration {
    }
    /** Stringification. */
    namespace SgInterfaceStatement {
    }
    /** Stringification. */
    namespace SgClassDeclaration {
    }
    /** Stringification. */
    namespace SgTemplateClassDeclaration {
    }
    /** Stringification. */
    namespace SgTemplateInstantiationDecl {
    }
    /** Stringification. */
    namespace SgTemplateInstantiationMemberFunctionDecl {
    }
    /** Stringification. */
    namespace SgTemplateInstantiationFunctionDecl {
    }
    /** Stringification. */
    namespace SgProcedureHeaderStatement {
    }
    /** Stringification. */
    namespace SgStopOrPauseStatement {
    }
    /** Stringification. */
    namespace SgIOStatement {
    }
    /** Stringification. */
    namespace SgUnaryOp {
    }
    /** Stringification. */
    namespace SgCastExp {
    }
    /** Stringification. */
    namespace SgThrowOp {
    }
    /** Stringification. */
    namespace SgAsmOp {
    }
    /** Stringification. */
    namespace SgLabelSymbol {
    }
    /** Stringification. */
    namespace SgAsmLEFileHeader {
    }
    /** Stringification. */
    namespace SgAsmNEFileHeader {
    }
    /** Stringification. */
    namespace SgAsmNEEntryPoint {
    }
    /** Stringification. */
    namespace SgAsmNERelocEntry {
    }
    /** Stringification. */
    namespace SgAsmNESectionTableEntry {
    }
    /** Stringification. */
    namespace SgAsmLESectionTableEntry {
    }
}

#endif
