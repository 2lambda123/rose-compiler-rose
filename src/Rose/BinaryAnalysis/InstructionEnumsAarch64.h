#ifndef ROSE_BinaryAnalysis_InstructionEnumsAarch64_H
#define ROSE_BinaryAnalysis_InstructionEnumsAarch64_H
#include <featureTests.h>
#ifdef ROSE_ENABLE_ASM_AARCH64

#include <capstone/arm64.h>
#include <string>

namespace Rose {
namespace BinaryAnalysis {

using ::arm64_insn;
using Aarch64InstructionKind = ::arm64_insn;            /**< Aarch64 instruction types. */

using ::arm64_cc;
using Aarch64InstructionCondition = ::arm64_cc;         /**< Aarch64 condition codes. */

using ::arm64_extender;
using Aarch64Extender = ::arm64_extender;               /**< Aarch64 operand extenders. */

using ::arm64_vas;
using Aarch64VectorArrangement = ::arm64_vas;           /**< Aarch64 vector arrangement specifier. */

using ::arm64_at_op;
using Aarch64AtOperation = ::arm64_at_op;               /**< Aarch64 AT instruction operand. */

using ::arm64_prefetch_op;
using Aarch64PrefetchOperation = ::arm64_prefetch_op;   /**< Aarch64 operand for prefetch instructions. */

using ::arm64_barrier_op;
using Aarch64BarrierOperation = ::arm64_barrier_op;     /**< Aarch64 operand for barrier instructions. */

using ::arm64_pstate;
using Aarch64PState = ::arm64_pstate;                   /**< Aarch64 operand for pstate instructions like MSR. */

// Exception types.
enum class Aarch64Exception {
    brk                                                 // Exception generated by BRK instruction.
};

// Major register numbers for AArch64.
enum Aarch64RegisterClass {
    aarch64_regclass_gpr,                               // General purpose registers.
    aarch64_regclass_sp,                                // Stack pointer registers.
    aarch64_regclass_ext,                               // SIMD and FP registers, so-called "extension" registers.
    aarch64_regclass_pc,                                // Program counter, instruction pointer.
    aarch64_regclass_cc,                                // Condition codes registers.
    aarch64_regclass_system,                            // System registers.
};

// System registers.
//
// There are at most four copies of each system register, one per exception level. Since ROSE allows only 16 distinct major numbers
// for the registers, but 1024 minor numbers, we use a single major number for all the system registers and use the minor numbers
// for the different system registers.  For simplicity, we reserve four minor numbers for each type of system register, although
// this might change in the future.
enum Aarch64SystemRegisters {
    aarch64_system_actlr     = 0,                         // auxiliary control registers
    aarch64_system_ccsidr    = 4,                         // current cache size ID registers
    aarch64_system_clidr     = 8,                         // cache level ID registers
    aarch64_system_cntfrq    = 12,                        // counter-timer frequency registers
    aarch64_system_cntpct    = 16,                        // counter-timer physical count registers
    aarch64_system_cntkctl   = 20,                        // counter-timer kernel control registers
    aarch64_system_cntp_cval = 24,                        // counter-timer physical timer compare registers
    aarch64_system_cpacr     = 28,                        // coprocessor access control registers
    aarch64_system_csselr    = 32,                        // cache size selection registers
    aarch64_system_cntp_ctl  = 36,                        // counter-timer physical control registers
    aarch64_system_ctr       = 40,                        // cache type registers
    aarch64_system_dczid     = 44,                        // data cache zero ID registers
    aarch64_system_elr       = 48,                        // exception link registers
    aarch64_system_esr       = 52,                        // exception syndrome registers
    aarch64_system_far       = 56,                        // fault address registers
    aarch64_system_hcr       = 60,                        // hypervisor configuration registers
    aarch64_system_mair      = 64,                        // memory attribute indirection registers
    aarch64_system_midr      = 68,                        // main ID registers
    aarch64_system_mpidr     = 72,                        // multiprocessor affinity registers
    aarch64_system_scr       = 76,                        // secure configuration registers
    aarch64_system_sctlr     = 80,                        // system control registers
    aarch64_system_spsr      = 84,                        // saved program status registers
    aarch64_system_tcr       = 88,                        // translation control registers
    aarch64_system_tpidr     = 92,                        // user read/write thread ID registers
    aarch64_system_tpidrr0   = 96,                        // user read-only thread ID registers
    aarch64_system_ttbr0     = 100,                       // translation table base registers 0
    aarch64_system_ttbr1     = 104,                       // translation table base register 1
    aarch64_system_vbar      = 108,                       // vector based address registers
    aarch64_system_vtcr      = 112,                       // virtualization translation control registers
    aarch64_system_vttbr     = 116                        // virtualization translation table base registers
};

} // namespace
} // namespace

#endif
#endif
