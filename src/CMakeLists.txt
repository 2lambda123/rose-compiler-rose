set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Ddisc_union=union" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ddisc_union=union" )

#include_directories( ${ROSE_INCLUDES} )
include_directories(${KDE4_INCLUDES} ${KDE4_INCLUDE_DIR} ${QT_INCLUDES} ${Boost_INCLUDE_DIRS} )

#set(  CMAKE_VERBOSE_MAKEFILE  true )

#Headers generated by ROSETTA
# Must keep the list up-to-date, 
# Make will repeatedly run the make rule if one of them no longer exists
set(ROSETTA_HEADERS
#    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AST_FILE_IO.h         
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AstQueryMemoryPool.h  
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.h 
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarMemoryPoolSupport.h
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.h
   )

#source files generated by ROSETTA
set(ROSETTA_SRC
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AST_FILE_IO.C                                   
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCopyMemberFunctions.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarGetChildIndex.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarMemoryPoolSupport.C  
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewAndDeleteOperators.C                
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewConstructors.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarProcessDataMemberReferenceToPointers.C  
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnClassHierarchySubTree.C      
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnDataMemberPointers.C  
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarRTI.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTraverseMemoryPool.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalSuccessorContainer.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarVariantEnumNames.C
#Does not seem to be compiled
#    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/astFileIO/SourcesOfIRNodesAstFileIOSupport.C
    )

# DQ (12/1/2009): Add the StorageClasses.C unless on Windows as we test this more.
if (NOT WIN32)
set(ROSETTA_SRC ${ROSETTA_SRC} ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.C )
endif (NOT WIN32)

#Tell cmake that these files are generated by ROSETTA and will only be available at compile time
SET_SOURCE_FILES_PROPERTIES(
    ${ROSETTA_SRC} 
    ${ROSETTA_HEADERS}  
    PROPERTIES GENERATED 1
    )

#Tell cmake that the preprocessor is generated from this source
SET_SOURCE_FILES_PROPERTIES( 
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/lex.yy.C 
    PROPERTIES GENERATED 1
    )

#Tell cmake that the ompparser is generated from this source
SET_SOURCE_FILES_PROPERTIES(
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/ompparser.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/ompparser.h
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/omp-lex.yy.C
    PROPERTIES GENERATED 1
    )

#Tell cmake that these files are generated by the binary frontend
SET_SOURCE_FILES_PROPERTIES(
     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/x86InstructionEnumPrinter.C 
     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/armInstructionEnumPrinter.C 
     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/powerpcInstructionEnumPrinter.C 
     PROPERTIES GENERATED 1
     )

####### SOURCE FILES IN ROSE

set( STORAGECLASSES_SRC      
    ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFileIO/StorageClassMemoryManagement.C
   )

#add_library(storageclasses ${STORAGECLASSES_SRC} )

# DQ (11/28/2009): Note that both DAG.C and DirectedGraph.C contain only templates and 
# are included in other source files as required. They do not need to be compiled 
# separately and generate a warning to the MSVC linker because they contain no symbols.
  set(rose_util_src 
      ${CMAKE_SOURCE_DIR}/src/util/stringSupport/FileNameClassifier.C
      ${CMAKE_BINARY_DIR}/src/util/rose_paths.C
      ${CMAKE_SOURCE_DIR}/src/util/stringSupport/escape.C
      ${CMAKE_SOURCE_DIR}/src/util/graphs/TypedFusion.C
      ${CMAKE_SOURCE_DIR}/src/util/graphs/DGBaseGraphImpl.C
      ${CMAKE_SOURCE_DIR}/src/util/graphs/TransAnalysis.C
      ${CMAKE_SOURCE_DIR}/src/util/graphs/SCCAnalysis.C
      ${CMAKE_SOURCE_DIR}/src/util/commandlineProcessing/commandline_processing.C
      ${CMAKE_SOURCE_DIR}/src/util/commandlineProcessing/sla++.C
      ${CMAKE_SOURCE_DIR}/src/util/processSupport.C
#     ${CMAKE_SOURCE_DIR}/src/util/support/DirectedGraph.C
      ${CMAKE_SOURCE_DIR}/src/util/support/CommandOptions.C
#     ${CMAKE_SOURCE_DIR}/src/util/support/DAG.C
      ${CMAKE_SOURCE_DIR}/src/util/support/VectorCommandOptions.C
      ${CMAKE_SOURCE_DIR}/src/util/stringSupport/string_functions.cpp
#     ${CMAKE_SOURCE_DIR}/src/util/stringSupport/escape.C

     )


set( phpFrontend_SRC 
     ${CMAKE_SOURCE_DIR}/src/frontend/PHPFrontend/PHPFrontend.C
     )

set( astFixup_SRC
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/AstFixup.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupforGnuBackendCompiler.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupInClassDataInitialization.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/removeInitializedNamePtr.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupDeclarations2.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupFunctionDefinitions.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupStorageAccessOfForwardTemplateDeclarations.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupSourcePositionInformation.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupEnumValues.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/astFixup/fixupFriendTemplateDeclarations.C
   )

set( sage3_SRC
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/rose_attributes_list.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/attachPreprocessingInfo.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/attachPreprocessingInfoTraversal.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/attributeListMap.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/manglingSupport.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/sageSupport.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/fixupCopy_scopes.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/fixupCopy_symbols.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/fixupCopy_references.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/rtiHelpers.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/OmpAttribute.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/ompFortranParser.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/dwarfSupport.C 
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/rose_graph_support.C
   ${CMAKE_BINARY_DIR}/src/frontend/SageIII/lex.yy.C
   ${CMAKE_BINARY_DIR}/src/frontend/SageIII/ompparser.C
   ${CMAKE_BINARY_DIR}/src/frontend/SageIII/omp-lex.yy.C
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/omplexer.ll
   ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/ompparser.yy
   )

set(MSTL_SRC
    ${CMAKE_SOURCE_DIR}/src/3rdPartyLibraries/MSTL/PDFGeneration.C 
    ${CMAKE_SOURCE_DIR}/src/3rdPartyLibraries/MSTL/DOTGraphInterface.C
   )

set(EDG_SAGE_Connection_SRC
    ${CMAKE_SOURCE_DIR}/src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection/sage_gen_be.C
    ${CMAKE_SOURCE_DIR}/src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection/wrapperFunctionsForEDG.C
   )

set(virtualCFG_SRC
    ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/virtualCFG/virtualCFG.C 
    ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/virtualCFG/virtualBinCFG.C 
    ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/virtualCFG/cfgToDot.C 
    ${CMAKE_SOURCE_DIR}/src/frontend/SageIII/virtualCFG/memberFunctions.C
   )

set( binaryFrontend_SRC 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/RoseBin_support.cpp 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/instructionDispatch.cpp 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/x86InstructionEnum.h 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/x86InstructionProperties.h 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/x86InstructionProperties.C 
     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/x86InstructionEnumPrinter.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/armInstructionEnum.h 
     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/armInstructionEnumPrinter.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/powerpcInstructionEnum.h 
     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/powerpcInstructionEnumPrinter.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/powerpcInstructionProperties.h 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/powerpcInstructionProperties.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/readTicl.C 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/RoseBin_file.cpp 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/RoseFile.cpp 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/RoseBin_buildTree.cpp 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/RoseBin_IDAPRO_buildTree.cpp 
     ${CMAKE_SOURCE_DIR}/src/frontend/BinaryDisassembly/AST_BIN_Traversal.C
   )

set(rose_support_src 
      ${CMAKE_SOURCE_DIR}/src/roseSupport/transformationSupport.C 
      ${CMAKE_SOURCE_DIR}/src/roseSupport/optionDeclaration.C 
      ${CMAKE_SOURCE_DIR}/src/roseSupport/sourceLocationInheritedAttribute.C 
      ${CMAKE_SOURCE_DIR}/src/roseSupport/roseTranslators.C 
      ${CMAKE_SOURCE_DIR}/src/roseSupport/utility_functions.C 
      ${CMAKE_SOURCE_DIR}/src/roseSupport/memoryUsage.C
     )


####### ADDING DIRECTORIES
add_subdirectory(util)
add_subdirectory(ROSETTA)
add_subdirectory(frontend)
add_subdirectory(midend)
add_subdirectory(backend)
add_subdirectory(roseSupport)
add_subdirectory(3rdPartyLibraries)
add_subdirectory(roseIndependentSupport)
add_subdirectory(roseExtensions)




########### next target ###############
set(rose_LIB_SRCS dummyCppFileForLibrose.C   ${ROSETTA_SRC} ${sage3_SRC}
    ${rose_support_src} 
    ${binaryFrontend_SRC} 
    ${EDG_SAGE_Connection_SRC}
    ${virtualCFG_SRC}
    ${rose_util_src}
    ${MSTL_SRC}
    ${astFixup_SRC}
    ${phpFrontend_SRC}
#    ${libastMerge_SRC}
#${roseDisassemblers_SRC}
    )

add_library(rose SHARED ${rose_LIB_SRCS})
#ROSE neeeds ${ROSETTA_HEADERS} and ${ROSETTA_SRC} to be build
add_dependencies(rose ROSETTA OMPPARSER ROSE_PREPROCESSOR ) 

#Liao, link static libraries into the shared librose library
#target_link_libraries(rose ${libastMerge}) # library name are global, should not use ${}
# we need to double check if this solution will be portable on different platforms
target_link_libraries(rose libastMerge edg33 libsageInterface libastTokenStream libastHiddenTypeAndDeclarationLists
   libastVisualization roseDisassemblers roseBinaryFormats midend midend_pt midend_pa unparser 
   libastHiddenTypeAndDeclarationLists roseAsmUnparser libastPostProcessing libhpdf
 )

#target_link_libraries(rose ${KDE4_KDECORE_LIBS} m hpdf)
#AS Hack to compile ROSE
#target_link_libraries(rose ${KDE4_KDECORE_LIBS} m hpdf)
#target_link_libraries(rose ${KDE4_KDECORE_LIBS} m )

set_target_properties(rose PROPERTIES VERSION 1.0.0 SOVERSION 1)
install(TARGETS rose ${INSTALL_TARGETS_DEFAULT_ARGS})

########### next target ###############

set(testSharedRoseLib_SRCS testRoseLib.C)

add_executable(testSharedRoseLib ${testSharedRoseLib_SRCS}  )


target_link_libraries(testSharedRoseLib ${KDE4_KDECORE_LIBS} rose edg33 ${link_with_libraries} ${Boost_LIBRARIES}
    libastMerge libsageInterface libastTokenStream 
    libastHiddenTypeAndDeclarationLists libastVisualization 
# rose_support binary_frontend virtualCFG rose_util_lib astFixup  
    
    roseDisassemblers
    libsageInterface roseBinaryFormats midend unparser
    libastHiddenTypeAndDeclarationLists roseAsmUnparser libastPostProcessing
    libhpdf
    )

########### install files ###############

install(FILES  rose.h       roseInternal.h       rose_msvc.h       msvc_stdint.h DESTINATION ${INCLUDE_INSTALL_DIR})



#original Makefile.am contents follow:

#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
#
#SUBDIRS = util ROSETTA frontend midend backend roseSupport \
#          3rdPartyLibraries roseIndependentSupport roseExtensions
#
## This lists a large number of directories.  If "make install"
## is run then we only need a single directory
#INCLUDES = -Winvalid-pch $(ROSE_INCLUDES) 
#
#
## DQ (7/23/2008): New handling of EDG builds a single library instead of two.
## Binary distributions of ROSE store the binary for EDG related code in the source tree.
## JJW (8/3/2008): See src/frontend/CxxFrontend/Makefile.am.forBinaryEDG for
## more information on this process.
#libroseEDGlibraries = frontend/CxxFrontend/libroseEDG.la
#
#libroseBinaryLibraries = \
#   $(top_builddir)/src/frontend/BinaryDisassembly/libbinaryFrontend.la \
#   $(top_builddir)/src/midend/binaryAnalyses/libbinaryMidend.la \
#   $(top_builddir)/src/frontend/Disassemblers/libroseDisassemblers.la \
#   $(top_builddir)/src/frontend/ExecFormats/libroseExecFormats.la \
#   $(top_builddir)/src/backend/asmUnparser/libroseAsmUnparser.la 
#
#if ROSE_USE_SQLITE_DATABASE
#
#libroseSqlite3xConnection = \
#   $(top_builddir)/src/roseExtensions/sqlite3x/libRoseSQLite3xDatabase.la
#   OPT_SQLITE3_LDFLAGS = $(SQLITE3_LDFLAGS)
#else
#   libroseSqlite3xConnection = 
#   OPT_SQLITE3_LDFLAGS =
#endif
#
#if ROSE_WITH_ROSEQT
#libroseQtExtension = $(top_builddir)/src/roseExtensions/qtWidgets/libRoseQtWidgets.la \
#                     $(top_builddir)/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la
#else
#libroseQtExtension =
#endif
#   
## TODO: correct list!
#libroseLibraries = \
#   $(top_builddir)/src/3rdPartyLibraries/MSTL/libmstl.la \
#   $(top_builddir)/src/backend/unparser/libunparse.la \
#   $(top_builddir)/src/backend/unparser/languageIndependenceSupport/libunparseLanguageIndependenceSupport.la \
#   $(top_builddir)/src/backend/unparser/CxxCodeGeneration/libunparseCxx.la \
#   $(top_builddir)/src/backend/unparser/FortranCodeGeneration/libunparseFortran.la \
#   $(top_builddir)/src/backend/unparser/PHPCodeGeneration/libunparsePHP.la \
#   $(top_builddir)/src/backend/unparser/formatSupport/libunparseFormatSupport.la \
#   $(top_builddir)/src/frontend/SageIII/libsage3.la \
#   $(top_builddir)/src/frontend/OpenFortranParser_SAGE_Connection/libroseFortran.la \
#   $(top_builddir)/src/frontend/PHPFrontend/librosePHPFrontend.la \
#   $(libroseEDGlibraries) \
#   $(libroseBinaryLibraries) \
#   $(top_builddir)/src/midend/abstractHandle/libabstractHandle.la \
#   $(top_builddir)/src/midend/astDiagnostics/libastDiagnostics.la \
#   $(top_builddir)/src/midend/astInlining/libastinlining.la \
#   $(top_builddir)/src/midend/astOutlining/libastOutliner.la \
#   $(top_builddir)/src/midend/astProcessing/libastprocessing.la \
#   $(top_builddir)/src/midend/astQuery/libquery.la \
#   $(top_builddir)/src/midend/astRewriteMechanism/librewrite.la \
#   $(top_builddir)/src/midend/astUtil/annotation/libannotation.la \
#   $(top_builddir)/src/midend/astUtil/astInterface/libastInterface.la \
#   $(top_builddir)/src/midend/astUtil/astSupport/libastSupport.la \
#   $(top_builddir)/src/midend/astUtil/symbolicVal/libsymbolicVal.la \
#   $(top_builddir)/src/midend/loopProcessing/computation/libcomputation.la \
#   $(top_builddir)/src/midend/loopProcessing/depGraph/libdepGraph.la \
#   $(top_builddir)/src/midend/loopProcessing/depInfo/libdepInfo.la \
#   $(top_builddir)/src/midend/loopProcessing/driver/libdriver.la \
#   $(top_builddir)/src/midend/loopProcessing/outsideInterface/libarrayOptimization.la \
#   $(top_builddir)/src/midend/loopProcessing/prepostTransformation/libprepostloop.la \
#   $(top_builddir)/src/midend/loopProcessing/slicing/libslicing.la \
#   $(top_builddir)/src/midend/ompLowering/libompLowering.la \
#   $(top_builddir)/src/midend/programAnalysis/CFG/libCFG.la \
#   $(top_builddir)/src/midend/programAnalysis/CallGraphAnalysis/libCallGraph.la \
#   $(top_builddir)/src/midend/programAnalysis/OAWrap/libOAWrap.la \
#   $(top_builddir)/src/midend/programAnalysis/dataflowAnalysis/libdataflowAnalysis.la \
#   $(top_builddir)/src/midend/programAnalysis/defUseAnalysis/libDefUseAnalysis.la \
#   $(top_builddir)/src/midend/programAnalysis/graphAnalysis/libSB_GraphAnalysis.la \
#   $(top_builddir)/src/midend/programAnalysis/pointerAnal/libpointerAnal.la \
#   $(top_builddir)/src/midend/programAnalysis/staticInterproceduralSlicing/libStaticSlicing.la \
#   $(top_builddir)/src/midend/programAnalysis/valuePropagation/libvaluePropagation.la \
#   $(top_builddir)/src/midend/programTransformation/constantFolding/libconstantFolding.la \
#   $(top_builddir)/src/midend/programTransformation/finiteDifferencing/libfiniteDifferencing.la \
#   $(top_builddir)/src/midend/programTransformation/functionCallNormalization/libfunctionCallNormalization.la \
#   $(top_builddir)/src/midend/programTransformation/implicitCodeGeneration/libimplicitCodeGeneration.la \
#   $(top_builddir)/src/midend/programTransformation/partialRedundancyElimination/libpre.la \
#   $(top_builddir)/src/roseSupport/libroseSupport.la \
#   $(top_builddir)/src/util/support/libsupport.la \
#   $(top_builddir)/src/util/graphs/libgraphs.la \
#   $(top_builddir)/src/util/libroseutil.la \
#   $(libroseSqlite3xConnection) \
#   $(libroseQtExtension)
#
#
#EXTRA_DIST = extra.docs
#
## Header files that need to be included in the distribution
#include_HEADERS = \
#     rose.h \
#     roseInternal.h \
#     rose_msvc.h \
#     msvc_stdint.h
#
## DQ (9/22/2006): Because we now use libtool, the shared library is a reference to the separate
## dynamic libraries in each directory and so testMultiRoseLib is redundant with testSharedRoseLib.
## This is true only if we have configured --with-development-libraries, else we have static
## in each directory and we will link with the collection of all static libraries.
## DQ (9/8/2006): The ROSE/docs/Rose/Makefile references the testSharedRoseLib program, so maybe is should be installed?
## bin_PROGRAMS = testSharedRoseLib # testMultiRoseLib
#noinst_PROGRAMS = testSharedRoseLib 
#
#all-local: testSharedRoseLib$(EXEEXT) 
## Test if programs using ROSE can be run
#	@echo "Testing whether a simple program linked against ROSE can be run:" >&2
#	@echo "The translator will be run without any input files, and will print a warning about that; the warning is normal." >&2
#	@./testSharedRoseLib$(EXEEXT) || (echo "You cannot run a program linked against ROSE.  Please be sure that your LD_LIBRARY_PATH (Linux) or DYLD_LIBRARY_PATH (Mac OSX) contains the correct libraries (JVM, Boost, librose.so, etc.)." >&2; exit 1)
#
## PC (9/15/2006): force the use of the C++ linker
#LINK = $(CXXLINK)
#
#lib_LTLIBRARIES = librose.la
#
#if ROSE_USE_OPEN_FORTRAN_PARSER
#   JAVA_JVM_FLAGS = $(JAVA_JVM_LINK)
#endif
#
#librose_la_SOURCES = dummyCppFileForLibrose.C
#librose_la_LIBADD = $(libroseLibraries) $(JAVA_JVM_FLAGS) $(LIB_QT) -lm $(RT_LIBS) \
#                    $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
#		    $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) \
#		    $(BOOST_PROGRAM_OPTIONS_LIB) $(BOOST_REGEX_LIB) \
#		    $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB) \
#		    $(BOOST_WAVE_LIB) \
#		    -L$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/src -lhpdf \
#		    $(OPT_SQLITE3_LDFLAGS) 
## librose_la_LDFLAGS = -no-undefined --rpath $(INTEL_PIN_PATH)/intel64/lib-ext
#librose_la_LDFLAGS = -no-undefined
##librose_la_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)
#librose_la_DEPENDENCIES = $(libroseLibraries)
#
## Build list of all required libraries so that they can be built in parallel
## REQUIRED_LIBS = $(libdir)/libedg.la
#REQUIRED_LIBS = librose.la 
#
#
## DQ (3/14/2009): In this file we have to overwrite existing values in LDFLAGS (to build librose.so).
## DQ (3/14/2009): We have to clear the LDFLAGS variable...  This is not so great.
#LDFLAGS =
#
#testSharedRoseLib_SOURCES = testRoseLib.C
#testSharedRoseLib_DEPENDENCIES = $(REQUIRED_LIBS)
#testSharedRoseLib_LDADD  = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
## testSharedRoseLib_LDFLAGS  = $(LIBS_WITH_RPATH) $(ROSE_LIBS) $(ROSE_DWARF_LIBS_WITH_PATH)
## testSharedRoseLib_LDFLAGS  = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
## testSharedRoseLib_LDFLAGS  = $(ROSE_DWARF_LIBS_WITH_PATH)
#
## AM_LDFLAGS = $(ROSE_LIBS) $(ROSE_DWARF_LIBS_WITH_PATH)
## AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)
## AM_LDFLAGS =
#
#print:
#	@echo "libroseLibraries = $(libroseLibraries)"
#	@echo "LIBS_WITH_RPATH = $(LIBS_WITH_RPATH)"
#	@echo "ROSE_LIBS = $(ROSE_LIBS)"
#	@echo "ROSE_DWARF_LIBS_WITH_PATH = $(ROSE_DWARF_LIBS_WITH_PATH)"
#	@echo "AM_LDFLAGS = $(AM_LDFLAGS)"
#
## DQ (1/10/2004): remove the librose.a and libedg.a files so that distclean will work cleanly
#clean-local:
#	rm -rf *.a *.so testSharedRoseLib testMultiRoseLib $(CXX_TEMPLATE_OBJECTS) Templates.DB ii_files ti_files 
#
#
#distclean-local:
#	rm -rf *.a *.so testSharedRoseLib testMultiRoseLib Templates.DB 
#
#cleanTest:
#	rm -rf *.lo testSharedRoseLib testMultiRoseLib
#
## DQ (9/14/2006): These are required!
## Note that uninstall-hook does not work, but uninstall-local does.
#uninstall-local:
#	rm -f $(DESTDIR)$(libdir)/libedg.so
#	rm -f $(DESTDIR)$(libdir)/librose.so
##	rm -f $(libdir)/libedg.so
##	rm -f $(libdir)/librose.so
#	@echo "************************************************************"
#	@echo "**** make uninstall rule complete (terminated normally) ****"
#	@echo "************************************************************"
#
#
#rebuildPrelinker:
#	rm -f frontend/CxxFrontend/EDG_3.3/util/edg_prelink.lo
#	rm -f frontend/SageIII/Cxx_Grammar.lo
#	rm -f roseSupport/templateSupport.lo
#	$(MAKE)
#
#
#
#
#
#
#
#
