set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Ddisc_union=union")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ddisc_union=union")

include_directories(
  ${Boost_INCLUDE_DIRS}
  ${CMAKE_BINARY_DIR}/src/roseSupport
  ${CMAKE_SOURCE_DIR}/src/roseExtensions/failSafe
  ${CMAKE_SOURCE_DIR}/src/midend/programTransformation/transformationTracking
  ${CMAKE_BINARY_DIR}/src/3rdPartyLibraries/fortran-parser
  #-------------------------------------------------------------------------------
  # TOO1 (3/6/2014): Add Java includes for sageInterface.C: jni.h, jni_md.h, ecj.h
  #-------------------------------------------------------------------------------
  ${JAVA_INCLUDE_PATH}
  ${JAVA_INCLUDE_PATH2}
  ${CMAKE_SOURCE_DIR}/src/frontend/ECJ_ROSE_Connection
  # DQ (3/8/2014): Added new include path fo RoseAst.h used in sageInterface.C and sageBuilder.C files.
  ${CMAKE_SOURCE_DIR}/src/midend/astMatching
  ${CMAKE_SOURCE_DIR}/src/util
  ${CMAKE_SOURCE_DIR}/src/frontend
  ${ROSE_INCLUDES})


#Headers generated by ROSETTA
# Must keep the list up-to-date,
# Make will repeatedly run the make rule if one of them no longer exists
set(ROSETTA_HEADERS
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AST_FILE_IO.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AstQueryMemoryPool.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarMemoryPoolSupport.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.h)

#source files generated by ROSETTA
set(ROSETTA_SRC
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCopyMemberFunctions.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarGetChildIndex.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarMemoryPoolSupport.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewAndDeleteOperators.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewConstructors.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarProcessDataMemberReferenceToPointers.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnClassHierarchySubTree.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnDataMemberPointers.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarRTI.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTraverseMemoryPool.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalSuccessorContainer.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarVariantEnumNames.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AST_FILE_IO.C)

#Tell cmake that these files are generated by ROSETTA and will only be available at compile time
SET_SOURCE_FILES_PROPERTIES(
  ${ROSETTA_SRC}
  ${ROSETTA_HEADERS}
  PROPERTIES GENERATED 1)

if(MSVC)
  set_source_files_properties(
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
    PROPERTIES COMPILE_FLAGS /bigobj)
endif()

## Tell cmake that this file is generated (see scripts/publicConfiguration.pl)
#SET_SOURCE_FILES_PROPERTIES(
#     ${CMAKE_BINARY_DIR}/rosePublicConfig.h
#     PROPERTIES GENERATED 1
#     )


####### ADDING DIRECTORIES
add_subdirectory(util)
add_subdirectory(ROSETTA)
add_subdirectory(roseSupport)
add_subdirectory(3rdPartyLibraries)
add_subdirectory(roseIndependentSupport)

add_definitions(-DROSE_DLL_EXPORTS)

add_subdirectory(roseExtensions)
add_subdirectory(frontend)
add_subdirectory(midend)
add_subdirectory(backend)


########### next target ###############
if(enable-binary-analysis)
  set(rose_LIB_SRCS
    dummyCppFileForLibrose.C
    ${ROSETTA_SRC}
    $<TARGET_OBJECTS:util_main>
    $<TARGET_OBJECTS:util_commandlineProcessing>
    $<TARGET_OBJECTS:util_sawyer>
    $<TARGET_OBJECTS:util_stringSupport>
    $<TARGET_OBJECTS:util_support>
    $<TARGET_OBJECTS:util_graphs>
    $<TARGET_OBJECTS:unparser>
    $<TARGET_OBJECTS:sage3>
    $<TARGET_OBJECTS:virtualCFG>
    $<TARGET_OBJECTS:astFromString>
    $<TARGET_OBJECTS:roseSupport>
    $<TARGET_OBJECTS:rosePartitioner2>
    $<TARGET_OBJECTS:roseDisassemblers>
    $<TARGET_OBJECTS:roseBinaryFormats>
    $<TARGET_OBJECTS:roseBinaryLoader>
    $<TARGET_OBJECTS:roseAsmUnparser>
    $<TARGET_OBJECTS:astMerge>
    $<TARGET_OBJECTS:astFixup>
    $<TARGET_OBJECTS:midend>
    $<TARGET_OBJECTS:abstractHandle>
    $<TARGET_OBJECTS:abstractLayer>
    $<TARGET_OBJECTS:astDiagnostics>
    $<TARGET_OBJECTS:astProcessing>
    $<TARGET_OBJECTS:astMatching>
    $<TARGET_OBJECTS:midend_util>
    $<TARGET_OBJECTS:midend_binary>
    $<TARGET_OBJECTS:midend_pt>
    $<TARGET_OBJECTS:sageInterface>
    $<TARGET_OBJECTS:astTokenStream>
    $<TARGET_OBJECTS:astHiddenTypeAndDeclarationLists>
    $<TARGET_OBJECTS:astVisualization>
    $<TARGET_OBJECTS:includeDirectivesProcessing>
    $<TARGET_OBJECTS:astPostProcessing>
    $<TARGET_OBJECTS:failsafe>
    $<TARGET_OBJECTS:trans_tracking>
    $<TARGET_OBJECTS:astRewriteMechanism>
    $<TARGET_OBJECTS:mstl>)
else()
  set(rose_LIB_SRCS
    dummyCppFileForLibrose.C
    ${ROSETTA_SRC}
    $<TARGET_OBJECTS:util_main>
    $<TARGET_OBJECTS:util_commandlineProcessing>
    $<TARGET_OBJECTS:util_sawyer>
    $<TARGET_OBJECTS:util_stringSupport>
    $<TARGET_OBJECTS:util_support>
    $<TARGET_OBJECTS:util_graphs>
    $<TARGET_OBJECTS:unparser>
    $<TARGET_OBJECTS:sage3>
    $<TARGET_OBJECTS:virtualCFG>
    $<TARGET_OBJECTS:astFromString>
    $<TARGET_OBJECTS:roseSupport>
    $<TARGET_OBJECTS:rosePartitioner2>
    $<TARGET_OBJECTS:roseDisassemblers>
    $<TARGET_OBJECTS:roseBinaryFormats>
    $<TARGET_OBJECTS:roseBinaryLoader>
    $<TARGET_OBJECTS:roseAsmUnparser>
    $<TARGET_OBJECTS:astMerge>
    $<TARGET_OBJECTS:astFixup>
    $<TARGET_OBJECTS:midend>
    $<TARGET_OBJECTS:abstractHandle>
    $<TARGET_OBJECTS:abstractLayer>
    $<TARGET_OBJECTS:astDiagnostics>
    $<TARGET_OBJECTS:astProcessing>
    $<TARGET_OBJECTS:astMatching>
    $<TARGET_OBJECTS:midend_util>
    $<TARGET_OBJECTS:midend_binary>
    $<TARGET_OBJECTS:midend_pt>
    $<TARGET_OBJECTS:sageInterface>
    $<TARGET_OBJECTS:astTokenStream>
    $<TARGET_OBJECTS:astHiddenTypeAndDeclarationLists>
    $<TARGET_OBJECTS:astVisualization>
    $<TARGET_OBJECTS:includeDirectivesProcessing>
    $<TARGET_OBJECTS:astPostProcessing>
    $<TARGET_OBJECTS:failsafe>
    $<TARGET_OBJECTS:trans_tracking>
    $<TARGET_OBJECTS:astRewriteMechanism>
    $<TARGET_OBJECTS:mstl>)
endif()

if(enable-java)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:roseJava>)
endif()

if (enable-php)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:phpFrontend>)
endif()

if(NOT enable-internalFrontendDevelopment)
  list(APPEND rose_LIB_SRCS
    $<TARGET_OBJECTS:midend_pa>
    $<TARGET_OBJECTS:midend_loopproc>)
endif()

if(enable-rosehpct)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:roseExtensions>)
endif()
find_package(Perl REQUIRED)

########################################################################################################################
### The rose_config.h file generated during the configuration process contains CPP symbols that indicate what features
### are available during compilation.  This file cannot be included into end-user source code because it pollutes the
### global namespace.  Therefore, we create a copy called rosePublicConfig.h containing only certain symbols and whose
### names are modified by prepending "ROSE_".
add_custom_command(
  OUTPUT ${CMAKE_BINARY_DIR}/rosePublicConfig.h
  COMMAND ${PERL_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/publicConfiguration.pl
    <${CMAKE_BINARY_DIR}/rose_config.h >${CMAKE_BINARY_DIR}/rosePublicConfig.h
  DEPENDS ${CMAKE_BINARY_DIR}/rose_config.h)

add_custom_target(
  generate_rosePublicConfig
  DEPENDS ${CMAKE_BINARY_DIR}/rosePublicConfig.h)

################################################################################

add_library(ROSE_DLL SHARED ${rose_LIB_SRCS} )
add_dependencies(ROSE_DLL roseUtil)
set_target_properties(ROSE_DLL PROPERTIES OUTPUT_NAME "rose")
target_link_libraries(ROSE_DLL ${edg_lib} ${link_with_libraries})

if(enable-z3)
  target_link_libraries(ROSE_DLL ${Z3_LIBRARIES})
endif()

# Generate the list of libraries that ROSE needs to link against.
# tps : independent Components : ROSE, libhpdf
if(enable-poet)
  set(LINK_FILES
    poet
    # PHP_FRONTEND_LIB
    libhpdf
    # libdl
    ${CMAKE_DL_LIBS}
    libX10Traversal)
else()
  set(LINK_FILES
    # PHP_FRONTEND_LIB
    libhpdf
    # libdl
    ${CMAKE_DL_LIBS}
    libX10Traversal)
endif()
#add_executable(bill bill.C)
#target_link_libraries(bill roseUtil)

if(NOT BINARY_EDG)
  add_definitions(-DUSE_FAKE_EDG)
endif()

if(enable-fortran)
  list(APPEND LINK_FILES roseFortran)
endif()

if (enable-java)
  list(APPEND LINK_FILES ${JAVA_JVM_LIBRARY})
endif()

if(enable-python)
  list(APPEND LINK_FILES unparsePython rosePythonFrontend)
endif()

if(enable-rosehpct)
  list(APPEND LINK_FILES ${LIBXML2_LIBRARIES})
endif()

if(enable-smaller-generated-files )
  set(ROSE_TARGET_LINK libgeneratedIR ${LINK_FILES})
else()
  # tps (12/14/2009) : Created a variable for the dependent libraries.
  # Make sure that order is correct.
  set(ROSE_TARGET_LINK ${LINK_FILES})
endif()

if (WIN32)
  target_link_libraries(ROSE_DLL ${ROSE_TARGET_LINK} shlwapi.lib Ws2_32.lib)
else ()
  target_link_libraries(ROSE_DLL ${ROSE_TARGET_LINK} )
endif ()

set_target_properties(ROSE_DLL PROPERTIES
  VERSION 1.0.0
  SOVERSION 1
  DEFINE_SYMBOL ROSE_DLL_EXPORTS)

add_dependencies(ROSE_DLL
  OMPPARSER ROSE_PREPROCESSOR ${edg_lib} libpdf
  generate_rosePublicConfig)

if(enable-poet)
  add_dependencies(ROSE_DLL poet)
endif()

########### next targets ###############
remove_definitions(-DROSE_DLL_EXPORTS)
add_executable(testSharedRoseLib testRoseLib.C)
target_link_libraries(testSharedRoseLib
  ROSE_DLL ${edg_lib} ${link_with_libraries})

########### install files ###############
install(TARGETS ROSE_DLL DESTINATION ${ROSE_LIB_DIR_NAME})
install(
  FILES
    rose.h roseInternal.h rose_msvc.h msvc_stdint.h
    ${CMAKE_BINARY_DIR}/rosePublicConfig.h
  DESTINATION ${INCLUDE_INSTALL_DIR})
  
##### generate rose-config and its .cfg #####
add_definitions(-DLIBDIR="${CMAKE_INSTALL_PREFIX}/${ROSE_LIB_DIR_NAME}") #LIB_INSTALL_DIR ?
add_executable(rose-config rose-config.C)
target_link_libraries(rose-config ROSE_DLL ${link_with_libraries} ${edg_lib})
install(TARGETS rose-config DESTINATION bin)

file(REMOVE ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg)
file(WRITE  ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "# Things that the 'rose-config' tool can report\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CC           = ${BACKEND_C_COMPILER_NAME_WITHOUT_PATH}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CCPATH       = ${CMAKE_C_COMPILER}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CXX          = ${BACKEND_CXX_COMPILER_NAME_WITHOUT_PATH}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CXX_PATH     = ${CMAKE_CXX_COMPILER}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CPPFLAGS     = unknown\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CFLAGS       = ${CMAKE_C_FLAGS}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CXXFLAGS     = ${CMAKE_CXX_FLAGS}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_LDFLAGS      = ${CMAKE_LINKER_FLAGS}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_LIBDIRS      = ${CMAKE_INSTALL_PREFIX}/${ROSE_LIB_DIR_NAME}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_PREFIX       = ${CMAKE_INSTALL_PREFIX}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "# Additional items useful to include in Makefiles\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_RPATHS       = ${CMAKE_INSTALL_RPATH}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_LINK_RPATHS  = unknown\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_VERSION      = ${ROSE_PACKAGE_VERSION}\n")
install(FILES ${CMAKE_BINARY_DIR}/src/rose-config.cfg DESTINATION ${ROSE_LIB_DIR_NAME})
