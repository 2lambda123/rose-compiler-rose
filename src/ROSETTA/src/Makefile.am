include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs

INCLUDES = $(ROSE_INCLUDES)

EXTRA_DIST = \
   ROSETTA_macros.h  grammar.h grammarString.h terminal.h

# Define the template repository path used in the autoconf
# subsitution for various C++ template control variables.
CXX_TEMPLATE_REPOSITORY_PATH = .

CXX_GRAMMAR_DIR   = $(top_builddir)/src/frontend/SageIII

CXX_PREPROC_CODES = $(CXX_GRAMMAR_DIR)/Cxx_Grammar.h

#                   $(CXX_GRAMMAR_DIR)/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C

BUILT_SOURCES = $(CXX_PREPROC_CODES)

# The generation of the ROSE Grammars depend upon source code from these files
GRAMMAR_SOURCE_FILES = \
     ../Grammar/Statement.code \
     ../Grammar/grammarClassDefinitionMacros.macro \
     ../Grammar/grammarVariantFunctionDefinitionMacros.macro \
     ../Grammar/Common.code \
     ../Grammar/Support.code \
     ../Grammar/grammarConstructorDefinitionMacros.macro \
     ../Grammar/node.macro \
     ../Grammar/Cxx_GlobalDeclarations.macro \
     ../Grammar/Symbol.code \
     ../Grammar/grammarDestructorDefinitionMacros.macro \
     ../Grammar/parserCode.macro \
     ../Grammar/Cxx_Support_Header.macro \
     ../Grammar/Type.code \
     ../Grammar/grammarIsClassNameFunctionDefinitionMacros.macro \
     ../Grammar/parserPrototype.macro \
     ../Grammar/Expression.code \
     ../Grammar/copyMemberFunction.macro \
     ../Grammar/grammarMainClassDeclatationMacros.macro \
     ../Grammar/parserSourceCode.macro \
     ../Grammar/LocatedNode.code \
     ../Grammar/dataMemberAccessFunctions.macro \
     ../Grammar/grammarMainClassParseFunctionSourceCode.macro \
     ../Grammar/Node.code \
     ../Grammar/BinaryInstruction.code \
     ../Grammar/grammarClassDeclarationMacros.macro \
     ../Grammar/grammarMainClassSourceCodeMacros.macro \
     ../Grammar/grammarNewDeleteOperatorMacros.macro \
     ../Grammar/grammarTraverseMemoryPool.macro \
     ../Grammar/grammarCheckingIfDataMembersAreInMemoryPool.macro \
     ../Grammar/grammarStorageClassDeclatationMacros.macro \
     ../Grammar/grammarStorageClassDefinitionMacros.macro \
     ../Grammar/grammarAST_FileIoHeader.code \
     ../Grammar/grammarAST_FileIoSource.code  \
     ../Grammar/grammarSourceOfIRNodesAstFileIOSupport.macro \
     ../Grammar/grammarStaticDataManagingClassHeader.macro \
     ../Grammar/grammarStaticDataManagingClassStorageClassHeader.macro \
     ../Grammar/grammarReturnDataMemberPointers.macro \
     ../Grammar/grammarReturnDataMemberReferenceToPointers.macro \
     ../Grammar/grammarGetChildIndex.macro \
     ../astNodeList

# DQ (4/6/2006): Removed from Jochen's new version
# ../Grammar/grammarConstructorOfStorageClass.macro



# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes
VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --suppressions=$(top_srcdir)/scripts/rose-suppressions-for-valgrind
# VALGRIND = valgrind $(VALGRIND_OPTIONS)
VALGRIND =

# Build the grammar for generating the C++ preprocessor.
$(CXX_PREPROC_CODES): CxxGrammarMetaProgram$(EXEEXT) $(GRAMMAR_SOURCE_FILES)
#  Build a link so that the executable can find the *.code file in ../Grammar
#	rm -f Grammar
#	ln -s $(top_srcdir)/src/ROSETTA/Grammar Grammar
	$(VALGRIND) ./CxxGrammarMetaProgram
#	Files generated by ROSETTA must now be moved to $(CXX_GRAMMAR_DIR)
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_Grammar.h
	mv Cxx_Grammar.h $(CXX_GRAMMAR_DIR)/Cxx_Grammar.h
	rm -f $(CXX_GRAMMAR_DIR)/AstQueryMemoryPool.h
	mv AstQueryMemoryPool.h $(CXX_GRAMMAR_DIR)/AstQueryMemoryPool.h
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarReturnClassHierarchySubTree.C
	mv Cxx_GrammarReturnClassHierarchySubTree.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarReturnClassHierarchySubTree.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_Grammar.C
	mv Cxx_Grammar.C $(CXX_GRAMMAR_DIR)/Cxx_Grammar.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarTreeTraversal.C
	mv Cxx_GrammarTreeTraversalSuccessorContainer.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarTreeTraversalSuccessorContainer.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarRTI.C
	mv Cxx_GrammarRTI.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarRTI.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarTreeTraversalAccessEnums.h
	mv Cxx_GrammarTreeTraversalAccessEnums.h $(CXX_GRAMMAR_DIR)/Cxx_GrammarTreeTraversalAccessEnums.h
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarVariantEnumNames.C
	mv Cxx_GrammarVariantEnumNames.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarVariantEnumNames.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarNewAndDeleteOperators.C
	mv Cxx_GrammarNewAndDeleteOperators.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarNewAndDeleteOperators.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarCopyMemberFunctions.C
	mv Cxx_GrammarCopyMemberFunctions.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarCopyMemberFunctions.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarTraverseMemoryPool.C
	mv Cxx_GrammarTraverseMemoryPool.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarTraverseMemoryPool.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C
	mv Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C
	rm -f $(CXX_GRAMMAR_DIR)/astFileIO/AST_FILE_IO.h
#  DQ (10/18/2007): Increase available parallelism by putting large files together so that make -jn is more efficient.
#	mv AST_FILE_IO.h $(CXX_GRAMMAR_DIR)/astFileIO/AST_FILE_IO.h
	mv AST_FILE_IO.h $(CXX_GRAMMAR_DIR)/AST_FILE_IO.h
	rm -f $(CXX_GRAMMAR_DIR)/astFileIO/AST_FILE_IO.C
#  DQ (10/18/2007): Increase available parallelism by putting large files together so that make -jn is more efficient.
#	mv AST_FILE_IO.C $(CXX_GRAMMAR_DIR)/astFileIO/AST_FILE_IO.C
	mv AST_FILE_IO.C $(CXX_GRAMMAR_DIR)/AST_FILE_IO.C
	rm -f $(CXX_GRAMMAR_DIR)/astFileIO/StorageClasses.h
#  DQ (10/18/2007): Increase available parallelism by putting large files together so that make -jn is more efficient.
#	mv StorageClasses.h $(CXX_GRAMMAR_DIR)/astFileIO/StorageClasses.h
	mv StorageClasses.h $(CXX_GRAMMAR_DIR)/StorageClasses.h
	rm -f $(CXX_GRAMMAR_DIR)/astFileIO/StorageClasses.C
#  DQ (10/18/2007): Increase available parallelism by putting large files together so that make -jn is more efficient.
#	mv StorageClasses.C $(CXX_GRAMMAR_DIR)/astFileIO/StorageClasses.C
	mv StorageClasses.C $(CXX_GRAMMAR_DIR)/StorageClasses.C
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarReturnDataMemberPointers.C
	mv Cxx_GrammarReturnDataMemberPointers.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarReturnDataMemberPointers.C
#	DQ (4/30/2006): Added support for function to return references to IR nodes pointers
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarReturnDataMemberReferenceToPointers.C
	mv Cxx_GrammarReturnDataMemberReferenceToPointers.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarReturnDataMemberReferenceToPointers.C
#	DQ (4/6/2006): Added from Jochen's multifile I/O support
	rm -f $(CXX_GRAMMAR_DIR)/astFileIO/SourcesOfIRNodesAstFileIOSupport.C
	mv SourcesOfIRNodesAstFileIOSupport.C $(CXX_GRAMMAR_DIR)/astFileIO/SourcesOfIRNodesAstFileIOSupport.C
	rm -f $(CXX_GRAMMAR_DIR)/astFileIO/AstSpecificDataManagingClass.h
	mv AstSpecificDataManagingClass.h $(CXX_GRAMMAR_DIR)/astFileIO/AstSpecificDataManagingClass.h
#	DQ (11/7/2006): Added support for new forms of constructors (without source position information)
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarNewConstructors.C
	mv Cxx_GrammarNewConstructors.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarNewConstructors.C
#	DQ (3/8/2007): Added support for getChildIndex function
	rm -f $(CXX_GRAMMAR_DIR)/Cxx_GrammarGetChildIndex.C
	mv Cxx_GrammarGetChildIndex.C $(CXX_GRAMMAR_DIR)/Cxx_GrammarGetChildIndex.C

noinst_PROGRAMS = CxxGrammarMetaProgram
CxxGrammarMetaProgram_SOURCES = \
   CxxGrammarMetaProgram.C \
   grammar.C \
   grammarString.C \
   terminal.C \
   type.C \
   symbol.C \
   expression.C \
   statement.C \
   support.C \
   binaryInstruction.C \
   storageSize.C \
   visitorSupport.C \
   poolBasedTraversal.C \
   node.C \
   buildAstFileIO.C \
   buildStorageClasses.C \
   buildConstructorsWithoutSourcePositionInformation.C \
   outputClassesAndFields.C

# buildConstructorsWithoutSourcePositionInformation.o: buildConstructorsWithoutSourcePositionInformation.C

CxxGrammarMetaProgram_LDADD = $(top_builddir)/src/util/libroseutil.la

# DQ (9/11/2008):
# The rose_paths.c is built in ROSE/src/util and this dependence causes
# ROSE to rebuild a lot of code each time configure is rerun. Let's see
# if this can be make a little more tolerable for those without larger
# computers working on ROSE (e.g. students).
# CxxGrammarMetaProgram_DEPENDENCIES = $(CxxGrammarMetaProgram_LDADD)
# CxxGrammarMetaProgram_DEPENDENCIES = 
# CxxGrammarMetaProgram_DEPENDENCIES = $(CxxGrammarMetaProgram_SOURCES)


# DQ (7/8/2005): Avoid building Sage III when util changes!
# $(top_builddir)/util/libroseutil.so:
#	cd $(top_builddir)/util; $(MAKE)


# Force recompilation of source files if any of the header files 
# are changed (does not work if *.o files are not present).
$(librosetta_a_OBJECTS): ROSETTA_macros.h grammar.h grammarString.h terminal.h

clean-local:
	rm -rf $(CXX_TEMPLATE_OBJECTS) Templates.DB ii_files ti_files cxx_templates Cxx_Grammar* grammar.dot translationSupport.code

distclean-local:
	rm -rf Cxx_Grammar.h Cxx_Grammar.C Cxx_GrammarTreeTraversal.C Cxx_GrammarTreeTraversalClass.h \
          Cxx_GrammarTreeTraversalClass.C
	rm -rf grammar.tex grammar.dot
















