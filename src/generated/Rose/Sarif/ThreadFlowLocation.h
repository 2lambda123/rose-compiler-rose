//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                         THIS FILE IS MACHINE GENERATED  --  DO NOT MODIFY
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This file was generated by Rosebud
//     ./rosebud --no-locations --backend=sawyer --serializer=cereal
//         --sawyer-generated=/home/matzke/rose-wip/rose/src/generated/Rose/Sarif --sawyer-header-prefix=rose/Rose/Sarif
//
// See documentation for the ::Rosebud namespace for information about the input language and how to best run
// the commands to (re)generate this file. See `rosebud --help` for documentation about command-line switches.
//
// The ::Rosebud namespace might be documented at one of these places:
//     https://rpm.is/rose
//     http://rosecompiler.org/ROSE_HTML_Reference/index.html
//
#ifndef ROSE_Sarif_ThreadFlowLocation_H
#define ROSE_Sarif_ThreadFlowLocation_H

#include <rosePublicConfig.h>
#ifdef ROSE_HAVE_CEREAL
#include <cereal/access.hpp>
#include <cereal/cereal.hpp>
#endif

#include <featureTests.h>
#ifdef ROSE_ENABLE_SARIF
#include <Rose/Sarif/Node.h>

#ifdef ROSE_Sarif_ThreadFlowLocation_IMPL
#include <Rose/Sarif/Location.h>
#endif

namespace Rose {
namespace Sarif {

/** A location visited by an analysis tool.
 *
 *  This object represents a location visited by an analysis tool in the course of simulating or monitoring the execution of a
 *  program.
 *
 *  Example:
 *
 *  @snippet{trimleft} sarifUnitTests.C sarif_flow */
class ThreadFlowLocation: public Node {
public:
    // Automatically generated; do not modify!
    /** Shared-ownership pointer to @ref ThreadFlowLocation.
     *
     *  @{ */
    using Ptr = ThreadFlowLocationPtr;
    using ConstPtr = ThreadFlowLocationConstPtr;
    /** @} */

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Properties
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:

    /** Property: Message.
     *
     *  The message is optional, but a non-empty message must be present if the location is null when this object is emitted. 
     *  
     *  @{ */
public:
    // Automatically generated; do not modify!
    std::string const& message() const;
public:
    // Automatically generated; do not modify!
    void message(std::string const&);
private:
    // Automatically generated; do not modify!
    std::string message_P8759_;
    /** @} */

public:

    /** Optional location.
     *
     *  Some analyses are not able to provide a location for every step in the code flow. If there is no location, then a @ref
     *  message should be present. 
     *  
     *  @{ */
public:
    // Automatically generated; do not modify!
    Edge<Location> const& location() const;
public:
    // Automatically generated; do not modify!
    Edge<Location>& location();
public:
    // Automatically generated; do not modify!
    void location(LocationPtr const&);
private:
    // Automatically generated; do not modify!
    Edge<Location> location_P9311_;
    /** @} */

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
    /** Allocating constructor.
     *
     *  Although the constructor accepts an empty message and/or null location, a thread flow location should have a non-empty
     *  message, a non-null location, or both at the time it is emitted.
     *
     * @{ */
    static Ptr instance(const std::string &message);
    static Ptr instance(const LocationPtr&);
    static Ptr instance(const std::string &message, const LocationPtr&);
    /** @} */

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Overrides
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
    bool emit(std::ostream&) override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Generated constructors, etc.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:
    /** Default constructor. */
    ThreadFlowLocation();

public:
    virtual ~ThreadFlowLocation();

#ifdef ROSE_HAVE_CEREAL
private:
    friend class cereal::access;

    // Automatically generated; do not modify!
    template<class Archive>
    void CEREAL_SAVE_FUNCTION_NAME(Archive &archive) const {
        archive(cereal::base_class<Node>(this));
        archive(cereal::make_nvp("message", message_P8759_));
        archive(cereal::make_nvp("location", location_P9311_));
    }

    // Automatically generated; do not modify!
    template<class Archive>
    void CEREAL_LOAD_FUNCTION_NAME(Archive &archive) {
        archive(cereal::base_class<Node>(this));
        archive(cereal::make_nvp("message", message_P8759_));
        archive(cereal::make_nvp("location", location_P9311_));
    }
#endif // ROSE_HAVE_CEREAL
};

} // namespace
} // namespace
#endif

#endif // include once
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                         THIS FILE IS MACHINE GENERATED  --  DO NOT MODIFY
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
