#!/bin/bash
set -e
arg0="${0##*/}"
dir0="${0%/*}"
[ "$dir0" = "${dir0#/}" ] && dir0="$(pwd)/$dir0"

DATABASE="$ROSE_MATRIX_DATABASE"

########################################################################################################################
help() {
    echo "usage: $arg0 [SWITCHES] SLAVE_NAME"
    echo
    echo "Runs a portability testing slave in a Docker container."
    echo "    --database=DATABASE"
    echo "          Specifies the database URL. This is required if the ROSE_MATRIX_DATABASE environment"
    echo "          variable is empty."
}

########################################################################################################################
# Die with an error message
die() {
    echo "$arg0:" "error:" "$@" >&2
    exit 1
}

########################################################################################################################
# Kludge because "docker image ls" doesnt exit with failure if the image doesn't exist. Furthermore, the image name
# doesn't necessarily appear in the output the same way as we specified it (e.g., "name:tag" will be split into two
# words in the output.
image-exists() {
    local name="$1"
    docker image ls "$name" |grep -vq REPOSITORY
    return ${PIPESTATUS[1]}
}

########################################################################################################################
# Create the image for running the slave
create-image() {
    local name="$1"
    tempdir="${TMPDIR:-/tmp}/image-$RANDOM$RANDOM"
    mkdir "$tempdir"
    trap "rm -rf '$tempdir'" EXIT
    cat >"$tempdir/Dockerfile" <<'EOF'
from ubuntu:22.04

# sudo causes problems in Docker containers, so just run without it.
run echo '#!/bin/bash' >/bin/sudo; echo 'exec "$@"' >> /bin/sudo; chmod 755 /bin/sudo

# Install docker
run env DEBIAN_FRONTEND=noninteractive apt-get update
run env DEBIAN_FRONTEND=noninteractive apt-get -y install ca-certificates curl gnupg lsb-release
run mkdir -p /etc/apt/keyrings
run curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
run echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |\
    tee /etc/apt/sources.list.d/docker.list > /dev/null
run env DEBIAN_FRONTEND=noninteractive apt-get update
run env DEBIAN_FRONTEND=noninteractive apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Install top level portability testing scripts
# FIXME: Once debugging is finished, change the script URLs to something more stable
run env DEBIAN_FRONTEND=noninteractive apt-get -y install git wget sudo
run : serial 2022-08-18b
run cd; wget -O rose-matrix-slave-run     https://raw.githubusercontent.com/matzke1/rose/matzke/rose-dev/projects/MatrixTesting/scripts/rose-matrix-slave-run
run cd; wget -O rose-matrix-slave-babysit https://raw.githubusercontent.com/matzke1/rose/matzke/rose-dev/projects/MatrixTesting/scripts/rose-matrix-slave-babysit
run cd; wget -O rose-matrix-slave-clean   https://raw.githubusercontent.com/matzke1/rose/matzke/rose-dev/projects/MatrixTesting/scripts/rose-matrix-slave-clean
run cd; chmod 755 rose-matrix-slave-run rose-matrix-slave-babysit rose-matrix-slave-clean

# Set up the matrix testing
cmd export SPOCK_HOSTNAME=container; cd; ./rose-matrix-slave-run setup && ./rose-matrix-slave-babysit ./rose-matrix-slave-run $RUN_ARGS
EOF

    (cd "$tempdir" && docker image build -t "$name" .)
    trap "" EXIT
    rm -rf "$tempdir"
}

########################################################################################################################

# Parse and check command-line
while [ "$#" -gt 0 ]; do
    case "$1" in
	-h|--help)
	    help
	    exit 0
	    ;;
	--database=*)
	    DATABASE="${1#--database=}"
	    shift
	    ;;
	-*)
	    die "unrecognized switch: \"$1\""
	    ;;
	*)
	    break
	    ;;
    esac
done
[ -n "$DATABASE" ] || die "no database URL specified"
[ "$#" -eq 1 ] || die "incorrect usage; see --help"
SLAVE_NAME="$1"

# Create working directories
VAR_DIR="var/rose-portability-testing"
SLAVE_VAR_DIR="$VAR_DIR/$SLAVE_NAME"
[ -d "$SLAVE_VAR_DIR" ] && die "directory \"$SLAVE_VAR_DIR\" already exists; is $SLAVE_NAME already running?"
mkdir -p "$SLAVE_VAR_DIR"

# Create docker slave image
IMAGE="matrix-testing:u22.04"
image-exists "$IMAGE" || create-image "$IMAGE"

# Run the image
set -x
exec docker run -it --privileged --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v "$(pwd)/${VAR_DIR}":/var/rose-portability-testing \
        -e ROSE_MATRIX_DATABASE="$DATABASE" \
        -e MATRIX_REPOSITORY=https://github.com/matzke1/rose \
        -e MATRIX_COMMITTISH=matzke/rose-dev \
        -e MATRIX_HOST_ROOT="$(pwd)" \
        -e MATRIX_ROOT="/var/rose-portability-testing/$SLAVE_NAME" \
	-e RUN_ARGS="--slave=$SLAVE_NAME" \
        "$IMAGE"
