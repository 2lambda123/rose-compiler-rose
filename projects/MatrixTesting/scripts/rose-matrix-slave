#!/bin/bash
set -e
arg0="${0##*/}"
date=$(date '+%Y%m%d')

# Directory where portability tools are (or will be) installed.
MATRIX_ROOT="$HOME/var/rose-portability-testing"

# Minimum amount of free disk space in GiB. At the end of each test, this script deletes as many cached software
# dependencies as necessary to reach this amount of free space.
MIN_FREE_SPACE=30

# If non-empty, prepare to run tests but do not run any tests.
SETUP=

# If non-empty, remove source repositories and build directories when possible. This reduces total disk usage
# but requires more time to download and build.
SMALL_FOOTPRINT=

help() {
    echo "usage: $arg0 [SWITCHES] [setup]"
    echo
    echo "    --root=DIRECTORY"
    echo "        This is the directory in which this script does all its work, which"
    echo "        includes creating and removing files and subdirectories. The default is"
    echo "        $MATRIX_ROOT"
    echo
    echo "    --aggressive-cleanup"
    echo "        Remove reproducible things when possible so we don't use as much disk"
    echo "        space. The tradeoff is we use more CPU time."
    echo
    echo "  Sharing downloads"
    echo "    You can prevent the slave from re-downloading all the RMC/Spock packages it"
    echo "    needs by linking the slave's download area to your user RMC/Spock download"
    echo "    area.  Do this by creating a symbolic link \"spock/var/downloads\" under the"
    echo "    portability testing root directory (see --root) that points to your user"
    echo "    download area, usually ~/.spock/var/downloads."
    ######--------------------------------------------------------------------------------
}

die() {
    echo "$arg0:" "$@" >&2
    exit 1
}

matrix-parse-command-line() {
    while [ "$#" -gt 0 ]; do
	case "$1" in
	    --help|-h)
		help
		exit 0
		;;
	    --root=*)
		MATRIX_ROOT="${1#--root=}"
		shift
		;;
	    --aggressive-cleanup)
		SMALL_FOOTPRINT=yes
		shift
		;;
	    -*)
		die "error: unrecognized switch: $1"
		;;
	    setup)
		SETUP=yes
		shift
		break
		;;
	    *)
		die "error: incorrect usage; see --help"
		;;
	esac
    done

    [ "$#" -eq 0 ] || die "error: incorrect usage; see --help"
}

#------------------------------------------------------------------------------------------------------------------------
# Get configuration, store it in the matrix-config file, and update shell variables. If a non-empty argument
# is given and it's not possible to get the configuration, create an empty file and reset some important shell variables.
matrix-get-slave-configuration() {
    local failure_okay="$1"

    echo
    echo
    echo "================================================================================"
    echo "== Obtaining current slave configuration from database server."
    [ -n "$failure_okay" ] && echo "== Failure is allowed this time."
    echo "================================================================================"
    echo
    if [ -n "$failure_okay" ]; then
	[ -r matrix-config ] && . matrix-config
	rose-matrix-slave-config >matrix-config || true
    else
	rose-matrix-slave-config >matrix-config
    fi
    cat -n matrix-config

    . matrix-config
    : ${MATRIX_REPOSITORY:='https://github.com/rose-compiler/rose'}
    : ${MATRIX_COMMITTISH:=develop}
}

#------------------------------------------------------------------------------------------------------------------------
# Install the ROSE Meta Config system which is how this script and its Docker containers all manage to install many
# versions of software dependencies simultaneously.
matrix-install-rmc-spock() {
    echo
    echo
    echo "================================================================================"
    echo "== Installing ROSE Meta Config (RMC/Spock)"
    echo "================================================================================"
    echo

    local spock_repo="https://github.com/matzke1/rmc-spock"
    local needs_update=

    echo "Testing whether RMC/Spock is operational..."
    if ! spock-ls --version >/dev/null; then
	needs_update=yes
    elif ! spock-shell --with default-c++ c++ --version; then
	needs_update=yes
    elif [ ! -d rmc-spock ]; then
	needs_update=yes
    else
	pushd rmc-spock >/dev/null
	git fetch "$spock_repo"
	local latest_version="$(git rev-parse FETCH_HEAD)"
	local current_version="$(git rev-parse HEAD)"
	if [ "$latest_version" != "$current_version" ]; then
	    git reset --hard FETCH_HEAD
	    git clean -dfx
	    needs_update=yes
	fi
	popd >/dev/null
    fi

    if [ -n "$needs_update" ]; then
	echo
	echo "Update is necessary..."
	echo
	
	rm -rf rose-installed # since about to blow away libraries used by ROSE
	rm -rf rmc-spock
	git clone "$spock_repo" rmc-spock
	(cd rmc-spock && ./scripts/bootstrap.sh --prefix="$SPOCK_ROOT")
	rm -rf rmc-spock/_build # clean up, but leave source code for next call to this function
    else
	echo
	echo "RMC/Spock is up to date and appears to work"
    fi
}

#------------------------------------------------------------------------------------------------------------------------
# In case we were last interrupted during the middle of building a software dependency, remove all failed build attempts.
# If we don't do this, then a subsequent attempt to build the same software will assume that it can't be done and will
# immediately fail.
matrix-clean-failed-dependencies() {
    rm -vf spock/var/installed/matrix-slave/*-build-log.txt
}

# If non-empty, then this very script that's running needs to be updated.
THIS_SCRIPT_OUT_OF_DATE=


#------------------------------------------------------------------------------------------------------------------------
# Install or update the ROSE Matrix Testing command-line tools. These are distributed as part of ROSE itself and depend
# on the ROSE library.
matrix-install-matrix-tools() {
    echo
    echo
    echo "================================================================================"
    echo "== Installing ROSE portability testing tools version $MATRIX_COMMITTISH"
    echo "== Downloading from $MATRIX_REPOSITORY"
    echo "================================================================================"
    echo

    # Decide whether we should install/update the tools
    local needs_update=
    local installed_version="$(cat rose-installed/latest/key 2>/dev/null)"
    local desired_version="$MATRIX_REPOSITORY $MATRIX_COMMITTISH"
    if [ ! -x rose-installed/latest/bin/rose-matrix-run ]; then
	needs_update=yes
    elif [ "$installed_version" != "$desired_version" ]; then
	needs_update=yes
    fi

    # If update is needed, make sure we know where to get the source code
    if [ -n "$needs_update" ]; then
	if [ "$MATRIX_REPOSITORY" = "" -o "$MATRIX_COMMITTISH" = "" ]; then
	    die "error: no info for installing matrix tools (MATRIX_REPOSITORY, MATRIX_COMMITTISH)"
	fi

	# Get the source code
	if [ -d matrix-src ]; then
	    (
		cd matrix-src
		git fetch "$MATRIX_REPOSITORY" "$MATRIX_COMMITTISH"
		git reset --hard FETCH_HEAD
		git clean -dfxq
	    )
	else
	    git clone "$MATRIX_REPOSITORY" matrix-src
	    (
		cd matrix-src
		git reset --hard "$MATRIX_COMMITTISH" || git checkout origin/"$MATRIX_COMMITTISH"
		git clean -dfxq
	    )
	fi

	# Build the tools.
	(
	    mkdir matrix-src/_build
	    cd matrix-src/_build
	    INSTALL="$MATRIX_ROOT/rose-installed" BUILD=tup OPTIMIZE=yes BOOST=1.69 PQXX=6.4.3 WT=none \
		   rmc init --batch --project=matrix ..
	    rmc --install=yes build
	    rmc config
	    rmc install
	)

	[ -n "$SMALL_FOOTPRINT" ] && rm -rf matrix-src
	echo "$desired_version" >rose-installed/latest/key

	# Since we upgraded the tools, we might have a new version of the script that's running. Don't actually upgrade
	# this very script yet because we're running it and that would cause shell interpreter problems. Instead, only
	# record that it's out of date. (Note: diff exits non-zero (fails) if the files differ).
	if [ -x "$0" ]; then
	    if ! diff -q "$0" "$HOME/rose-installed/latest/bin/$arg0"; then
		THIS_SCRIPT_OUT_OF_DATE=yes
	    fi
	else
	    die "error: where am I?"
	fi
    else
	echo
	echo "Matrix tools are up-to-date"
    fi
}

#------------------------------------------------------------------------------------------------------------------------
# If the script that's running is different than the version that's installed, then replace the running script with the
# new version. This also requires that we restart the script from its beginning or immediately exit.
matrix-update-this-script() {
    local restart="$1"

    if [ -n "$THIS_SCRIPT_OUT_OF_DATE" ]; then
	cp "$HOME/rose-installed/latest/bin/rose-matrix-aws-slave" "$0"
	[ -n "$restart" ] && exec bash "$0"
	exit 0
    fi
}

#------------------------------------------------------------------------------------------------------------------------
# Amount of free disk space for filesystem containing the CWD, measured in kB
matrix-free-space() {
    (unset POSIXLY_CORRECT && df "$MATRIX_ROOT" |tail -n +2 |head -n1 |tr -s ' ' '\t' |cut -f4)
}

#------------------------------------------------------------------------------------------------------------------------
# Reclaim some disk free space by removing old software installed by this script.
matrix-reclaim-disk() {
    local min_free_space="$1" # kB
    echo
    echo
    echo "================================================================================"
    echo "== Freeing disk space to reach $[min_free_space / 1024 / 1024] GiB"
    echo "== Current free space is $[$(matrix-free-space) / 1024 / 1024] GiB"
    echo "================================================================================"
    echo

    if [ ! -d $MATRIX_ROOT/rose-installed/latest/var/matrix/spock/var/installed ]; then
	echo "No RMC/Spock installed packages to remove"
	return 0
    fi
    
    (
	cd $MATRIX_ROOT/rose-installed/latest/var/matrix/spock/var/installed
	ls -tr */*.used |cat |sed 's/\.used//' |while read installed; do
	    # Check free space
	    if [ $(matrix-free-space) -lt $min_free_space ]; then
		# Get the name of the package
		local package_name="$(sed -n "/^package/ s/package:[ \t]*'\(.*\)'.*/\1/p" <"$installed.yaml")"
		if [ "$package_name" = "" ]; then
		    package_name="$(sed -n "/^package/ s/package:[ \t]*\([-_a-zA-Z0-9]*\)[ \t]*\$/\1/p" <"$installed.yaml")"
		    package_name="$(echo "$package_name" |tr -d "'")"
		fi

		# Avoid removing compilers and other important things
		case "$package_name" in
		    spock)                # Spock itself
			continue
			;;
		    gnu-*|llvm-*|intel-*) # compilers
			continue
			;;
		    *-generation)       # compiler code generators
			continue
			;;

		esac

		echo "removing $package_name as $installed"
		rm -rf "$installed.used" "$installed.yaml" "$installed"
	    fi
	done
    )
}

#------------------------------------------------------------------------------------------------------------------------
# Remove images for all Docker containers
matrix-maybe-remove-os-images() {
    local installed_version="$(cat images-key 2>/dev/null)"
    local desired_version="$TEST_ENVIRONMENT_VERSION"

    if [ "$installed_version" != "$desired_version" ]; then
	if true; then
	    # More precise
	    rose-matrix-run --rebuild-images
	else
	    # Nuclear option tries to remove all containers and images
	    docker container rm $(docker container ls -a |tail +2 |cut -d' ' -f1) || true
	    docker container rm $(docker container ls -a |tail +2 |cut -d' ' -f1) || true
	    docker image rm $(docker image ls -a |tail +2 |tr -s ' ' '\t' |cut -f3) || true
	    docker image rm $(docker image ls -a |tail +2 |tr -s ' ' '\t' |cut -f3) || true
	    rm -rf $HOME/rose-installed/latest/var/matrix/spock
	fi
	echo "$desired_version" >images-key
    fi
}

#------------------------------------------------------------------------------------------------------------------------
# Get the test source that is to be tested.  This is efficient in that it only updates the source code if the current
# version is different than what we're supposed to be testing.
have_test_source=
matrix-get-test-source() {
    local key="$TEST_REPOSITORY $TEST_COMMITTISH"
    if [ "$key" != "$have_test_source" ]; then
	echo
	echo
	echo "================================================================================"
	echo "Getting new testable source code, version $TEST_COMMITTISH"
	echo "Downloading from $TEST_REPOSITORY"
	echo "================================================================================"
	echo
	rm -rf rose
	git clone "$TEST_REPOSITORY" rose
	(
	    cd rose
	    git reset --hard "$TEST_COMMITTISH"
	    git submodule update
	    ./scripts/smgit clean -dfx || git clean -dfx
	)
	have_test_source="$key"
    fi
}

#------------------------------------------------------------------------------------------------------------------------
# Clean up some things
matrix-cleanup() {
    rm -f matrix-config
}

#------------------------------------------------------------------------------------------------------------------------
# Main program...
matrix-parse-command-line "$@"

# Figure out the credentials for accessing the database. There is no command-line switch for this because these
# credentials allow modifications to the database and we don't want to expose them to other users. Also, we don't use
# any pre-existing value for ROSE_MATRIX_DATABASE because that should normally be for read-only situations.
[ -n "$ROSE_MATRIX_SLAVE_DATABASE" ] || die "error: you must export ROSE_MATRIX_SLAVE_DATABASE credentials"
ROSE_MATRIX_DATABASE="$ROSE_MATRIX_SLAVE_DATABASE"
export ROSE_MATRIX_DATABASE

# All work is done from the portability testing root directory. This script takes care to not create or remove files
# anywhere else in the filesystem other than temporary files created in the usual temp directories. It will not clean
# up everything when it exits, because we want to be able to restart quickly when possible.
mkdir -p "$MATRIX_ROOT"
cd "$MATRIX_ROOT"

# Use our own installation of RMC/Spock so as to not interfere with other development that's happening on this machine.
export SPOCK_HOSTNAME=matrix-slave
export SPOCK_ROOT="$MATRIX_ROOT/spock"
export PATH="$SPOCK_ROOT/bin:$MATRIX_ROOT/rose-installed/latest/bin:$PATH"

# When using Tup to compile ROSE, we need to set this to non-empty, acknowledging that it's an experimental feature not
# intended for most users. If we don't set this, then the ROSE build using Tup will fail with a message about being
# experimental.
export TUP_ACKNOWLEDGMENT=yes

# Try to get the slave's configuration. This works if the slave is already configured, but will fail if the portability
# testing tools are not yet installed. The reason we want to do this early is that the slave's configuration tells us
# which version of portability testing tools to use, but it requires that some version is already installed. If we wait
# until after the RMC/Spock upgrade then the portability tools are no longer installed.
matrix-get-slave-configuration failure-is-okay

# Update software that will be needed to configure and compile the portability testing tools (and ROSE itself). If
# RMC/Spock needs to be updated, then any existing portability tools that are installed will no longer work (because
# their shared libraries were purged) and will be removed. Assume that since this is a ROSE developer's machine, that
# all the system prerequisites are already installed.
matrix-install-rmc-spock
matrix-clean-failed-dependencies

# Install initial version of portability testing tools if there are none installed (or if they were removed by prior
# steps of this script). All slaves should be running the same software as told to us by the database. If we can't
# contact the database, then we'll first build the latest development version of the tools in order to contact the
# database -- this is relatively foolprove. If we built the wrong version, we'll fix that in the testing loop.
matrix-install-matrix-tools
[ -n "$SETUP" ] || rose-matrix-slave-health start
matrix-update-this-script restart

# Here starts the actual testing loop.
test_number=0
while [ "$SETUP" = "" ]; do
    test_number=$[test_number + 1]

    # Delete software installed by the testing slaves until we have at least the specified amount of free space,
    # measured in kB. We do this by removing the least recently used packages first.
    matrix-reclaim-disk $[MIN_FREE_SPACE * 1024 * 1024]

    # Get that latest slave configuration and possibly update the portability testing tools. This is done inside the
    # testing loop so that we can upgrade all slaves even while they're running. Unfortunately, it's not practical
    # to update the script we're running (we can only do that during the initial setup, or when we're about to exit).
    matrix-get-slave-configuration
    matrix-install-matrix-tools

    # Obtain the software which is to be tested
    if [ "$TEST_REPOSITORY" = "" -o "$TEST_COMMITTISH" = "" ]; then
	echo "$arg0: testing is paused (no testable version specified)"
	rose-matrix-slave-health stop
	sleep 300
	rose-matrix-slave-health start
	continue
    fi
    matrix-maybe-remove-os-images
    matrix-get-test-source

    echo
    echo
    echo "================================================================================"
    echo "== Starting test, loop iteration $test_number"
    echo "================================================================================"
    echo
    rose-matrix-run $TEST_FLAGS -n1 $MATRIX_ROOT/rose
done

# Cleanup
matrix-cleanup
[ -n "$SETUP" ] || rose-matrix-slave-health stop
matrix-update-this-script
exit 0
