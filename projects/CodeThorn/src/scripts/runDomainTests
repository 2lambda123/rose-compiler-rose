#!/bin/bash

# exit immediately with ctrl-c
trap "exit" INT

red=$'\e[1;31m'
grn=$'\e[0;32m'
yel=$'\e[0;33m'
blu=$'\e[0;34m'
mag=$'\e[0;35m'
cyn=$'\e[0;36m'
end=$'\e[0m'

COLORED_FAIL=${red}FAIL${end}
COLORED_WARN=${yel}WARN${end}
COLORED_PASS=${grn}PASS${end}

TESTDIR=""
SHOW_OUTPUT="no"
KEEP_RESULTS="no"
SHARED_PSTATES="no"
COMBINE_SOLVER=18
INTERPRETER_SOLVER=5
NORMALIZE_LEVEL=1

function printHeader {
    echo "------------------------------------------------"
    echo "running DOMAIN TESTS"
    echo "------------------------------------------------"
}

function printStats {
    echo "PASS: $numPass, WARN: $numWarn (expected: $numWarnExpected), FAIL: $numFail (expected: $numFailExpected)"
    if [ $numWarn -gt $numWarnExpected ]; then
	echo "${red}Error: more warnings than expected${end}"
	exit 1
    fi
    if [ $numFail -gt $numFailExpected ]; then
	echo "${red}Error: more failing runs than expected${end}"
	exit 1
    fi
}

function runDomainTestsLevel3 {
    echo "scheduled tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            extension="${benchmarkname##*.}"
            printf "Testing %-38s: " $benchmarkname
            CT_OUTPUT_FILE=$benchmarkname.imout
            COMMAND="./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR"
            eval $COMMAND > /dev/null
            if [ ! $? -eq 0 ]
            then
	        echo $COLORED_FAIL
                ((numFail++))
                echo "REPRODUCE WITH: $COMMAND"
            else
                echo -n "$COLORED_PASS "
                EXEFILE=${benchmarkname}.exe
                case $extension in
                    C)
                        GCC=g++
                        ;;
                    c)
                        GCC=gcc
                        ;;
                    *)
                        echo "runDomainTests: unknown file extension: $extension (file: $benchmarkname)"
                        exit 1
                esac
                    
                $GCC $benchmark -o$EXEFILE -I $TESTDIR 
                if [ $? -ne 0 ];then
                    echo $COLORED_FAIL
                    ((numFail++))
                fi
                GCC_OUTPUT_FILE="${CT_OUTPUT_FILE}.check"
                if [ -f $TESTDIR/${benchmarkname}.testinput ]; then
                    # run with test input from file
                    ./$EXEFILE > $GCC_OUTPUT_FILE < $TESTDIR/${benchmarkname}.testinput
                else
                    ./$EXEFILE > $GCC_OUTPUT_FILE
                fi
                DIFF=$(diff $GCC_OUTPUT_FILE $CT_OUTPUT_FILE) 
                if [ "$DIFF" != "" ] 
                then
                    echo "$COLORED_WARN"
		    ((numWarn++))
                else
                    echo "$COLORED_PASS"
		    ((numPass++))
                fi
		if [[ "$KEEP_RESULTS" == "no" ]];then
		    rm -f $GCC_OUTPUT_FILE
		    rm -f $EXEFILE
		fi
            fi
        done
    done
    printStats
}

function runDomainTestsLevel2 {
    echo "Scheduled tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_OUTPUT_FILE=$benchmarkname.imout
	    if [[ $SHOW_OUTPUT == "yes" ]]; then
		./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR
	    fi
	    if ( ! ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR || fail ) &> /dev/null; then
	        echo "$COLORED_FAIL"
                ((numFail++))
	    else
                echo "$COLORED_PASS"
		((numPass++))
	    fi
        done
    done
    printStats
}

# 20,21,22,25,27,32,36,39 (8)
# 20,21,22,25,--,32,36,39 (7)
function level3Test {
    testNumbers=`echo {001..048}`
    testNumbers+=" 051 052"
    # 053 is a C code
    testNumbers+=" 053"
    numWarnExpected=9
    numFailExpected=0
    # solver 5 is required for level3
    #testNumbers=027
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=${NORMALIZE_LEVEL} --interpreter-mode=1 --in-state-string-literals --abstraction-mode=0 --exploration-mode=topologic-sort --shared-pstates=$SHARED_PSTATES --solver=5"
    echo -n "Level 3 (interpreter mode), solver $INTERPRETER_SOLVER: " 
    runDomainTestsLevel3
}

function level2BasicCombineTest {
    # 49,50 require abstraction mode
    testNumbers=`echo {001..048}`
    testNumbers+=" "
    testNumbers+=`echo {049..050}`
    numWarnExpected=0
    numFailExpected=0
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=${NORMALIZE_LEVEL} --interpreter-mode=0 --in-state-string-literals --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=0 --pointer-sets=off --shared-pstates=$SHARED_PSTATES --solver=$COMBINE_SOLVER"
    echo
    echo -n "Level 2 (abstraction mode, array abstraction index=0, solver $COMBINE_SOLVER): " 
    runDomainTestsLevel2

    # 49,50 require abstraction mode
    #testNumbers=`echo {049..050}`
    #numWarnExpected=0
    #numFailExpected=0
    #CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=${NORMALIZE_LEVEL} --interpreter-mode=0 --in-state-string-literals --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=2 --pointer-sets=off --shared-pstates=$SHARED_PSTATES --solver=$COMBINE_SOLVER"
    #echo
    #echo -n "Level 2 (abstraction mode, array abstraction index=2, solver $COMBINE_SOLVER): " 
    #runDomainTestsLevel2
}

function level2AvSetCombineTest {
    # av-sets abstraction test
    #testNumbers=`echo {001..050}`
    testNumbers="008"
    numWarnExpected=0
    numFailExpected=24
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=${NORMALIZE_LEVEL} --interpreter-mode=0 --in-state-string-literals=0 --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=0 --pointer-sets=on --vis --tg1-memory-subgraphs --shared-pstates=$SHARED_PSTATES --solver=$COMBINE_SOLVER"
    echo
    echo -n "Level 2 (abstraction mode, array abstraction index=0, av-sets, solver $COMBINE_SOLVER): " 
    runDomainTestsLevel2
}

function regressionTests {
    testNumbers=`echo {900..901}`
    echo
    echo "Regression Tests (with solver $INTERPRETER_SOLVER)"
    echo "Scheduled regression tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    numWarnExpected=0
    numFailExpected=0
    local CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=${NORMALIZE_LEVEL} --interpreter-mode=1 --in-state-string-literals=1 --exploration-mode=topologic-sort --abstraction-mode=0 --array-abstraction-index=-1 --pointer-sets=off --shared-pstates=$SHARED_PSTATES --solver=$INTERPRETER_SOLVER"
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_REFERENCE_FILE=${benchmark}.txt # with path
            CT_OUTPUT_FILE=${benchmarkname}.imout # without path
            if ( ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR ); then
	        if ( ! diff $CT_REFERENCE_FILE $CT_OUTPUT_FILE ); then
	            echo "$COLORED_FAIL (output)"
                    ((numFail++))
	        else
                    echo "$COLORED_PASS"
		    ((numPass++))
	        fi
            else
	        echo "$COLORED_FAIL (execution)"
                ((numFail++))
            fi
        done
    done
    printStats
}

function printHelp {
    echo
    echo "Command line options:"
    echo "--testdir    : path to directory with tests"
    echo "--l3         : level3 interpreter-mode tests"
    echo "--l2basic    : level2 tests with basic combination operator"
    echo "--l2avset    : level2 tests with av-set combination operator"
    echo "--regression-tests: run level 3 regression tests (uses diff)"
    echo "--all        : run all tests"
    echo "--show-errors: show error output produced by the tested tool (positional parameter, must precede test option"
    echo "--help       : print help message"
    echo
}

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --l3)
	level3Test
	shift
	;;
    --l2basic)
	level2BasicCombineTest
	shift
	;;
    --l2avset)
	level2AvSetCombineTest
	shift
	;;
    --all)
	printHeader
	#level3Test
	#level2BasicCombineTest
	#level2AvSetCombineTest
        regressionTests
	shift
	;;
    --regression-tests)
        regressionTests
        shift
        ;;
    --testdir)
	TESTDIR=$2
	shift
	shift
	;;
    --show-errors)
	SHOW_OUTPUT="yes"
	shift
	;;
    --keep-results)
	KEEP_RESULTS=yes
	shift
	;;
    --help)
	printHelp
	shift
	exit
	;;
    *)
	echo "runDomainTests: unknown command $key."
	exit 1
    esac
done
