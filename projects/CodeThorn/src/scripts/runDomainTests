#!/bin/bash

# exit immediately with ctrl-c
trap "exit" INT

red=$'\e[1;31m'
grn=$'\e[0;32m'
yel=$'\e[0;33m'
blu=$'\e[0;34m'
mag=$'\e[0;35m'
cyn=$'\e[0;36m'
end=$'\e[0m'

COLORED_FAIL=${red}FAIL${end}
COLORED_WARN=${yel}WARN${end}
COLORED_PASS=${grn}PASS${end}

TESTDIR=""
SHOW_OUTPUT="no"
KEEP_RESULTS="no"

function printHeader {
    echo "------------------------------------------------"
    echo "running DOMAIN TESTS"
    echo "------------------------------------------------"
}

function printStats {
    echo "PASS: $numPass, WARN: $numWarn (expected: $numWarnExpected), FAIL: $numFail (expected: $numFailExpected)"
    if [ $numWarn -gt $numWarnExpected ]; then
	echo "${red}Error: more warnings than expected${end}"
	exit 1
    fi
    if [ $numFail -gt $numFailExpected ]; then
	echo "${red}Error: more failing runs than expected${end}"
	exit 1
    fi
}

function runDomainTestsLevel3 {
    echo "scheduled tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_OUTPUT_FILE=$benchmarkname.imout
            ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR > /dev/null
            if [ ! $? -eq 0 ]
            then
	        echo $COLORED_FAIL
                ((numFail++))
            else
                echo -n "$COLORED_PASS "
                EXEFILE=${benchmarkname}.exe
                g++ $benchmark -o$EXEFILE -I $TESTDIR 
                GCC_OUTPUT_FILE="${CT_OUTPUT_FILE}.check"
                if [ -f $TESTDIR/${benchmarkname}.testinput ]; then
                    # run with test input from file
                    ./$EXEFILE > $GCC_OUTPUT_FILE < $TESTDIR/${benchmarkname}.testinput
                else
                    ./$EXEFILE > $GCC_OUTPUT_FILE
                fi
                DIFF=$(diff $GCC_OUTPUT_FILE $CT_OUTPUT_FILE) 
                if [ "$DIFF" != "" ] 
                then
                    echo "$COLORED_WARN"
		    ((numWarn++))
                else
                    echo "$COLORED_PASS"
		    ((numPass++))
                fi
		if [[ "$KEEP_RESULTS" == "no" ]];then
		    rm -f $GCC_OUTPUT_FILE
		    rm -f $EXEFILE
		fi
            fi
        done
    done
    printStats
}

function runDomainTestsLevel2 {
    echo "Scheduled tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_OUTPUT_FILE=$benchmarkname.imout
	    if [[ $SHOW_OUTPUT == "yes" ]]; then
		./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR
	    fi
	    if ( ! ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR || fail ) &> /dev/null; then
	        echo "$COLORED_FAIL"
                ((numFail++))
	    else
                echo "$COLORED_PASS"
		((numPass++))
	    fi
        done
    done
    printStats
}

function level3Test {
    testNumbers=`echo {001..048}`
    testNumbers+=" 051"
    numWarnExpected=7
    numFailExpected=0
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=2 --interpreter-mode=1 --in-state-string-literals --abstraction-mode=0 --exploration-mode=topologic-sort"
    echo -n "Level 3 (interpreter mode): " 
    runDomainTestsLevel3
}

function level2BasicCombineTest {
    # 49,50 require abstraction mode
    testNumbers=`echo {049..050}`
    numWarnExpected=0
    numFailExpected=0
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=2 --interpreter-mode=0 --in-state-string-literals --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=0 --pointer-sets=off"
    echo
    echo -n "Level 2 (abstraction mode, array abstraction index=0): " 
    runDomainTestsLevel2

    # 49,50 require abstraction mode
    testNumbers=`echo {049..050}`
    numWarnExpected=0
    numFailExpected=0
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=2 --interpreter-mode=0 --in-state-string-literals --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=2 --pointer-sets=off"
    echo
    echo -n "Level 2 (abstraction mode, array abstraction index=2): " 
    runDomainTestsLevel2
}

function level2AvSetCombineTest {
    # av-sets abstraction test
    #testNumbers=`echo {001..050}`
    testNumbers="008"
    numWarnExpected=0
    numFailExpected=24
    CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=2 --interpreter-mode=0 --in-state-string-literals=0 --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=0 --pointer-sets=on --vis --tg1-memory-subgraphs"
    echo
    echo -n "Level 2 (abstraction mode, array abstraction index=0, av-sets): " 
    runDomainTestsLevel2
}

function regressionTests {
    testNumbers=`echo {900..901}`
    echo
    echo "Regression Tests"
    echo "Scheduled regression tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    local CT_MODE_OPTIONS="--context-sensitive=yes --normalize-level=2 --interpreter-mode=1 --in-state-string-literals=1 --exploration-mode=topologic-sort --abstraction-mode=0 --array-abstraction-index=-1 --pointer-sets=off"
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_REFERENCE_FILE=${benchmark}.txt # with path
            CT_OUTPUT_FILE=${benchmarkname}.imout # without path
            if ( ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR ); then
	        if ( ! diff $CT_REFERENCE_FILE $CT_OUTPUT_FILE ); then
	            echo "$COLORED_FAIL (output)"
                    ((numFail++))
	        else
                    echo "$COLORED_PASS"
		    ((numPass++))
	        fi
            else
	        echo "$COLORED_FAIL (execution)"
                ((numFail++))
            fi
        done
    done
    printStats
}

function printHelp {
    echo
    echo "Command line options:"
    echo "--testdir    : path to directory with tests"
    echo "--l3         : level3 interpreter-mode tests"
    echo "--l2basic    : level2 tests with basic combination operator"
    echo "--l2avset    : level2 tests with av-set combination operator"
    echo "--regression-tests: run level 3 regression tests (uses diff)"
    echo "--all        : run all tests"
    echo "--show-errors: show error output produced by the tested tool (positional parameter, must precede test option"
    echo "--help       : print help message"
    echo
}

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --l3)
	level3Test
	shift
	;;
    --l2basic)
	level2BasicCombineTest
	shift
	;;
    --l2avset)
	level2AvSetCombineTest
	shift
	;;
    --all)
	printHeader
	level3Test
	level2BasicCombineTest
	#level2AvSetCombineTest
        regressionTests
	shift
	;;
    --regression-tests)
        regressionTests
        ;;
    --testdir)
	TESTDIR=$2
	shift
	shift
	;;
    --show-errors)
	SHOW_OUTPUT="yes"
	shift
	;;
    --keep-results)
	KEEP_RESULTS=yes
	shift
	;;
    --help)
	printHelp
	shift
	exit
	;;
    *)
	echo "runDomainTests: unknown command $key."
	exit 1
    esac
done
