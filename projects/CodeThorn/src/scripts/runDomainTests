#!/bin/bash

# exit immediately with ctrl-c
trap "exit" INT

red=$'\e[1;31m'
grn=$'\e[1;32m'
yel=$'\e[1;33m'
blu=$'\e[1;34m'
mag=$'\e[1;35m'
cyn=$'\e[1;36m'
end=$'\e[0m'

COLORED_FAIL=${red}FAIL${end}
COLORED_WARN=${yel}WARN${end}
COLORED_PASS=${grn}PASS${end}

TESTDIR=$1
echo "------------------------------------------------"
echo "running DOMAIN TESTS"
echo "------------------------------------------------"


function printStats {
    echo "PASS: $numPass, WARN: $numWarn (expected: $numWarnExpected), FAIL: $numFail (expected: $numFailExpected)"
    if [ $numWarn -gt $numWarnExpected ]; then
	echo "${red}Error: more warnings than expected${end}"
	exit 1
    fi
    if [ $numFail -gt $numFailExpected ]; then
	echo "${red}Error: more failing runs than expected${end}"
	exit 1
    fi
}

function runDomainTestsLevel3 {
    echo "scheduled tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_OUTPUT_FILE=$benchmarkname.imout
            ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR > /dev/null
            if [ ! $? -eq 0 ]
            then
	        echo $COLORED_FAIL
                ((numFail++))
            else
                echo -n "$COLORED_PASS "
                EXEFILE=${benchmarkname}.exe
                g++ $benchmark -o$EXEFILE -I $TESTDIR 
                GCC_OUTPUT_FILE="${CT_OUTPUT_FILE}.check"
                if [ -f $TESTDIR/${benchmarkname}.testinput ]; then
                    # run with test input from file
                    ./$EXEFILE > $GCC_OUTPUT_FILE < $TESTDIR/${benchmarkname}.testinput
                else
                    ./$EXEFILE > $GCC_OUTPUT_FILE
                fi
                DIFF=$(diff $GCC_OUTPUT_FILE $CT_OUTPUT_FILE) 
                if [ "$DIFF" != "" ] 
                then
                    echo $COLORED_WARN
		    ((numWarn++))
                else
                    echo $COLORED_PASS
		    ((numPass++))
                fi
		rm -f $GCC_OUTPUT_FILE
		rm -f $EXEFILE
            fi
        done
    done
    printStats
}

function runDomainTestsLevel2 {
    echo "Scheduled tests: $testNumbers"
    numPass=0
    numWarn=0
    numFail=0
    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/DOM${testNumber};
        for benchmark in ${benchmarkprefix}*.[Cc]; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-38s: " $benchmarkname
            CT_OUTPUT_FILE=$benchmarkname.imout
            ./codethorn $benchmark $CT_MODE_OPTIONS --interpreter-mode-file=$CT_OUTPUT_FILE -I $TESTDIR > /dev/null
            if [ ! $? -eq 0 ]
            then
	        echo $COLORED_FAIL
                ((numFail++))
            else
                echo "$COLORED_PASS"
		((numPass++))
            fi
        done
    done
    printStats
}

testNumbers=`echo {001..048}`
numWarnExpected=7
numFailExpected=0
CT_MODE_OPTIONS="--normalize-level=2 --interpreter-mode=1 --in-state-string-literals --exploration-mode=topologic-sort"
echo -n "Level 3 (interpreter mode): " 
runDomainTestsLevel3

testNumbers=`echo {049..050}`
numWarnExpected=0
numFailExpected=0
CT_MODE_OPTIONS="--normalize-level=2 --interpreter-mode=0 --in-state-string-literals --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=2"
echo
echo -n "Level 2 (abstraction mode, array abstraction index=2): " 
runDomainTestsLevel2


