#!/bin/bash

OPTIONS="--normalize-level=1 --ignore-unknown-functions --generate-reports=yes --precision=2 --solver=18 --exploration-mode=topologic-sort --abstraction-mode=1 --array-abstraction-index=0"

# test 1-9: normalization: YES
# test 10:  normalization: NO

TESTDIR=$1
echo "------------------------------------------------"
echo "running NULL POINTER DEREFERENCE TESTS"
echo "------------------------------------------------"

REPORT_DIR="test_$$"
mkdir -p $REPORT_DIR

function runNPTests {    
    echo "Scheduled tests: $testNumbers"

    MIN_COUNT=$1
    MAX_COUNT=$2
    TESTS_FAILED_EXPECTED=$3
    
    TESTS_FAILED=0
    TESTS_PASSED=0

    for testNumber in $testNumbers; do
        benchmarkprefix=$TESTDIR/${testprefix}${testNumber};
        for benchmark in ${benchmarkprefix}*.c; do
            benchmarkname=$(basename $benchmark)
            printf "Testing %-44s : " "$benchmarkname"
            ./codethorn ${OPTIONS} --report-dir=$REPORT_DIR $benchmark > /dev/null
            nplines=`grep -v gcc_HEADERS $REPORT_DIR/null-pointer-locations.csv | wc -l | cut -f1 -d' '`
            if [ ! $? -eq 0 ]
            then
	        echo "FAIL: error in input or internal tool error"
                exit 1
            else
                if [ $nplines -lt $MIN_COUNT ] || [ $nplines -gt $MAX_COUNT ];
                then
	            printf "WARN: %s null pointer dereference locations\n" "$nplines"
                    TESTS_FAILED=$((TESTS_FAILED+1))
                else
	            printf "PASS: %s null pointer dereference locations\n" "$nplines"
                    TESTS_PASSED=$((TESTS_PASSED+1))
                fi
            fi
        done
    done
    TESTS_TOTAL=$((TESTS_PASSED+TESTS_FAILED))
    if [ $TESTS_FAILED -gt 0 ];
    then
        if [ $TESTS_FAILED -le $TESTS_FAILED_EXPECTED ]
        then
            echo "PASS ($TESTS_FAILED tests of $TESTS_TOTAL imprecise (expected $TESTS_FAILED_EXPECTED))"
        else
            echo "FAIL ($TESTS_FAILED tests of $TESTS_TOTAL failed) Exiting."
            exit 1
        fi
    else
        echo "All tests passed ($TESTS_TOTAL)"
    fi
}

ARG=$1

if [[ $# -eq 0 ]];
then
    echo "runNPTests: usage: TESTDIR [--np] [--no-np]"
    exit
fi

for arg in "$@"
do
    case $arg in
        --np)
            testNumbers=`echo {001..005}`
            testprefix=NP
            runNPTests 1 10 0
            ;;
        --no-np)
            testNumbers=`echo {001..005}`
            testprefix=NONP
            runNPTests 0 0 1
            ;;
        *)
            ;;
    esac
done

rm -rf $REPORT_DIR
